USE [Reviewer]
GO
/****** Object:  FullTextCatalog [tb_ITEM_ATTRIBUTE_FTIndex]    Script Date: 05/20/2010 16:26:31 ******/
CREATE FULLTEXT CATALOG [tb_ITEM_ATTRIBUTE_FTIndex]WITH ACCENT_SENSITIVITY = OFF
AUTHORIZATION [dbo]
GO
/****** Object:  FullTextCatalog [tb_ITEM_DOCUMENT_FTIndex]    Script Date: 05/20/2010 16:26:31 ******/
CREATE FULLTEXT CATALOG [tb_ITEM_DOCUMENT_FTIndex]WITH ACCENT_SENSITIVITY = OFF
AUTHORIZATION [dbo]
GO
/****** Object:  FullTextCatalog [tb_ITEM_FTIndex]    Script Date: 05/20/2010 16:26:31 ******/
CREATE FULLTEXT CATALOG [tb_ITEM_FTIndex]WITH ACCENT_SENSITIVITY = OFF
AUTHORIZATION [dbo]
GO
/****** Object:  Table [dbo].[TB_TEMP_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_TEMP_ITEM](
	[N_ITEM_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ISWEB] [tinyint] NOT NULL,
	[TYPE_ID] [tinyint] NOT NULL,
	[mediumToEd] [int] NOT NULL,
	[titleSource] [nvarchar](50) NOT NULL,
	[ParentTSource] [nvarchar](50) NOT NULL,
	[PubData] [nvarchar](50) NOT NULL,
	[INSTITUTION] [nvarchar](255) NOT NULL,
	[ITEM_ID] [nvarchar](50) NOT NULL,
	[ITEM] [nvarchar](255) NULL,
	[ITEM_DESCRIPTION] [ntext] NULL,
	[TYPE_CODE] [nvarchar](50) NOT NULL,
	[DATE_CREATED] [datetime] NULL,
	[DATE_EDITED] [datetime] NULL,
	[CREATED_BY] [nvarchar](50) NULL,
	[EDITED_BY] [nvarchar](50) NULL,
	[AUTHOR_ANALYTIC] [nvarchar](255) NULL,
	[TITLE_ANALYTIC] [nvarchar](500) NULL,
	[MEDIUM] [nvarchar](255) NULL,
	[AUTHOR_MONO] [nvarchar](255) NULL,
	[AUTHOR_ROLE] [nvarchar](255) NULL,
	[TITLE_MONO] [nvarchar](500) NULL,
	[JOURNAL] [nvarchar](500) NULL,
	[TRANS_NEWS_TITLE] [nvarchar](500) NULL,
	[PLACE] [nvarchar](255) NULL,
	[EDITION] [nvarchar](255) NULL,
	[PLACE_OF_PUB] [nvarchar](255) NULL,
	[PUBLISHER] [nvarchar](255) NULL,
	[DATE_OF_PUB] [nvarchar](255) NULL,
	[VOLUME] [nvarchar](255) NULL,
	[REPORT_ID] [nvarchar](255) NULL,
	[ISSUE] [nvarchar](255) NULL,
	[PAGES] [nvarchar](255) NULL,
	[EXTENT_OF_WORK] [nvarchar](255) NULL,
	[CONTACT_DETAILS] [nvarchar](255) NULL,
	[SERIES_TITLE] [nvarchar](255) NULL,
	[SERIES_VOLUME] [nvarchar](255) NULL,
	[SERIES_ISSUE] [nvarchar](255) NULL,
	[WRITTEN_LANGUAGE] [nvarchar](255) NULL,
	[AVAILABILITY] [nvarchar](255) NULL,
	[LOCATION] [nvarchar](255) NULL,
	[EPIC_NO] [nvarchar](255) NULL,
	[ISSN] [nvarchar](255) NULL,
	[ISBN] [nvarchar](255) NULL,
	[NOTES] [ntext] NULL,
	[ABSTRACT] [ntext] NULL,
	[AGE_RANGE] [nvarchar](255) NULL,
	[SHORT_TITLE] [nvarchar](70) NULL,
	[ITEM_IDENTITY] [bigint] NOT NULL,
	[CONFIDENTIAL_CONTACT_ID] [nvarchar](50) NULL,
	[IMPORTED_REF_ID] [nvarchar](50) NULL,
 CONSTRAINT [PK_tb_N_ITEM] PRIMARY KEY CLUSTERED 
(
	[N_ITEM_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_REVIEW_ROLE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_REVIEW_ROLE](
	[ROLE_NAME] [nvarchar](50) NOT NULL,
	[ROLE_DESCR] [nvarchar](2000) NOT NULL,
 CONSTRAINT [PK_TB_REVIEW_ROLE] PRIMARY KEY CLUSTERED 
(
	[ROLE_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_SET_TYPE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_SET_TYPE](
	[SET_TYPE_ID] [int] IDENTITY(1,1) NOT NULL,
	[SET_TYPE] [nvarchar](50) NULL,
	[OLD_GUIDELINE_STATUS_ID] [int] NULL,
 CONSTRAINT [PK_TB_SET_TYPE] PRIMARY KEY CLUSTERED 
(
	[SET_TYPE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_REVIEW](
	[REVIEW_ID] [int] IDENTITY(1,1) NOT NULL,
	[REVIEW_NAME] [nvarchar](1000) NULL,
	[OLD_REVIEW_ID] [nvarchar](50) NULL,
	[OLD_REVIEW_GROUP_ID] [nvarchar](50) NULL,
	[DATE_CREATED] [datetime] NULL,
	[EXPIRY_DATE] [date] NULL,
	[MONTHS_CREDIT] [smallint] NOT NULL,
	[FUNDER_ID] [int] NULL,
	[REVIEW_NUMBER] [nvarchar](50) NULL,
 CONSTRAINT [PK_tb_REVIEW] PRIMARY KEY CLUSTERED 
(
	[REVIEW_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_OUTCOME_TYPE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_OUTCOME_TYPE](
	[OUTCOME_TYPE_ID] [int] NOT NULL,
	[OUTCOME_TYPE_NAME] [nvarchar](255) NULL,
 CONSTRAINT [PK_TB_OUTCOME_TYPE] PRIMARY KEY CLUSTERED 
(
	[OUTCOME_TYPE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_META_ANALYSIS_TYPE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_META_ANALYSIS_TYPE](
	[META_ANALYSIS_TYPE_ID] [int] NOT NULL,
	[META_ANALYSIS_TYPE_TITLE] [nvarchar](255) NULL,
 CONSTRAINT [PK_TB_META_ANALYSIS_TYPE] PRIMARY KEY CLUSTERED 
(
	[META_ANALYSIS_TYPE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_IMPORT_FILTER]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_IMPORT_FILTER](
	[IMPORT_FILTER_ID] [int] IDENTITY(1,1) NOT NULL,
	[IMPORT_FILTER_NAME] [nvarchar](60) NOT NULL,
	[IMPORT_FILTER_NOTES] [nvarchar](4000) NULL,
	[STARTOFNEWREC] [nvarchar](400) NOT NULL,
	[TYPEFIELD] [nvarchar](400) NOT NULL,
	[STARTOFNEWFIELD] [nvarchar](400) NOT NULL,
	[TITLE] [nvarchar](400) NOT NULL,
	[PTITLE] [nvarchar](400) NOT NULL,
	[SHORTTITLE] [nvarchar](400) NOT NULL,
	[DATE] [nvarchar](400) NOT NULL,
	[MONTH] [nvarchar](400) NOT NULL,
	[AUTHOR] [nvarchar](400) NOT NULL,
	[PARENTAUTHOR] [nvarchar](400) NOT NULL,
	[STANDARDN] [nvarchar](400) NOT NULL,
	[CITY] [nvarchar](400) NOT NULL,
	[PUBLISHER] [nvarchar](400) NOT NULL,
	[INSTITUTION] [nvarchar](400) NOT NULL,
	[VOLUME] [nvarchar](400) NOT NULL,
	[ISSUE] [nvarchar](400) NOT NULL,
	[EDITION] [nvarchar](400) NOT NULL,
	[STARTPAGE] [nvarchar](400) NOT NULL,
	[ENDPAGE] [nvarchar](400) NOT NULL,
	[PAGES] [nvarchar](400) NOT NULL,
	[AVAILABILITY] [nvarchar](400) NOT NULL,
	[URL] [nvarchar](400) NOT NULL,
	[ABSTRACT] [nvarchar](400) NOT NULL,
	[OLD_ITEM_ID] [nvarchar](400) NOT NULL,
	[NOTES] [nvarchar](400) NOT NULL,
	[DEFAULTTYPECODE] [tinyint] NOT NULL,
 CONSTRAINT [PK_TB_IMPORT_FILTER] PRIMARY KEY CLUSTERED 
(
	[IMPORT_FILTER_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
 CONSTRAINT [IX_TB_IMPORT_FILTER] UNIQUE NONCLUSTERED 
(
	[IMPORT_FILTER_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_ITEM_TYPE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_TYPE](
	[TYPE_ID] [int] NOT NULL,
	[TYPE_NAME] [nvarchar](50) NOT NULL,
	[DESCRIPTION] [nvarchar](200) NOT NULL,
	[NOTES] [nvarchar](200) NOT NULL,
 CONSTRAINT [PK_tb_ITEM_TYPE] PRIMARY KEY CLUSTERED 
(
	[TYPE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_ITEM_TERM_DICTIONARY]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_TERM_DICTIONARY](
	[ITEM_TERM_DICTIONARY_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[TERM] [nvarchar](128) NULL,
	[SCORE] [float] NULL,
	[UI] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_CONTACT]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TB_CONTACT](
	[CONTACT_ID] [int] IDENTITY(1,1) NOT NULL,
	[old_contact_id] [nvarchar](50) NULL,
	[CONTACT_NAME] [nvarchar](255) NULL,
	[USERNAME] [varchar](50) NULL,
	[PASSWORD] [varchar](50) NULL,
	[LAST_LOGIN] [datetime] NULL,
	[DATE_CREATED] [datetime] NULL,
	[EMAIL] [nvarchar](500) NULL,
	[EXPIRY_DATE] [date] NOT NULL,
	[MONTHS_CREDIT] [smallint] NOT NULL,
	[CREATOR_ID] [int] NULL,
	[TYPE] [nchar](12) NOT NULL,
	[IS_SITE_ADMIN] [bit] NOT NULL,
 CONSTRAINT [PK_tb_CONTACT] PRIMARY KEY CLUSTERED 
(
	[CONTACT_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TB_ATTRIBUTE_TYPE]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TB_ATTRIBUTE_TYPE](
	[ATTRIBUTE_TYPE_ID] [int] NOT NULL,
	[ATTRIBUTE_TYPE] [nvarchar](255) NULL,
	[OLD_IS_ANSWER] [varchar](1) NULL,
 CONSTRAINT [PK_TB_ATTRIBUTE_TYPE] PRIMARY KEY CLUSTERED 
(
	[ATTRIBUTE_TYPE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TB_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TB_ITEM](
	[ITEM_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[TYPE_ID] [int] NOT NULL,
	[TITLE] [nvarchar](4000) NULL,
	[PARENT_TITLE] [nvarchar](4000) NULL,
	[SHORT_TITLE] [nvarchar](70) NULL,
	[DATE_CREATED] [datetime] NULL,
	[CREATED_BY] [nvarchar](50) NULL,
	[DATE_EDITED] [datetime] NULL,
	[EDITED_BY] [nvarchar](50) NULL,
	[YEAR] [nchar](4) NULL,
	[MONTH] [varchar](10) NULL,
	[STANDARD_NUMBER] [nvarchar](255) NULL,
	[CITY] [nvarchar](100) NULL,
	[COUNTRY] [nvarchar](100) NULL,
	[PUBLISHER] [nvarchar](1000) NULL,
	[INSTITUTION] [nvarchar](1000) NULL,
	[VOLUME] [nvarchar](56) NULL,
	[PAGES] [nvarchar](50) NULL,
	[EDITION] [nvarchar](200) NULL,
	[ISSUE] [nvarchar](100) NULL,
	[IS_LOCAL] [bit] NULL,
	[AVAILABILITY] [nvarchar](255) NULL,
	[URL] [nvarchar](500) NULL,
	[MASTER_ITEM_ID] [bigint] NULL,
	[OLD_ITEM_ID] [nvarchar](50) NULL,
	[ABSTRACT] [nvarchar](max) NULL,
	[COMMENTS] [nvarchar](max) NULL,
 CONSTRAINT [PK_tb_ITEM] PRIMARY KEY CLUSTERED 
(
	[ITEM_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE FULLTEXT INDEX ON [dbo].[TB_ITEM](
[ABSTRACT] LANGUAGE [English], 
[TITLE] LANGUAGE [English])
KEY INDEX [PK_tb_ITEM]ON ([tb_ITEM_FTIndex], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  Table [dbo].[TB_ITEM_DUPLICATES]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_DUPLICATES](
	[ITEM_DUPLICATES_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[_key_in] [int] NULL,
	[_SCORE] [float] NULL,
	[_key_out] [int] NULL,
	[ITEM_ID] [bigint] NULL,
	[REVIEW_ID] [int] NULL,
	[IS_CHECKED] [bit] NULL,
	[IS_DUPLICATE] [bit] NULL,
 CONSTRAINT [PK_TB_ITEM_DUPLICATES] PRIMARY KEY CLUSTERED 
(
	[ITEM_DUPLICATES_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[st_Generate_st_TempTermExtractionSelectedItems]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_Generate_st_TempTermExtractionSelectedItems]
(
	@ITEMS NVARCHAR(max)
)

As

SET NOCOUNT ON

exec ('
ALTER procedure [dbo].st_TempTermExtractionSelectedItems
As

SET NOCOUNT ON

SELECT I.ITEM_ID, I.ABSTRACT FROM TB_ITEM I
INNER JOIN dbo.fn_Split_int(''' + @ITEMS + ''', '','') ITEMS
ON I.ITEM_ID = ITEMS.value
WHERE I.ABSTRACT != ''''


SET NOCOUNT OFF

')
GO
/****** Object:  UserDefinedFunction [dbo].[fn_Split_int]    Script Date: 05/20/2010 16:26:31 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_Split_int](@sText varchar(max), @sDelim varchar(20) = ' ')
RETURNS @retArray TABLE (idx smallint Primary Key, value bigint)
AS
BEGIN
DECLARE @idx smallint,
	@value varchar(8000),
	@bcontinue bit,
	@iStrike smallint,
	@iDelimlength tinyint
IF @sDelim = 'Space'
	BEGIN
	SET @sDelim = ' '
	END
SET @idx = 0
SET @sText = LTrim(RTrim(@sText))
SET @iDelimlength = DATALENGTH(@sDelim)
SET @bcontinue = 1
IF NOT ((@iDelimlength = 0) or (@sDelim = 'Empty'))
	BEGIN
	WHILE @bcontinue = 1
		BEGIN
--If you can find the delimiter in the text, retrieve the first element and
--insert it with its index into the return table.
 
		IF CHARINDEX(@sDelim, @sText)>0
			BEGIN
			SET @value = SUBSTRING(@sText,1, CHARINDEX(@sDelim,@sText)-1)
				BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, CAST(@value as bigint))
				END
			
--Trim the element and its delimiter from the front of the string.
			--Increment the index and loop.
SET @iStrike = DATALENGTH(@value) + @iDelimlength
			SET @idx = @idx + 1
			SET @sText = LTrim(Right(@sText,DATALENGTH(@sText) - @iStrike))
		
			END
		ELSE
			BEGIN
--If you can't find the delimiter in the text, @sText is the last value in
--@retArray.
 SET @value = @sText
				BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, CAST(@value AS bigint))
				END
			--Exit the WHILE loop.
SET @bcontinue = 0
			END
		END
	END
ELSE
	BEGIN
	WHILE @bcontinue=1
		BEGIN
		--If the delimiter is an empty string, check for remaining text
		--instead of a delimiter. Insert the first character into the
		--retArray table. Trim the character from the front of the string.
--Increment the index and loop.
		IF DATALENGTH(@sText)>1
			BEGIN
			SET @value = SUBSTRING(@sText,1,1)
				BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, CAST(@value as bigint))
				END
			SET @idx = @idx+1
			SET @sText = SUBSTRING(@sText,2,DATALENGTH(@sText)-1)
			
			END
		ELSE
			BEGIN
			--One character remains.
			--Insert the character, and exit the WHILE loop.
			INSERT @retArray (idx, value)
			VALUES (@idx, CAST(@sText as bigint))
			SET @bcontinue = 0	
			END
	END
END
RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn_Split]    Script Date: 05/20/2010 16:26:31 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_Split](@sText varchar(8000), @sDelim varchar(20) = ' ')
RETURNS @retArray TABLE (idx smallint Primary Key, value varchar(8000) COLLATE SQL_Latin1_General_CP1_CI_AS)
AS
BEGIN
DECLARE @idx smallint,
	@value varchar(8000),
	@bcontinue bit,
	@iStrike smallint,
	@iDelimlength tinyint

IF @sDelim = 'Space'
	BEGIN
	SET @sDelim = ' '
	END

SET @idx = 0
SET @sText = LTrim(RTrim(@sText))
SET @iDelimlength = DATALENGTH(@sDelim)
SET @bcontinue = 1

IF NOT ((@iDelimlength = 0) or (@sDelim = 'Empty'))
	BEGIN
	WHILE @bcontinue = 1
		BEGIN

--If you can find the delimiter in the text, retrieve the first element and
--insert it with its index into the return table.
 
		IF CHARINDEX(@sDelim, @sText)>0
			BEGIN
			SET @value = SUBSTRING(@sText,1, CHARINDEX(@sDelim,@sText)-1)
				BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, @value)
				END
			
--Trim the element and its delimiter from the front of the string.
			--Increment the index and loop.
SET @iStrike = DATALENGTH(@value) + @iDelimlength
			SET @idx = @idx + 1
			SET @sText = LTrim(Right(@sText,DATALENGTH(@sText) - @iStrike))
		
			END
		ELSE
			BEGIN
--If you can’t find the delimiter in the text, @sText is the last value in
--@retArray.
 SET @value = @sText
				BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, @value)
				END
			--Exit the WHILE loop.
SET @bcontinue = 0
			END
		END
	END
ELSE
	BEGIN
	WHILE @bcontinue=1
		BEGIN
		--If the delimiter is an empty string, check for remaining text
		--instead of a delimiter. Insert the first character into the
		--retArray table. Trim the character from the front of the string.
--Increment the index and loop.
		IF DATALENGTH(@sText)>1
			BEGIN
			SET @value = SUBSTRING(@sText,1,1)
				BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, @value)
				END
			SET @idx = @idx+1
			SET @sText = SUBSTRING(@sText,2,DATALENGTH(@sText)-1)
			
			END
		ELSE
			BEGIN
			--One character remains.
			--Insert the character, and exit the WHILE loop.
			INSERT @retArray (idx, value)
			VALUES (@idx, @sText)
			SET @bcontinue = 0	
			END
	END

END

RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn_CLEAN_SIMPLE_TEXT]    Script Date: 05/20/2010 16:26:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Sergio
-- Create date: 24/07/09
-- Description:	Function to clean simple text fields
-- =============================================
CREATE FUNCTION [dbo].[fn_CLEAN_SIMPLE_TEXT] 
(
	-- Add the parameters for the function here
	@txt nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Res nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SET @Res = replace(cast(@txt as nvarchar(max)), CAST(0x01 AS nvarchar), ' ')
	SET @Res = replace(cast(@Res as nvarchar(max)), CAST(0x02 AS nvarchar), ' ')
	SET @Res = replace(cast(@Res as nvarchar(max)), CAST(0x07 AS nvarchar), ' ')
	SET @Res = replace(cast(@Res as nvarchar(max)), CAST(0x10 AS nvarchar), ' ')
	SET @Res = replace(cast(@Res as nvarchar(max)), CAST(0x11 AS nvarchar), ' ')
	SET @Res = replace(cast(@Res as nvarchar(max)), CAST(0x15 AS nvarchar), ' ')
	SET @Res = replace(cast(@Res as nvarchar(max)), CAST(0x17 AS nvarchar), ' ')
	SET @Res = replace(cast(@Res as nvarchar(max)), CAST(0x0C AS nvarchar), ' ')
	-- Return the result of the function
	RETURN @Res

END
GO
/****** Object:  StoredProcedure [dbo].[st_ItemTypeList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemTypeList]


As

SET NOCOUNT ON

	SELECT * FROM TB_ITEM_TYPE
	order by [TYPE_ID]
		

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemTermDictionary]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemTermDictionary]

As

SET NOCOUNT ON

SELECT TERM, SCORE FROM TB_ITEM_TERM_DICTIONARY
ORDER BY SCORE DESC

SET NOCOUNT OFF
GO
/****** Object:  Table [dbo].[TB_ATTRIBUTE]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ATTRIBUTE](
	[ATTRIBUTE_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CONTACT_ID] [int] NULL,
	[ATTRIBUTE_NAME] [nvarchar](255) NULL,
	[ATTRIBUTE_DESC] [nvarchar](2000) NULL,
	[OLD_ATTRIBUTE_ID] [nvarchar](50) NULL,
 CONSTRAINT [PK_TB_ATTRIBUTE] PRIMARY KEY CLUSTERED 
(
	[ATTRIBUTE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[st_TempTermExtractionSelectedItems]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_TempTermExtractionSelectedItems]
As

SET NOCOUNT ON

SELECT I.ITEM_ID, I.ABSTRACT FROM TB_ITEM I
INNER JOIN dbo.fn_Split_int('23514,23513,23512,23518,23515,23516,59038,59039,59037,23510,23511', ',') ITEMS
ON I.ITEM_ID = ITEMS.value
WHERE I.ABSTRACT != ''


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_TempTermExtractionItemList]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_TempTermExtractionItemList]
As

SET NOCOUNT ON

SELECT I.ITEM_ID, I.ABSTRACT FROM TB_ITEM I
INNER JOIN dbo.fn_Split_int('80272,80305,70069,69996,80281,66741,82475,72075,64944,80374,80392,80375,80308,80419,80301,80150,71125,80306,73339,80309,70539,80072,80372,69946,66073,69264,74623,66098,77740,80380,71290,77933,70250,64991,71036,80376,80307,70428,71034,67270', ',') ITEMS
ON I.ITEM_ID = ITEMS.value
WHERE I.ABSTRACT != ''

SET NOCOUNT OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fn_GetFirstImportFilterID]    Script Date: 05/20/2010 16:26:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		S
-- Create date: 
-- Description:	stupid function to provide a default value in the tb_SOURCE.IMPORT_FILTER_ID column
-- =============================================
CREATE FUNCTION [dbo].[fn_GetFirstImportFilterID] 
(
	-- Add the parameters for the function here
	 
)
RETURNS int
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result int

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = (select top 1 import_filter_ID from TB_IMPORT_FILTER order by IMPORT_FILTER_ID)

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  StoredProcedure [dbo].[st_ContactLogin]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ContactLogin]
(
	@userName  varchar(50)	
)
--note the GRACE_EXP field, how many days we add to EXPIRY_DATE defines how long is the grace period for the whole of ER4.
--during the grace period users can log on ER4 but will have read only access.
As
Select TB_CONTACT.CONTACT_ID, TB_CONTACT.contact_name, TB_CONTACT.Password, DATEADD(d, 15, EXPIRY_DATE) as GRACE_EXP, [TYPE], IS_SITE_ADMIN  /* TB_CONTACT.[Role] */
From TB_CONTACT 
Where TB_CONTACT.UserName = @userName
GO
/****** Object:  StoredProcedure [dbo].[st_ContactPasswordFromID]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ContactPasswordFromID]
(
	@ID int	
)

As
Select TB_CONTACT.Password  
From TB_CONTACT 
Where TB_CONTACT.CONTACT_ID = @ID
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeTypes]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_AttributeTypes]

As

SELECT * FROM TB_ATTRIBUTE_TYPE
ORDER BY ATTRIBUTE_TYPE_ID
GO
/****** Object:  Table [dbo].[TB_ITEM_DOCUMENT]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_DOCUMENT](
	[ITEM_DOCUMENT_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NULL,
	[DOCUMENT_TITLE] [nvarchar](255) NULL,
	[DOCUMENT_BINARY] [image] NULL,
	[DOCUMENT_EXTENSION] [nvarchar](5) NULL,
	[DOCUMENT_TEXT] [nvarchar](max) NULL,
	[OLD_EXTRACT_ATTR_IDENTITY] [bigint] NULL,
 CONSTRAINT [PK_tb_ITEM_DOCUMENT] PRIMARY KEY CLUSTERED 
(
	[ITEM_DOCUMENT_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
CREATE FULLTEXT INDEX ON [dbo].[TB_ITEM_DOCUMENT](
[DOCUMENT_TEXT] LANGUAGE [English])
KEY INDEX [PK_tb_ITEM_DOCUMENT]ON ([tb_ITEM_DOCUMENT_FTIndex], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  Table [dbo].[TB_ITEM_AUTHOR]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_AUTHOR](
	[ITEM_AUTHOR_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NOT NULL,
	[LAST] [nvarchar](50) NOT NULL,
	[FIRST] [nvarchar](50) NOT NULL,
	[SECOND] [nvarchar](50) NOT NULL,
	[ROLE] [tinyint] NOT NULL,
	[RANK] [smallint] NOT NULL,
 CONSTRAINT [PK_tb_ITEM_AUTHOR] PRIMARY KEY CLUSTERED 
(
	[ITEM_AUTHOR_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
 CONSTRAINT [IX_tb_ITEM_AUTHORS] UNIQUE NONCLUSTERED 
(
	[ITEM_ID] ASC,
	[LAST] ASC,
	[FIRST] ASC,
	[SECOND] ASC,
	[ROLE] ASC,
	[RANK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_ITEM_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_REVIEW](
	[ITEM_REVIEW_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NOT NULL,
	[REVIEW_ID] [int] NOT NULL,
	[IS_INCLUDED] [bit] NULL,
	[MASTER_ITEM_ID] [bigint] NULL,
	[IS_DELETED] [bit] NULL,
 CONSTRAINT [PK_tb_ITEM_REVIEW] PRIMARY KEY CLUSTERED 
(
	[ITEM_REVIEW_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_TB_ITEM_REVIEW] ON [dbo].[TB_ITEM_REVIEW] 
(
	[ITEM_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_IMPORT_FILTER_TYPE_RULE]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_IMPORT_FILTER_TYPE_RULE](
	[TB_IMPORT_FILTER_TYPE_RULE_ID] [int] IDENTITY(1,1) NOT NULL,
	[IMPORT_FILTER_ID] [int] NOT NULL,
	[RULE_NAME] [nvarchar](50) NOT NULL,
	[RULE_REGEX] [nvarchar](400) NULL,
	[TYPE_CODE] [tinyint] NOT NULL,
 CONSTRAINT [PK_TB_IMPORT_FILTER_TYPE_RULE] PRIMARY KEY CLUSTERED 
(
	[TB_IMPORT_FILTER_TYPE_RULE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_IMPORT_FILTER_TYPE_MAP]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_IMPORT_FILTER_TYPE_MAP](
	[IMPORT_FILTER_TYPE_MAP_ID] [int] IDENTITY(1,1) NOT NULL,
	[IMPORT_FILTER_ID] [int] NOT NULL,
	[TYPE_CODE] [tinyint] NOT NULL,
	[TYPE_REGEX] [nvarchar](400) NOT NULL,
 CONSTRAINT [PK_TB_IMPORT_FILTER_TYPE_MAP] PRIMARY KEY CLUSTERED 
(
	[IMPORT_FILTER_TYPE_MAP_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_ITEM_TERM]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_TERM](
	[ITEM_TERM_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NULL,
	[TERM] [nvarchar](255) NULL,
	[SCORE] [float] NULL,
 CONSTRAINT [PK_TB_ITEM_TERM] PRIMARY KEY CLUSTERED 
(
	[ITEM_TERM_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_META_ANALYSIS]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_META_ANALYSIS](
	[META_ANALYSIS_ID] [int] IDENTITY(1,1) NOT NULL,
	[META_ANALYSIS_TITLE] [nvarchar](255) NULL,
	[CONTACT_ID] [int] NULL,
	[REVIEW_ID] [int] NULL,
	[ATTRIBUTE_ID] [bigint] NULL,
	[SET_ID] [int] NULL,
	[ATTRIBUTE_ID_INTERVENTION] [bigint] NULL,
	[ATTRIBUTE_ID_CONTROL] [bigint] NULL,
	[ATTRIBUTE_ID_OUTCOME] [bigint] NULL,
	[META_ANALYSIS_TYPE_ID] [int] NULL,
 CONSTRAINT [PK_TB_META_ANALYSIS] PRIMARY KEY CLUSTERED 
(
	[META_ANALYSIS_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_ITEM_LINK]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_LINK](
	[ITEM_LINK_ID] [int] NOT NULL,
	[ITEM_ID_PRIMARY] [bigint] NOT NULL,
	[ITEM_ID_SECONDARY] [bigint] NOT NULL,
	[LINK_DESCRIPTION] [nvarchar](255) NULL,
 CONSTRAINT [PK_TB_ITEM_LINK] PRIMARY KEY CLUSTERED 
(
	[ITEM_LINK_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_DIAGRAM]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_DIAGRAM](
	[DIAGRAM_ID] [int] IDENTITY(1,1) NOT NULL,
	[REVIEW_ID] [int] NULL,
	[DIAGRAM_NAME] [nvarchar](255) NULL,
	[DIAGRAM_DETAIL] [nvarchar](max) NULL,
 CONSTRAINT [PK_TB_DIAGRAM] PRIMARY KEY CLUSTERED 
(
	[DIAGRAM_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_REPORT]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_REPORT](
	[REPORT_ID] [int] IDENTITY(1,1) NOT NULL,
	[REVIEW_ID] [int] NULL,
	[CONTACT_ID] [int] NULL,
	[NAME] [nvarchar](255) NULL,
 CONSTRAINT [PK_TB_REPORT] PRIMARY KEY CLUSTERED 
(
	[REPORT_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_SEARCH]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_SEARCH](
	[SEARCH_ID] [int] IDENTITY(1,1) NOT NULL,
	[REVIEW_ID] [int] NULL,
	[CONTACT_ID] [int] NULL,
	[SEARCH_TITLE] [nvarchar](4000) NULL,
	[SEARCH_NO] [int] NULL,
	[ANSWERS] [nvarchar](4000) NULL,
	[HITS_NO] [int] NULL,
	[SEARCH_DATE] [datetime] NULL,
 CONSTRAINT [PK_TB_SEARCH] PRIMARY KEY CLUSTERED 
(
	[SEARCH_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_SET]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_SET](
	[SET_ID] [int] IDENTITY(1,1) NOT NULL,
	[SET_TYPE_ID] [int] NULL,
	[SET_NAME] [nvarchar](255) NULL,
	[OLD_GUIDELINE_ID] [nvarchar](50) NULL,
 CONSTRAINT [PK_TB_SETS] PRIMARY KEY CLUSTERED 
(
	[SET_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_TERM_EXTR_T_MAP]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_TERM_EXTR_T_MAP](
	[ITEM_ID] [bigint] NOT NULL,
	[EXTR_UI] [uniqueidentifier] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_REVIEW_CONTACT]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_REVIEW_CONTACT](
	[REVIEW_CONTACT_ID] [int] IDENTITY(1,1) NOT NULL,
	[REVIEW_ID] [int] NOT NULL,
	[CONTACT_ID] [int] NOT NULL,
	[old_review_id] [nvarchar](50) NULL,
	[old_contact_id] [nvarchar](50) NULL,
 CONSTRAINT [PK_TB_REVIEW_CONTACT] PRIMARY KEY CLUSTERED 
(
	[REVIEW_CONTACT_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_WORK_ALLOCATION]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_WORK_ALLOCATION](
	[WORK_ALLOCATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[CONTACT_ID] [int] NULL,
	[REVIEW_ID] [int] NULL,
	[SET_ID] [int] NULL,
	[ATTRIBUTE_ID] [bigint] NULL,
 CONSTRAINT [PK_TB_WORK_ALLOCATION] PRIMARY KEY CLUSTERED 
(
	[WORK_ALLOCATION_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_SOURCE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_SOURCE](
	[SOURCE_ID] [int] IDENTITY(1,1) NOT NULL,
	[SOURCE_NAME] [nvarchar](255) NOT NULL,
	[REVIEW_ID] [int] NULL,
	[IS_DELETED] [bit] NOT NULL,
	[DATE_OF_SEARCH] [date] NOT NULL,
	[DATE_OF_IMPORT] [date] NOT NULL,
	[SOURCE_DATABASE] [nvarchar](200) NOT NULL,
	[SEARCH_DESCRIPTION] [nvarchar](4000) NOT NULL,
	[SEARCH_STRING] [nvarchar](1000) NOT NULL,
	[NOTES] [nvarchar](4000) NOT NULL,
	[IMPORT_FILTER_ID] [int] NULL,
 CONSTRAINT [PK_TB_SOURCE] PRIMARY KEY CLUSTERED 
(
	[SOURCE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_SEARCH_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_SEARCH_ITEM](
	[SEARCH_ITEM_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NULL,
	[SEARCH_ID] [int] NULL,
	[ITEM_RANK] [int] NULL,
 CONSTRAINT [PK_TB_SEARCH_ITEM] PRIMARY KEY CLUSTERED 
(
	[SEARCH_ITEM_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_REVIEW_SET]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_REVIEW_SET](
	[REVIEW_SET_ID] [int] IDENTITY(1,1) NOT NULL,
	[REVIEW_ID] [int] NULL,
	[SET_ID] [int] NULL,
	[ALLOW_CODING_EDITS] [bit] NULL,
	[CODING_IS_FINAL] [bit] NULL,
 CONSTRAINT [PK_TB_REVIEW_SET] PRIMARY KEY CLUSTERED 
(
	[REVIEW_SET_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_REPORT_COLUMN]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_REPORT_COLUMN](
	[REPORT_COLUMN_ID] [int] IDENTITY(1,1) NOT NULL,
	[REPORT_ID] [int] NULL,
	[REPORT_COLUMN_NAME] [nvarchar](255) NULL,
	[COLUMN_ORDER] [int] NULL,
 CONSTRAINT [PK_TB_REPORT_COLUMN] PRIMARY KEY CLUSTERED 
(
	[REPORT_COLUMN_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_ITEM_SET]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_SET](
	[ITEM_SET_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NULL,
	[SET_ID] [int] NULL,
	[IS_COMPLETED] [bit] NULL,
	[CONTACT_ID] [int] NULL,
	[IS_LOCKED] [bit] NULL,
 CONSTRAINT [PK_TB_ITEM_SET] PRIMARY KEY CLUSTERED 
(
	[ITEM_SET_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_CONTACT_REVIEW_ROLE]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_CONTACT_REVIEW_ROLE](
	[REVIEW_CONTACT_ID] [int] NOT NULL,
	[ROLE_NAME] [nvarchar](50) NOT NULL,
 CONSTRAINT [IX_TB_CONTACT_REVIEW_ROLE] UNIQUE NONCLUSTERED 
(
	[REVIEW_CONTACT_ID] ASC,
	[ROLE_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[st_ItemUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemUpdate]
(
	@ITEM_ID BIGINT
,	@TITLE NVARCHAR(4000) = NULL
,	@TYPE_ID TINYINT
,	@PARENT_TITLE NVARCHAR(4000)
,	@SHORT_TITLE NVARCHAR(70)
,	@DATE_CREATED DATETIME = NULL
,	@CREATED_BY NVARCHAR(50) = NULL
,	@DATE_EDITED DATETIME = NULL
,	@EDITED_BY NVARCHAR(50) = NULL
,	@YEAR NCHAR(4) = NULL
,	@MONTH NVARCHAR(10) = NULL
,	@STANDARD_NUMBER NVARCHAR(255) = NULL
,	@CITY NVARCHAR(100) = NULL
,	@COUNTRY NVARCHAR(100) = NULL
,	@PUBLISHER NVARCHAR(1000) = NULL
,	@INSTITUTION NVARCHAR(1000) = NULL
,	@VOLUME NVARCHAR(56) = NULL
,	@PAGES NVARCHAR(50) = NULL
,	@EDITION NVARCHAR(200) = NULL
,	@ISSUE NVARCHAR(100) = NULL
,	@IS_LOCAL BIT = NULL
,	@AVAILABILITY NVARCHAR(255) = NULL
,	@URL NVARCHAR(500) = NULL
,	@COMMENTS NVARCHAR(MAX) = NULL
,	@ABSTRACT NVARCHAR(MAX) = NULL
,	@IS_INCLUDED BIT = NULL
,	@REVIEW_ID INT
)

As

SET NOCOUNT ON

UPDATE TB_ITEM

SET TITLE = @TITLE
,	[TYPE_ID] = @TYPE_ID
,	PARENT_TITLE = @PARENT_TITLE
,	SHORT_TITLE = @SHORT_TITLE
,	DATE_CREATED = @DATE_CREATED
,	CREATED_BY = @CREATED_BY
,	DATE_EDITED = @DATE_EDITED
,	EDITED_BY = @EDITED_BY
,	[YEAR] = @YEAR
,	[MONTH] = @MONTH
,	STANDARD_NUMBER = @STANDARD_NUMBER
,	CITY = @CITY
,	COUNTRY = @COUNTRY
,	PUBLISHER = @PUBLISHER
,	INSTITUTION = @INSTITUTION
,	VOLUME = @VOLUME
,	PAGES = @PAGES
,	EDITION = @EDITION
,	ISSUE = @ISSUE
,	IS_LOCAL = @IS_LOCAL
,	AVAILABILITY = @AVAILABILITY
,	URL = @URL
,	COMMENTS = @COMMENTS
,	ABSTRACT = @ABSTRACT

WHERE ITEM_ID = @ITEM_ID

UPDATE TB_ITEM_REVIEW
SET IS_INCLUDED = @IS_INCLUDED 
WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID = @ITEM_ID

SET NOCOUNT OFF
GO
/****** Object:  Table [dbo].[TB_ATTRIBUTE_SET]    Script Date: 05/20/2010 16:26:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ATTRIBUTE_SET](
	[ATTRIBUTE_SET_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ATTRIBUTE_ID] [bigint] NULL,
	[SET_ID] [int] NULL,
	[PARENT_ATTRIBUTE_ID] [bigint] NULL,
	[ATTRIBUTE_TYPE_ID] [int] NULL,
	[ATTRIBUTE_SET_DESC] [nvarchar](max) NULL,
	[ATTRIBUTE_ORDER] [int] NULL,
 CONSTRAINT [PK_TB_ATTRIBUTE_SET] PRIMARY KEY CLUSTERED 
(
	[ATTRIBUTE_SET_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_REBUILD_AUTHORS]    Script Date: 05/20/2010 16:26:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- De-normalising Authors function ByS --

CREATE FUNCTION  [dbo].[fn_REBUILD_AUTHORS]

(

@id bigint,
@role tinyint = 0

)

RETURNS nvarchar(max)

   

    BEGIN

        declare @res nvarchar(max)

        declare @res2 nvarchar(max)

        DECLARE cr CURSOR FOR SELECT [LAST] + ' ' + [FIRST] + ' ' + [SECOND]

        FROM [Reviewer].[dbo].[tb_ITEM_AUTHOR]  where item_id = @id AND ROLE = @role

        ORDER BY [RANK]

        open cr

        set @res = ''

        FETCH NEXT FROM cr INTO @res2

         WHILE @@FETCH_STATUS = 0

        BEGIN

                Set @res = @res  + @res2

                FETCH NEXT FROM cr INTO @res2

                set @res = @res + '; '

                END

        return @res

    END;

-- END OF: De-normalising function ByS --
GO
/****** Object:  StoredProcedure [dbo].[st_ClusterGetXmlFiltered]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ClusterGetXmlFiltered]
(
	@REVIEW_ID INT,
	@ITEM_ID_LIST NVARCHAR(max)
)

As

select 1 as Tag, 
	null as PARENT, 
	tb_item.item_id as [document!1!id],
	null as [title!2],
	null as [snippet!3]
from tb_item
inner join tb_item_review on tb_item_review.item_id = tb_item.item_id
inner join DBO.fn_split_int(@ITEM_ID_LIST, ',') ItemList on ItemList.value = TB_ITEM.ITEM_ID
where tb_item_review.review_id = @REVIEW_ID

UNION ALL

SELECT 2 as Tag, 1 as Parent,
       tb_item.item_id as [Document!1!id],
       Title as [title!2],
		null as [snippet!3]
from tb_item
inner join tb_item_review on tb_item_review.item_id = tb_item.item_id
inner join DBO.fn_split_int(@ITEM_ID_LIST, ',') ItemList on ItemList.value = TB_ITEM.ITEM_ID
where tb_item_review.review_id = @REVIEW_ID

union all

SELECT 3 as Tag, 1 as Parent,
       tb_item.item_id as [Document!1!id],
       null as [title!2],
		abstract as [snippet!3]
from tb_item
inner join tb_item_review on tb_item_review.item_id = tb_item.item_id
inner join DBO.fn_split_int(@ITEM_ID_LIST, ',') ItemList on ItemList.value = TB_ITEM.ITEM_ID
where tb_item_review.review_id = @REVIEW_ID


order by [Document!1!id], [title!2], [snippet!3]
FOR XML explicit, root ('searchresult')
GO
/****** Object:  StoredProcedure [dbo].[st_ClusterGetXmlAll]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ClusterGetXmlAll]
(
	@REVIEW_ID INT
)

As

select 1 as Tag, 
	null as PARENT, 
	tb_item.item_id as [document!1!id],
	null as [title!2],
	null as [snippet!3]
from tb_item
inner join tb_item_review on tb_item_review.item_id = tb_item.item_id where tb_item_review.review_id = @REVIEW_ID
and TB_ITEM_REVIEW.IS_INCLUDED = 'true'
--and tb_item.item_id < 69000 and tb_item.ITEM_ID > 59037

UNION ALL

SELECT 2 as Tag, 1 as Parent,
       tb_item.item_id as [Document!1!id],
       Title as [title!2],
		null as [snippet!3]
from tb_item
inner join tb_item_review on tb_item_review.item_id = tb_item.item_id where tb_item_review.review_id = @REVIEW_ID
and TB_ITEM_REVIEW.IS_INCLUDED = 'true'
--and tb_item.item_id < 69000 and tb_item.ITEM_ID > 59037

union all

SELECT 3 as Tag, 1 as Parent,
       tb_item.item_id as [Document!1!id],
       null as [title!2],
		abstract as [snippet!3]
from tb_item
inner join tb_item_review on tb_item_review.item_id = tb_item.item_id where tb_item_review.review_id = @REVIEW_ID
and TB_ITEM_REVIEW.IS_INCLUDED = 'true'
--and tb_item.item_id < 69000 and tb_item.ITEM_ID > 59037

order by [Document!1!id], [title!2], [snippet!3]
FOR XML explicit, root ('searchresult')
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDocumentBinInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemDocumentBinInsert]
(
	@ITEM_ID BIGINT,
	@DOCUMENT_TITLE NVARCHAR(255),
	@DOCUMENT_EXTENSION NVARCHAR(5),
	@BIN IMAGE,
	@DOCUMENT_TEXT NVARCHAR(MAX)
)

As

SET NOCOUNT ON

	INSERT INTO TB_ITEM_DOCUMENT(ITEM_ID, DOCUMENT_TITLE, DOCUMENT_EXTENSION, DOCUMENT_BINARY, DOCUMENT_TEXT)
	VALUES(@ITEM_ID, @DOCUMENT_TITLE, @DOCUMENT_EXTENSION, @BIN, [dbo].fn_CLEAN_SIMPLE_TEXT(@DOCUMENT_TEXT))

SET NOCOUNT OFF


/****** Object:  StoredProcedure [dbo].[st_SearchDelete]    Script Date: 07/20/2009 21:32:31 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDocumentBin]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemDocumentBin]
(
	@DOC_ID int,
	@REV_ID int
)

As
SELECT DOCUMENT_BINARY, DOCUMENT_EXTENSION from tb_ITEM_DOCUMENT as I
	INNER JOIN TB_ITEM_REVIEW as R on I.ITEM_ID = R.ITEM_ID
WHERE ITEM_DOCUMENT_ID = @DOC_ID AND REVIEW_ID = @REV_ID
GO
/****** Object:  StoredProcedure [dbo].[st_ItemCreate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemCreate]
(
	@ITEM_ID BIGINT OUTPUT
,	@TITLE NVARCHAR(4000) = NULL
,	@TYPE_ID TINYINT
,	@PARENT_TITLE NVARCHAR(4000)
,	@SHORT_TITLE NVARCHAR(70)
,	@DATE_CREATED DATETIME = NULL
,	@CREATED_BY NVARCHAR(50) = NULL
,	@DATE_EDITED DATETIME = NULL
,	@EDITED_BY NVARCHAR(50) = NULL
,	@YEAR NCHAR(4) = NULL
,	@MONTH NVARCHAR(10) = NULL
,	@STANDARD_NUMBER NVARCHAR(255) = NULL
,	@CITY NVARCHAR(100) = NULL
,	@COUNTRY NVARCHAR(100) = NULL
,	@PUBLISHER NVARCHAR(1000) = NULL
,	@INSTITUTION NVARCHAR(1000) = NULL
,	@VOLUME NVARCHAR(56) = NULL
,	@PAGES NVARCHAR(50) = NULL
,	@EDITION NVARCHAR(200) = NULL
,	@ISSUE NVARCHAR(100) = NULL
,	@IS_LOCAL BIT = NULL
,	@AVAILABILITY NVARCHAR(255) = NULL
,	@URL NVARCHAR(500) = NULL
,	@COMMENTS NVARCHAR(MAX) = NULL
,	@ABSTRACT NVARCHAR(MAX) = NULL
,	@REVIEW_ID INT
,	@IS_INCLUDED BIT
)

As

SET NOCOUNT ON

INSERT INTO TB_ITEM (TITLE, [TYPE_ID], PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY,
	[YEAR],[MONTH],STANDARD_NUMBER,CITY,COUNTRY,PUBLISHER,INSTITUTION,VOLUME,PAGES,EDITION,ISSUE,IS_LOCAL,AVAILABILITY,URL,
	COMMENTS,ABSTRACT)
VALUES (@TITLE,@TYPE_ID,@PARENT_TITLE,@SHORT_TITLE,@DATE_CREATED,@CREATED_BY,@DATE_EDITED,@EDITED_BY,@YEAR,
	@MONTH,@STANDARD_NUMBER,@CITY,@COUNTRY,@PUBLISHER,@INSTITUTION,@VOLUME,@PAGES,@EDITION,@ISSUE,@IS_LOCAL,@AVAILABILITY,@URL,
	@COMMENTS,@ABSTRACT)

SET  @ITEM_ID = @@IDENTITY

INSERT INTO TB_ITEM_REVIEW (IS_DELETED, IS_INCLUDED, ITEM_ID, MASTER_ITEM_ID, REVIEW_ID)
VALUES ('FALSE', @IS_INCLUDED, @ITEM_ID, NULL, @REVIEW_ID)

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAuthorUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAuthorUpdate]
(
	@ITEM_ID BIGINT
,	@RANK smallint
,	@ROLE TINYINT = 0
,	@LAST NVARCHAR(50)
,	@FIRST NVARCHAR(50) = NULL
,	@SECOND NVARCHAR(50) = NULL

)

As

SET NOCOUNT ON

insert into TB_ITEM_AUTHOR 
(	
	ITEM_ID
,	LAST 
,	FIRST 
,	SECOND 
,	ROLE
,	RANK 
) VALUES (
	@ITEM_ID
,	@LAST
,	@FIRST
,	@SECOND
,	@ROLE
,	@RANK
)

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAuthorDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAuthorDelete]
(
	@ITEM_ID BIGINT
)

As

SET NOCOUNT ON
DELETE from TB_ITEM_AUTHOR where ITEM_ID = @ITEM_ID 


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_Generate_st_TempTermExtractionItemList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_Generate_st_TempTermExtractionItemList]
(
	@ITEMS NVARCHAR(max)
)

As


SET NOCOUNT ON

DELETE FROM TB_ITEM_TERM_DICTIONARY
DELETE FROM TB_ITEM_TERM

exec ('
ALTER procedure [dbo].st_TempTermExtractionItemList
As

SET NOCOUNT ON

SELECT I.ITEM_ID, I.ABSTRACT FROM TB_ITEM I
INNER JOIN dbo.fn_Split_int(''' + @ITEMS + ''', '','') ITEMS
ON I.ITEM_ID = ITEMS.value
WHERE I.ABSTRACT != ''''

SET NOCOUNT OFF
')

EXEC msdb.dbo.sp_start_job N'RunCreateDictionary'
WAITFOR DELAY '0:0:10' -- HORRIBLE, but works for now. (Otherwise, the table is queried before anything is entered)
GO
/****** Object:  StoredProcedure [dbo].[st_Extract_Terms]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		S
-- Create date: 
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[st_Extract_Terms] 
	-- Add the parameters for the stored procedure here
	@IDs nvarchar(max) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @ui uniqueidentifier 
	declare @cmd varchar(1000)
	declare @tres TABLE
	(
		xxx nvarchar(4000)
	)
	DECLARE @TT TABLE
	(
	  TERM nvarchar(128),
	  SCORE float
	)
	SET @ui = NEWID()
	INSERT into TB_TERM_EXTR_T_MAP (ITEM_ID, EXTR_UI)
		SELECT ITEM_ID, @ui from dbo.TB_ITEM 
		WHERE ITEM_ID in 
			(SELECT VALUE FROM dbo.fn_Split_int(@IDs, ',')) AND ABSTRACT != ''
	select @cmd = 'dtexec /DT "File System\TermLookupS"'
	select @cmd = @cmd + ' /Rep N  /SET \Package.Variables[User::UI].Properties[Value];"' + CAST(@ui as varchar(max))+ '"' 
	--this is a dirty trick to prevent the verbose output of SSIS execution to be passed on as results
	INSERT INTO @tres EXEC xp_cmdshell @cmd
	INSERT INTO @TT
		SELECT TERM, SCORE from dbo.TB_ITEM_TERM_DICTIONARY t
		WHERE t.UI = @ui
	--got the results from the SSIS package, clear them from the table used as a temporary store
	DELETE from dbo.TB_ITEM_TERM_DICTIONARY WHERE @ui = UI
	--delete also the source table
	DELETE from dbo.TB_TERM_EXTR_T_MAP WHERE @ui = EXTR_UI
	--pass on the results to the calling reader
	SELECT * FROM @TT
END
GO
/****** Object:  StoredProcedure [dbo].[st_DiagramUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_DiagramUpdate]
(
	@DIAGRAM_NAME NVARCHAR(255),
	@DIAGRAM_DETAIL NVARCHAR(MAX),
	@DIAGRAM_ID INT
)

As

SET NOCOUNT ON

	UPDATE TB_DIAGRAM
		SET DIAGRAM_NAME = @DIAGRAM_NAME,
			DIAGRAM_DETAIL = @DIAGRAM_DETAIL
		WHERE DIAGRAM_ID = @DIAGRAM_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_DiagramList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_DiagramList]
(
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

	SELECT * FROM TB_DIAGRAM
		WHERE REVIEW_ID = @REVIEW_ID
		ORDER BY DIAGRAM_NAME

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_DiagramInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_DiagramInsert]
(
	@REVIEW_ID INT,
	@DIAGRAM_NAME NVARCHAR(255),
	@DIAGRAM_DETAIL NVARCHAR(MAX),
	@NEW_DIAGRAM_ID INT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_DIAGRAM(REVIEW_ID, DIAGRAM_NAME, DIAGRAM_DETAIL)
	VALUES(@REVIEW_ID, @DIAGRAM_NAME, @DIAGRAM_DETAIL)

	SET @NEW_DIAGRAM_ID = @@IDENTITY

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_DiagramDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_DiagramDelete]
(
	@DIAGRAM_ID INT
)

As

SET NOCOUNT ON

	DELETE FROM TB_DIAGRAM
		WHERE DIAGRAM_ID = @DIAGRAM_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDuplicatesInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ItemDuplicatesInsert]
(
	@REVIEW_ID INT
)

As

INSERT INTO TB_ITEM_DUPLICATES (ITEM_ID, REVIEW_ID, _key_in, _key_out, _SCORE)
SELECT TOP (20) ITEM_ID, @REVIEW_ID, 1, 1, 1 FROM TB_ITEM_REVIEW WHERE REVIEW_ID = @REVIEW_ID
ORDER BY NEWID()
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDocumentList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemDocumentList]
(
	@ITEM_ID BIGINT
)

As

SET NOCOUNT ON

SELECT ITEM_DOCUMENT_ID, ITEM_ID, DOCUMENT_TITLE, DOCUMENT_EXTENSION, DOCUMENT_TEXT,

'DOC_BINARY' = CASE WHEN DOCUMENT_BINARY IS NULL THEN 'False' ELSE 'True' END

FROM TB_ITEM_DOCUMENT WHERE ITEM_ID = @ITEM_ID


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDocumentInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemDocumentInsert]
(
	@ITEM_ID BIGINT,
	@DOCUMENT_TITLE NVARCHAR(255),
	@DOCUMENT_EXTENSION NVARCHAR(5),
	@DOCUMENT_TEXT NVARCHAR(MAX)
)

As

SET NOCOUNT ON

	INSERT INTO TB_ITEM_DOCUMENT(ITEM_ID, DOCUMENT_TITLE, DOCUMENT_EXTENSION, DOCUMENT_TEXT)
	VALUES(@ITEM_ID, @DOCUMENT_TITLE, @DOCUMENT_EXTENSION, @DOCUMENT_TEXT)

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemIncludeExclude]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemIncludeExclude]
(
	@INCLUDE BIT,
	@ITEM_ID_LIST varchar(max),
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

	UPDATE TB_ITEM_REVIEW
	set IS_INCLUDED = @INCLUDE
	WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID IN
		(SELECT VALUE FROM dbo.fn_Split_int(@ITEM_ID_LIST, ','))

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemReviewDeleteUndelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemReviewDeleteUndelete]
(
	@DELETE BIT,
	@ITEM_ID_LIST varchar(max),
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

	UPDATE TB_ITEM_REVIEW
	set IS_DELETED = @DELETE,
	 IS_INCLUDED = CASE WHEN @DELETE = 'true' THEN 'false' ELSE 'true' END
	WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID IN
		(SELECT VALUE FROM dbo.fn_Split_int(@ITEM_ID_LIST, ','))

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDuplicatesUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemDuplicatesUpdate]
(
	@REVIEW_ID INT,
	@ITEM_ID1 BIGINT,
	@ITEM_ID2 BIGINT,
	@IS_CHECKED BIT,
	@IS_DUPLICATE1 BIT,
	@IS_DUPLICATE2 BIT,
	@ITEM_DUPLICATES_ID1 BIGINT,
	@ITEM_DUPLICATES_ID2 BIGINT
)

As

	UPDATE TB_ITEM_DUPLICATES
	SET IS_CHECKED = @IS_CHECKED, IS_DUPLICATE = @IS_DUPLICATE1
	WHERE ITEM_DUPLICATES_ID = @ITEM_DUPLICATES_ID1
	
	UPDATE TB_ITEM_DUPLICATES
	SET IS_CHECKED = @IS_CHECKED, IS_DUPLICATE = @IS_DUPLICATE2
	WHERE ITEM_DUPLICATES_ID = @ITEM_DUPLICATES_ID2
	
	IF (@IS_DUPLICATE1 = 'TRUE')
	BEGIN
		UPDATE TB_ITEM_REVIEW
		SET MASTER_ITEM_ID = @ITEM_ID2, IS_DELETED = 'TRUE' -- IE DELETED WHEN IS A DUPLICATE
		WHERE ITEM_ID = @ITEM_ID1 AND REVIEW_ID = @REVIEW_ID
	END
	ELSE
	BEGIN
		UPDATE TB_ITEM_REVIEW
		SET MASTER_ITEM_ID = 0, IS_DELETED = 'FALSE' -- IE DELETED WHEN IS A DUPLICATE
		WHERE ITEM_ID = @ITEM_ID1 AND REVIEW_ID = @REVIEW_ID
	END
	
	IF (@IS_DUPLICATE2 = 'TRUE')
	BEGIN
		UPDATE TB_ITEM_REVIEW
		SET MASTER_ITEM_ID = @ITEM_ID1, IS_DELETED = 'TRUE' -- IE DELETED WHEN IS A DUPLICATE
		WHERE ITEM_ID = @ITEM_ID2 AND REVIEW_ID = @REVIEW_ID
	END
	ELSE
	BEGIN
		UPDATE TB_ITEM_REVIEW
		SET MASTER_ITEM_ID = 0, IS_DELETED = 'FALSE' -- IE DELETED WHEN IS A DUPLICATE
		WHERE ITEM_ID = @ITEM_ID2 AND REVIEW_ID = @REVIEW_ID
	END
GO
/****** Object:  StoredProcedure [dbo].[st_SearchUpdate]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_SearchUpdate]
(
	@SEARCH_ID INT,
	@SEARCH_TITLE NVARCHAR(4000)
)

As

SET NOCOUNT ON

	UPDATE TB_SEARCH
		SET SEARCH_TITLE = @SEARCH_TITLE
		WHERE SEARCH_ID = @SEARCH_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_SearchList]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_SearchList]
(
	@REVIEW_ID INT,
	@CONTACT_ID INT
)

As

SET NOCOUNT ON

	SELECT * FROM TB_SEARCH
		WHERE REVIEW_ID = @REVIEW_ID
		--AND CONTACT_ID = @CONTACT_ID
		ORDER BY SEARCH_NO

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_SearchInsert]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_SearchInsert]
(
	@REVIEW_ID INT,
	@CONTACT_ID INT,
	@SEARCH_TITLE NVARCHAR(4000),
	@ANSWERS varchar(4000) = null,
	@SEARCH_DESC varchar(4000) = null,
	@NEW_SEARCH_ID INT OUTPUT
)

As

SET NOCOUNT ON

	DECLARE @SEARCH_NO INT
	
	SELECT @SEARCH_NO = ISNULL(MAX(SEARCH_NO), 0) + 1 FROM tb_SEARCH WHERE REVIEW_ID = @REVIEW_ID

	INSERT INTO tb_SEARCH
	(	REVIEW_ID
	,	CONTACT_ID
	,	SEARCH_TITLE
	,	SEARCH_NO
	,	ANSWERS
	,	HITS_NO
	,	SEARCH_DATE
	)	
	VALUES
	(
		@REVIEW_ID
	,	@CONTACT_ID
	,	@SEARCH_TITLE
	,	@SEARCH_NO
	,	@ANSWERS
	,	0
	,	GetDate()
	)
	-- Get the identity and return it
	SET @NEW_SEARCH_ID = @@identity

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_MetaAnalysisDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_MetaAnalysisDelete]
(
	@META_ANALYSIS_ID INT
)

As

SET NOCOUNT ON
	
	DELETE FROM TB_META_ANALYSIS
	WHERE META_ANALYSIS_ID = @META_ANALYSIS_ID
	

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_MetaAnalysis]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_MetaAnalysis]
(
	@META_ANALYSIS_ID INT
)

As

SET NOCOUNT ON
	
	SELECT META_ANALYSIS_ID, META_ANALYSIS_TITLE, CONTACT_ID, REVIEW_ID,
	ATTRIBUTE_ID, SET_ID, ATTRIBUTE_ID_INTERVENTION, ATTRIBUTE_ID_CONTROL,
	ATTRIBUTE_ID_OUTCOME, META_ANALYSIS_TYPE_ID
	
	FROM TB_META_ANALYSIS
	
	WHERE META_ANALYSIS_ID = @META_ANALYSIS_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewContactList]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewContactList]
(
	@REVIEW_ID INT
)

As

/* ADD TO THIS THE RETRIEVAL OF ROLES */

SELECT TB_REVIEW_CONTACT.CONTACT_ID, REVIEW_ID, CONTACT_NAME

FROM TB_REVIEW_CONTACT

INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_REVIEW_CONTACT.CONTACT_ID

WHERE REVIEW_ID = @REVIEW_ID
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewContact]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewContact]
(
	@CONTACT_ID INT
)

As

SELECT REVIEW_CONTACT_ID, TB_REVIEW_CONTACT.REVIEW_ID, CONTACT_ID, REVIEW_NAME
FROM TB_REVIEW_CONTACT
JOIN TB_REVIEW ON TB_REVIEW_CONTACT.REVIEW_ID = TB_REVIEW.REVIEW_ID
WHERE CONTACT_ID = @CONTACT_ID
ORDER BY REVIEW_NAME
GO
/****** Object:  StoredProcedure [dbo].[st_ReportUpdate]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReportUpdate]
(
	@REPORT_NAME NVARCHAR(255),
	@REPORT_ID INT OUTPUT
)

As

SET NOCOUNT ON

	UPDATE TB_REPORT SET NAME = @REPORT_NAME
	WHERE REPORT_ID = @REPORT_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportList]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReportList]
(
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

	SELECT REPORT_ID, REVIEW_ID, NAME, TB_REPORT.CONTACT_ID, CONTACT_NAME FROM TB_REPORT
		INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_REPORT.CONTACT_ID
		WHERE REVIEW_ID = @REVIEW_ID
		ORDER BY CONTACT_ID, NAME

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportInsert]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReportInsert]
(
	@REPORT_NAME NVARCHAR(255),
	@REVIEW_ID INT,
	@CONTACT_ID INT,
	@NEW_REPORT_ID INT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_REPORT(NAME, REVIEW_ID, CONTACT_ID)
	VALUES (@REPORT_NAME, @REVIEW_ID, @CONTACT_ID)
	
	SET @NEW_REPORT_ID = @@IDENTITY

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetUpdate]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewSetUpdate]
(
	@REVIEW_SET_ID INT,
	@SET_ID INT,
	@ALLOW_CODING_EDITS BIT,
	@CODING_IS_FINAL BIT,
	@SET_NAME NVARCHAR(255),
	
	@ITEM_SET_ID BIGINT,
	@IS_COMPLETED BIT,
	@IS_LOCKED BIT
)

As

SET NOCOUNT ON

	UPDATE TB_SET SET SET_NAME = @SET_NAME WHERE SET_ID = @SET_ID
	UPDATE TB_REVIEW_SET SET ALLOW_CODING_EDITS = @ALLOW_CODING_EDITS,
		CODING_IS_FINAL = @CODING_IS_FINAL
	WHERE REVIEW_SET_ID = @REVIEW_SET_ID
	
	IF (@ITEM_SET_ID > 0)
	BEGIN
		UPDATE TB_ITEM_SET
		SET IS_COMPLETED = @IS_COMPLETED, IS_LOCKED = @IS_LOCKED
		WHERE ITEM_SET_ID = @ITEM_SET_ID
	END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSets]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewSets]
(
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

	SELECT REVIEW_SET_ID, REVIEW_ID, RS.SET_ID, ALLOW_CODING_EDITS, S.SET_TYPE_ID, SET_NAME, SET_TYPE, CODING_IS_FINAL
	FROM TB_REVIEW_SET RS
	INNER JOIN TB_SET S ON S.SET_ID = RS.SET_ID
	INNER JOIN TB_SET_TYPE ON TB_SET_TYPE.SET_TYPE_ID = S.SET_TYPE_ID

	WHERE RS.REVIEW_ID = @REVIEW_ID


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetOutcomes]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewSetOutcomes]
(
	@ITEM_SET_ID INT = NULL,
	@SET_ID INT = NULL
)

As

SET NOCOUNT ON
IF (@SET_ID = 0)
BEGIN
	SELECT DISTINCT TB_ATTRIBUTE.ATTRIBUTE_ID, ATTRIBUTE_NAME, ATTRIBUTE_ORDER
	FROM TB_ITEM_SET
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
	WHERE TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = 4 AND TB_ITEM_SET.ITEM_SET_ID = @ITEM_SET_ID
	ORDER BY TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER
END
ELSE
BEGIN
	SELECT DISTINCT TB_ATTRIBUTE.ATTRIBUTE_ID, ATTRIBUTE_NAME, ATTRIBUTE_ORDER
	FROM TB_ITEM_SET
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
	WHERE TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = 4 AND TB_ITEM_SET.SET_ID = @SET_ID
	ORDER BY TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetInterventions]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewSetInterventions]
(
	@ITEM_SET_ID INT = NULL,
	@SET_ID INT = NULL
)

As

SET NOCOUNT ON
IF (@SET_ID = 0)
BEGIN
	SELECT DISTINCT TB_ATTRIBUTE.ATTRIBUTE_ID, ATTRIBUTE_NAME, ATTRIBUTE_ORDER
	FROM TB_ITEM_SET
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
	WHERE TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = 5 AND TB_ITEM_SET.ITEM_SET_ID = @ITEM_SET_ID
	ORDER BY TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER
END
ELSE
BEGIN
	SELECT DISTINCT TB_ATTRIBUTE.ATTRIBUTE_ID, ATTRIBUTE_NAME, ATTRIBUTE_ORDER
	FROM TB_ITEM_SET
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
	WHERE TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = 5 AND TB_ITEM_SET.SET_ID = @SET_ID
	ORDER BY TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetInsert]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewSetInsert]
(
	@REVIEW_ID INT,
	@SET_TYPE_ID INT = 3,
	@ALLOW_CODING_EDITS BIT = false,
	@SET_NAME NVARCHAR(255),
	@CODING_IS_FINAL BIT = true,

	@NEW_REVIEW_SET_ID INT OUTPUT,
	@NEW_SET_ID INT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_SET(SET_TYPE_ID, SET_NAME)
		VALUES(@SET_TYPE_ID, @SET_NAME)

	SET @NEW_SET_ID = @@IDENTITY

	INSERT INTO TB_REVIEW_SET(REVIEW_ID, SET_ID, ALLOW_CODING_EDITS, CODING_IS_FINAL)
		VALUES(@REVIEW_ID, @NEW_SET_ID, @ALLOW_CODING_EDITS, @CODING_IS_FINAL)

	SET @NEW_REVIEW_SET_ID = @@IDENTITY


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetDelete]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewSetDelete]
(
	@REVIEW_SET_ID INT,
	@SET_ID INT
)

As

SET NOCOUNT ON


-- HACK FOR CAMPBELL!!

DELETE FROM TB_REVIEW_SET WHERE REVIEW_SET_ID = @REVIEW_SET_ID


/*

	SELECT TB_ITEM_SET.SET_ID FROM TB_ITEM_SET 
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_SET.ITEM_ID
		INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID
	WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_REVIEW_SET.REVIEW_SET_ID = @REVIEW_SET_ID

	IF (@@ROWCOUNT = 0)
	BEGIN

		DELETE FROM TB_REVIEW_SET WHERE REVIEW_SET_ID = @REVIEW_SET_ID

		SELECT SET_ID FROM TB_REVIEW_SET WHERE SET_ID = @SET_ID

		IF (@@ROWCOUNT = 0)
		BEGIN
			DELETE FROM TB_SET WHERE SET_ID = @SET_ID
		END

	END

*/

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetControls]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewSetControls]
(
	@ITEM_SET_ID INT = NULL,
	@SET_ID INT = NULL
)

As

SET NOCOUNT ON

IF (@SET_ID = 0)
BEGIN
	SELECT DISTINCT TB_ATTRIBUTE.ATTRIBUTE_ID, ATTRIBUTE_NAME, ATTRIBUTE_ORDER
	FROM TB_ITEM_SET
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
	WHERE TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = 6 AND TB_ITEM_SET.ITEM_SET_ID = @ITEM_SET_ID
	ORDER BY TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER
END
ELSE
BEGIN
	SELECT DISTINCT TB_ATTRIBUTE.ATTRIBUTE_ID, ATTRIBUTE_NAME, ATTRIBUTE_ORDER
	FROM TB_ITEM_SET
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
	WHERE TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = 6 AND TB_ITEM_SET.SET_ID = @SET_ID
	ORDER BY TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewInsert]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ReviewInsert]
(
	@REVIEW_NAME NVARCHAR(255),
	@CONTACT_ID INT,
	@NEW_REVIEW_ID INT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_REVIEW(REVIEW_NAME, FUNDER_ID, DATE_CREATED)
	VALUES (@REVIEW_NAME, @CONTACT_ID, CURRENT_TIMESTAMP)

	SET @NEW_REVIEW_ID = @@IDENTITY
	
	DECLARE @NEW_CONTACT_REVIEW_ID INT
	
	INSERT INTO TB_REVIEW_CONTACT(CONTACT_ID, REVIEW_ID)
	VALUES (@CONTACT_ID, @NEW_REVIEW_ID)
	
	SET @NEW_CONTACT_REVIEW_ID = @@IDENTITY
	
	INSERT INTO TB_CONTACT_REVIEW_ROLE(REVIEW_CONTACT_ID, ROLE_NAME)
	VALUES(@NEW_CONTACT_REVIEW_ID, 'AdminUser')
	
	
	
	

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportColumnList]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReportColumnList]
(
	@REPORT_ID INT
)

As

SET NOCOUNT ON

	SELECT * FROM TB_REPORT_COLUMN
		WHERE REPORT_ID = @REPORT_ID
		ORDER BY COLUMN_ORDER

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportColumnInsert]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ReportColumnInsert]
(
	@REPORT_COLUMN_NAME NVARCHAR(255),
	@REPORT_ID INT,
	@COLUMN_ORDER INT,
	@NEW_REPORT_COLUMN_ID INT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_REPORT_COLUMN(REPORT_COLUMN_NAME, COLUMN_ORDER, REPORT_ID)
	VALUES(@REPORT_COLUMN_NAME, @COLUMN_ORDER, @REPORT_ID)
	
	SET @NEW_REPORT_COLUMN_ID = @@IDENTITY

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemSets]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemSets]
(
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

	SELECT REVIEW_SET_ID, REVIEW_ID, RS.SET_ID, ALLOW_CODING_EDITS, S.SET_TYPE_ID, SET_NAME, SET_TYPE, CODING_IS_FINAL
	FROM TB_REVIEW_SET RS
	INNER JOIN TB_SET S ON S.SET_ID = RS.SET_ID
	INNER JOIN TB_SET_TYPE ON TB_SET_TYPE.SET_TYPE_ID = S.SET_TYPE_ID

	WHERE RS.REVIEW_ID = @REVIEW_ID


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemSetDataListAll]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemSetDataListAll]
(
	@REVIEW_ID INT,
	--@CONTACT_ID INT,
	@ITEM_ID BIGINT
)

As

SET NOCOUNT ON

	/* Collects all the item sets in a review
	 */

	SELECT ITEM_SET_ID, ITEM_ID, TB_ITEM_SET.SET_ID, IS_COMPLETED, TB_ITEM_SET.CONTACT_ID, IS_LOCKED,
		CODING_IS_FINAL, SET_NAME, CONTACT_NAME
	FROM TB_ITEM_SET
		INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID
		INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_ITEM_SET.CONTACT_ID
		INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ITEM_SET.SET_ID
	WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID = @ITEM_ID
	
	ORDER BY SET_NAME

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemSetDataList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemSetDataList]
(
	@REVIEW_ID INT,
	@CONTACT_ID INT,
	@ITEM_ID BIGINT
)

As

SET NOCOUNT ON

	/* Collects just the item sets that are needed by a given reviewer - not all of them for every item
	   Critically, this query NOTs out the set_ids already identified.
	 */

	-- FIRST, GET THE ONES WHICH ARE NOT MULTI-USER

	SELECT ITEM_SET_ID, ITEM_ID, TB_ITEM_SET.SET_ID, IS_COMPLETED, TB_ITEM_SET.CONTACT_ID, IS_LOCKED,
		CODING_IS_FINAL, SET_NAME, CONTACT_NAME
	FROM TB_ITEM_SET
		INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID
		INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_ITEM_SET.CONTACT_ID
		INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ITEM_SET.SET_ID
	WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID = @ITEM_ID
		AND TB_REVIEW_SET.CODING_IS_FINAL = 'true'
		
	UNION
	
	-- NEXT, GET THE COMPLETED MULTI-USER ONES (EFFECTIVELY THE SAME AS SINGLE USER ONCE COMPLETED
	
	SELECT ITEM_SET_ID, ITEM_ID, TB_ITEM_SET.SET_ID, IS_COMPLETED, TB_ITEM_SET.CONTACT_ID, IS_LOCKED,
		CODING_IS_FINAL, SET_NAME, CONTACT_NAME
	FROM TB_ITEM_SET
		INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID
		INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_ITEM_SET.CONTACT_ID
		INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ITEM_SET.SET_ID
	WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID = @ITEM_ID
		AND TB_REVIEW_SET.CODING_IS_FINAL = 'false' and tb_ITEM_SET.IS_COMPLETED = 'true'
		AND NOT TB_ITEM_SET.SET_ID IN
		(
		SELECT TB_ITEM_SET.SET_ID FROM TB_ITEM_SET
			INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID
			WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID = @ITEM_ID
			AND TB_REVIEW_SET.CODING_IS_FINAL = 'true'
		)
	
	UNION
	
	-- FINALLY GET THE REVIEWER SPECIFIC MULTI-USER ONES
	
	SELECT ITEM_SET_ID, ITEM_ID, TB_ITEM_SET.SET_ID, IS_COMPLETED, TB_ITEM_SET.CONTACT_ID, IS_LOCKED,
		CODING_IS_FINAL, SET_NAME, CONTACT_NAME
	FROM TB_ITEM_SET
		INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID
		INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_ITEM_SET.CONTACT_ID
		INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ITEM_SET.SET_ID
	WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID = @ITEM_ID
		AND TB_REVIEW_SET.CODING_IS_FINAL = 'false' and tb_ITEM_SET.IS_COMPLETED = 'false' AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
		AND NOT TB_ITEM_SET.SET_ID IN
		(
		SELECT TB_ITEM_SET.SET_ID FROM TB_ITEM_SET
			INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID
			WHERE REVIEW_ID = @REVIEW_ID AND ITEM_ID = @ITEM_ID
			AND ((TB_REVIEW_SET.CODING_IS_FINAL = 'true')
			OR (TB_REVIEW_SET.CODING_IS_FINAL = 'false' and tb_ITEM_SET.IS_COMPLETED = 'true'))
		)
		
	
	

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemSearchList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemSearchList] (
	@REVIEW_ID INT,
	@SEARCH_ID INT
)

As

SET NOCOUNT ON

SELECT I.ITEM_ID, I.[TYPE_ID], I.OLD_ITEM_ID, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
	TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY,
	[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
	AVAILABILITY, URL, ABSTRACT, COMMENTS, [TYPE_NAME], IS_DELETED, IS_INCLUDED, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 1) as PARENTAUTHORS

FROM TB_ITEM I
INNER JOIN TB_ITEM_TYPE ON TB_ITEM_TYPE.[TYPE_ID] = I.[TYPE_ID] INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND 
	TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
INNER JOIN TB_SEARCH_ITEM ON TB_SEARCH_ITEM.ITEM_ID = TB_ITEM_REVIEW.ITEM_ID
	AND TB_SEARCH_ITEM.SEARCH_ID = @SEARCH_ID

ORDER BY ITEM_RANK DESC

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewWorkAllocationInsert]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewWorkAllocationInsert]
(
	@REVIEW_ID INT,
	@CONTACT_ID INT,
	@SET_ID INT,
	@ATTRIBUTE_ID BIGINT,
	
	@NEW_WORK_ALLOCATION_ID INT OUTPUT
)

As

/* ADD TO THIS THE RETRIEVAL OF ROLES */

INSERT INTO TB_WORK_ALLOCATION (CONTACT_ID, SET_ID, REVIEW_ID, ATTRIBUTE_ID)
VALUES (@CONTACT_ID, @SET_ID, @REVIEW_ID, @ATTRIBUTE_ID)

SET @NEW_WORK_ALLOCATION_ID = @@IDENTITY
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewWorkAllocationDelete]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewWorkAllocationDelete]
(
	@WORK_ALLOCATION_ID INT
)

As

/* ADD TO THIS THE RETRIEVAL OF ROLES */

DELETE FROM TB_WORK_ALLOCATION
WHERE WORK_ALLOCATION_ID = @WORK_ALLOCATION_ID
GO
/****** Object:  StoredProcedure [dbo].[st_SearchDelete]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_SearchDelete]
(
	@SEARCH_ID INT
)

As

SET NOCOUNT ON

	DELETE FROM TB_SEARCH_ITEM
		WHERE SEARCH_ID = @SEARCH_ID

	DELETE FROM TB_SEARCH
		WHERE SEARCH_ID = @SEARCH_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_SearchCombine]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[st_SearchCombine]
(
	@SEARCH_ID int = null output
,	@CONTACT_ID nvarchar(50) = null
,	@REVIEW_ID INT
,	@SEARCH_TITLE varchar(4000) = null
,	@SEARCHES varchar(MAX) = null
,	@COMBINE_TYPE nvarchar(10)
,	@INCLUDED BIT = NULL
)
AS

DECLARE @SEARCH_COMMAND nvarchar(MAX)

EXECUTE st_SearchInsert @REVIEW_ID, @CONTACT_ID, @SEARCH_TITLE, @SEARCHES, '', @NEW_SEARCH_ID = @SEARCH_ID OUTPUT

IF (@COMBINE_TYPE = 'OR')
BEGIN
	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID)
		SELECT DISTINCT  ITEM_ID, @SEARCH_ID FROM dbo.fn_Split_int
		(@SEARCHES, ',') JOIN tb_SEARCH_ITEM ON value = SEARCH_ID
END
ELSE IF (@COMBINE_TYPE = 'NOT')
BEGIN
	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID)
		SELECT  ITEM_ID, @SEARCH_ID FROM TB_ITEM_REVIEW WHERE REVIEW_ID = @REVIEW_ID 
			AND IS_DELETED != 'true' AND IS_INCLUDED = @INCLUDED
		EXCEPT
		SELECT DISTINCT ITEM_ID, @SEARCH_ID FROM		
		 dbo.fn_Split_int
		(@SEARCHES, ',') JOIN tb_SEARCH_ITEM ON value = SEARCH_ID
END
ELSE IF (@COMBINE_TYPE = 'AND')
BEGIN
	DECLARE @NUM_RECORDS INT
	DECLARE @DUMMY INT
	SELECT @NUM_RECORDS = COUNT(VALUE) FROM dbo.fn_Split_int (@SEARCHES, ',')

	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID)
		SELECT DISTINCT  ITEM_ID, @SEARCH_ID FROM
		dbo.fn_Split_int (@SEARCHES, ',') JOIN tb_SEARCH_ITEM ON value = SEARCH_ID
		GROUP BY ITEM_ID
		HAVING COUNT(ITEM_ID) = @NUM_RECORDS
END

UPDATE tb_SEARCH SET HITS_NO = @@ROWCOUNT WHERE SEARCH_ID = @SEARCH_ID
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDuplicatesList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemDuplicatesList]
(
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

SELECT I.ITEM_ID ITEM_ID1, I.[TYPE_ID] TYPE_ID1, I.OLD_ITEM_ID OLD_ITEM_ID1, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS1,
	I.TITLE TITLE1, I.PARENT_TITLE PARENT_TITLE1, I.SHORT_TITLE SHORT_TITLE1, I.DATE_CREATED DATE_CREATED1, I.CREATED_BY CREATED_BY1, I.DATE_EDITED DATE_EDITED1, I.EDITED_BY EDITED_BY1,
	I.[YEAR] YEAR1, I.[MONTH] MONTH1, I.STANDARD_NUMBER STANDARD_NUMBER1, I.CITY CITY1, I.COUNTRY COUNTRY1, I.PUBLISHER PUBLISHER1, I.INSTITUTION INSTITUTION1, I.VOLUME VOLUME1, I.PAGES PAGES1,
	I.EDITION EDITION1, I.ISSUE ISSUE1, I.URL URL1, I.ABSTRACT ABSTRACT1, I.COMMENTS COMMENTS1, IT1.[TYPE_NAME] TYPE_NAME1,
	[dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 1) as PARENT_AUTHORS1, ID1.[IS_CHECKED] IS_CHECKED1, ID1.[IS_DUPLICATE] IS_DUPLICATE1, i.OLD_ITEM_ID OLD_ITEM_ID1,
	(SELECT COUNT (SET_ID) FROM TB_ITEM_SET WHERE TB_ITEM_SET.ITEM_ID = I.ITEM_ID) CODED_COUNT1,
	
	I2.ITEM_ID ITEM_ID2, I2.[TYPE_ID] TYPE_ID2, I2.OLD_ITEM_ID OLD_ITEM_ID2, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS2,
	I2.TITLE TITLE2, I2.PARENT_TITLE PARENT_TITLE2, I2.SHORT_TITLE SHORT_TITLE2, I2.DATE_CREATED DATE_CREATED2, I2.CREATED_BY CREATED_BY2, I2.DATE_EDITED DATE_EDITED2, I2.EDITED_BY EDITED_BY2,
	I2.[YEAR] YEAR2, I2.[MONTH] MONTH2, I2.STANDARD_NUMBER STANDARD_NUMBER2, I2.CITY CITY2, I2.COUNTRY COUNTRY2, I2.PUBLISHER PUBLISHER2, I2.INSTITUTION INSTITUTION2, I2.VOLUME VOLUME2, I2.PAGES PAGES2,
	I.EDITION EDITION2, I.ISSUE ISSUE2, I.URL URL2, I.ABSTRACT ABSTRACT2, I.COMMENTS COMMENTS2, IT1.[TYPE_NAME] TYPE_NAME2,
	[dbo].fn_REBUILD_AUTHORS(I2.ITEM_ID, 1) as PARENT_AUTHORS2, ID2.[IS_CHECKED] IS_CHECKED2, ID2.[IS_DUPLICATE] IS_DUPLICATE2, i2.OLD_ITEM_ID OLD_ITEM_ID2,
	(SELECT COUNT (SET_ID) FROM TB_ITEM_SET WHERE TB_ITEM_SET.ITEM_ID = I2.ITEM_ID) CODED_COUNT2,
	
	id1.ITEM_DUPLICATES_ID ITEM_DUPLICATES_ID1, ID2.ITEM_DUPLICATES_ID ITEM_DUPLICATES_ID2

FROM TB_ITEM_DUPLICATES ID1

INNER JOIN TB_ITEM_DUPLICATES ID2 ON ID2._key_out = ID1._key_in

INNER JOIN TB_ITEM I ON I.ITEM_ID = ID1.ITEM_ID
INNER JOIN TB_ITEM I2 ON I2.ITEM_ID = ID2.ITEM_ID

INNER JOIN TB_ITEM_TYPE IT1 ON IT1.[TYPE_ID] = I.[TYPE_ID]
INNER JOIN TB_ITEM_TYPE IT2 ON IT2.[TYPE_ID] = I2.[TYPE_ID]

WHERE ID1.REVIEW_ID = @REVIEW_ID AND ID1.ITEM_ID <> ID2.ITEM_ID

ORDER BY I.TITLE

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_Item]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_Item]
(
	@REVIEW_ID INT,
	@ITEM_ID BIGINT
)

As

SET NOCOUNT ON

	SELECT I.ITEM_ID, I.[TYPE_ID], [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
		TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY
		[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
		AVAILABILITY, URL, ABSTRACT, COMMENTS, [TYPE_NAME], OLD_ITEM_ID, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 1) as PARENTAUTHORS
	FROM TB_ITEM I

	-- Limit to a given review
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
	INNER JOIN TB_ITEM_TYPE ON TB_ITEM_TYPE.[TYPE_ID] = I.[TYPE_ID]

	WHERE I.ITEM_ID = @ITEM_ID


SET NOCOUNT OFF

/****** Object:  StoredProcedure [dbo].[st_ItemList]    Script Date: 09/17/2009 16:45:35 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSet]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_AttributeSet]
(
	@SET_ID INT,
	@PARENT_ATTRIBUTE_ID INT = 0
)

As

SELECT TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID, TB_ATTRIBUTE_SET.SET_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_ID, TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID,
	TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_SET_DESC, TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER,
	ATTRIBUTE_TYPE, ATTRIBUTE_NAME, ATTRIBUTE_SET_DESC, CONTACT_ID

FROM TB_ATTRIBUTE_SET
INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ATTRIBUTE_SET.SET_ID
INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID

WHERE TB_ATTRIBUTE_SET.SET_ID = @SET_ID
	AND TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID = @PARENT_ATTRIBUTE_ID

ORDER BY PARENT_ATTRIBUTE_ID, ATTRIBUTE_ORDER
GO
/****** Object:  StoredProcedure [dbo].[st_ContactLoginReview]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ContactLoginReview]
(
	@userId int,
	@reviewId int,
	@GUI uniqueidentifier OUTPUT
)

As
SELECT TB_REVIEW.REVIEW_ID, ROLE_NAME as [ROLE], TB_REVIEW.EXPIRY_DATE as REVIEW_EXP, TB_CONTACT.EXPIRY_DATE as CONTACT_EXP
FROM TB_REVIEW_CONTACT
	INNER JOIN TB_REVIEW on TB_REVIEW_CONTACT.REVIEW_ID = TB_REVIEW.REVIEW_ID
	INNER JOIN TB_CONTACT on TB_REVIEW_CONTACT.CONTACT_ID = TB_CONTACT.CONTACT_ID
	INNER JOIN TB_CONTACT_REVIEW_ROLE 
	on TB_CONTACT_REVIEW_ROLE.REVIEW_CONTACT_ID = TB_REVIEW_CONTACT.REVIEW_CONTACT_ID
WHERE TB_REVIEW.REVIEW_ID = @reviewId AND TB_CONTACT.CONTACT_ID = @userId

IF @@ROWCOUNT >= 1 
	BEGIN
	DECLARE	@return_value int,
			@GUID uniqueidentifier
			
	EXEC	@return_value = [ReviewerAdmin].[dbo].[st_LogonTicket_Insert]
			@Contact_ID = @userId,
			@Review_ID = @reviewId,
			@GUID = @GUI OUTPUT
	SELECT	@GUI as N'@GUID'
	END
GO
/****** Object:  StoredProcedure [dbo].[st_Contact_Review_Role_Insert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Sergio>
-- Create date: <03/03/10>
-- Description:	<Add role to a user on a given review, user must already belong to a review, returns 1 on success>
-- =============================================
CREATE PROCEDURE [dbo].[st_Contact_Review_Role_Insert] 
	-- Add the parameters for the stored procedure here
	@Review_ID int = 0, 
	@Contact_ID int = 0,
	@Role nvarchar(50) = '',
	@Result bit OUTPUT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET @Result = 0
	DECLARE @R_C_ID int
    -- First, check if user has access to review
    set @R_C_ID = (SELECT REVIEW_CONTACT_ID
	FROM TB_REVIEW_CONTACT
	WHERE REVIEW_ID = @Review_ID AND CONTACT_ID = @Contact_ID)
	IF @@ROWCOUNT > 0 --user does have access
	BEGIN
		--second check if user already has selected role
		SELECT REVIEW_ID, ROLE_NAME as [ROLE]
		FROM TB_REVIEW_CONTACT
			INNER JOIN TB_CONTACT_REVIEW_ROLE 
			on TB_CONTACT_REVIEW_ROLE.REVIEW_CONTACT_ID = TB_REVIEW_CONTACT.REVIEW_CONTACT_ID
		WHERE REVIEW_ID = @Review_ID AND CONTACT_ID = @Contact_ID and TB_CONTACT_REVIEW_ROLE.ROLE_NAME = @Role
		IF @@ROWCOUNT < 1 -- user does not have selected role in the review
		BEGIN --try to add role
			INSERT INTO TB_CONTACT_REVIEW_ROLE(REVIEW_CONTACT_ID,ROLE_NAME)
			VALUES (@R_C_ID, @Role)
			IF @@ROWCOUNT = 1 --insert was successful mark it in the return value
			BEGIN
				SET @Result = 1
			END
		END
	END
		
	
END
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_AttributeSetUpdate]
(
	@ATTRIBUTE_SET_ID BIGINT,
	@SET_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@PARENT_ATTRIBUTE_ID BIGINT,
	@ATTRIBUTE_TYPE_ID INT,
	@ATTRIBUTE_SET_DESC NVARCHAR(MAX),
	@ATTRIBUTE_ORDER INT,
	@ATTRIBUTE_NAME NVARCHAR(255),
	@ATTRIBUTE_DESC NVARCHAR(2000),
	@CONTACT_ID INT -- not used yet - maybe for authorisation
)

As

SET NOCOUNT ON

	UPDATE TB_ATTRIBUTE
		SET ATTRIBUTE_NAME = @ATTRIBUTE_NAME, ATTRIBUTE_DESC = @ATTRIBUTE_DESC
		WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID

	UPDATE TB_ATTRIBUTE_SET
		SET SET_ID = @SET_ID, PARENT_ATTRIBUTE_ID = @PARENT_ATTRIBUTE_ID, ATTRIBUTE_TYPE_ID = @ATTRIBUTE_TYPE_ID,
			ATTRIBUTE_SET_DESC = @ATTRIBUTE_SET_DESC, ATTRIBUTE_ORDER = @ATTRIBUTE_ORDER
		WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetMove]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_AttributeSetMove]
(
	@ATTRIBUTE_SET_ID BIGINT,
	@ATTRIBUTE_ORDER INT,
	@FROM BIGINT,
	@TO BIGINT
)

As

SET NOCOUNT ON

	DECLARE @OLD_CODE_ORDER bigint

	SELECT @OLD_CODE_ORDER = ATTRIBUTE_ORDER
		FROM TB_ATTRIBUTE_SET
		WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

	-- REMOVE FROM CURRENT SET
	UPDATE TB_ATTRIBUTE_SET
		SET ATTRIBUTE_ORDER = ATTRIBUTE_ORDER -1
		WHERE PARENT_ATTRIBUTE_ID = @FROM
		AND ATTRIBUTE_ORDER > @OLD_CODE_ORDER

	-- MAKE SPACE IN THE NEW ONE
	UPDATE TB_ATTRIBUTE_SET
		SET ATTRIBUTE_ORDER = ATTRIBUTE_ORDER + 1
		WHERE PARENT_ATTRIBUTE_ID = @TO
		AND ATTRIBUTE_ORDER >= @ATTRIBUTE_ORDER

	-- INSERT THE ATTRIBUTE IN ITS NEW PLACE
	UPDATE TB_ATTRIBUTE_SET
		SET ATTRIBUTE_ORDER = @ATTRIBUTE_ORDER,
			PARENT_ATTRIBUTE_ID = @TO
		WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_AttributeSetInsert]
(
	@SET_ID INT,
	@PARENT_ATTRIBUTE_ID BIGINT = 0,
	@ATTRIBUTE_TYPE_ID INT = 1,
	@ATTRIBUTE_SET_DESC NVARCHAR(MAX) = null,
	@ATTRIBUTE_ORDER INT = 1,
	@ATTRIBUTE_NAME NVARCHAR(255),
	@ATTRIBUTE_DESC NVARCHAR(2000) = null,
	@CONTACT_ID INT,

	@NEW_ATTRIBUTE_SET_ID BIGINT OUTPUT,
	@NEW_ATTRIBUTE_ID BIGINT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_ATTRIBUTE(CONTACT_ID, ATTRIBUTE_NAME, ATTRIBUTE_DESC)
		VALUES(@CONTACT_ID, @ATTRIBUTE_NAME, @ATTRIBUTE_DESC)

	SET @NEW_ATTRIBUTE_ID = @@IDENTITY

	INSERT INTO TB_ATTRIBUTE_SET(ATTRIBUTE_ID, SET_ID, PARENT_ATTRIBUTE_ID, ATTRIBUTE_TYPE_ID, ATTRIBUTE_SET_DESC, ATTRIBUTE_ORDER)
		VALUES(@NEW_ATTRIBUTE_ID, @SET_ID, @PARENT_ATTRIBUTE_ID, @ATTRIBUTE_TYPE_ID, @ATTRIBUTE_SET_DESC, @ATTRIBUTE_ORDER)

	SET @NEW_ATTRIBUTE_SET_ID = @@IDENTITY


SET NOCOUNT OFF
GO
/****** Object:  Table [dbo].[TB_ITEM_OUTCOME]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_OUTCOME](
	[OUTCOME_ID] [int] IDENTITY(1,1) NOT NULL,
	[ITEM_SET_ID] [bigint] NULL,
	[OUTCOME_TYPE_ID] [int] NULL,
	[ITEM_ATTRIBUTE_ID_INTERVENTION] [bigint] NULL,
	[ITEM_ATTRIBUTE_ID_CONTROL] [bigint] NULL,
	[ITEM_ATTRIBUTE_ID_OUTCOME] [bigint] NULL,
	[OUTCOME_TITLE] [nvarchar](255) NULL,
	[DATA1] [float] NULL,
	[DATA2] [float] NULL,
	[DATA3] [float] NULL,
	[DATA4] [float] NULL,
	[DATA5] [float] NULL,
	[DATA6] [float] NULL,
 CONSTRAINT [PK_TB_OUTCOME] PRIMARY KEY CLUSTERED 
(
	[OUTCOME_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_ITEM_ATTRIBUTE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_ATTRIBUTE](
	[ITEM_ATTRIBUTE_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NULL,
	[ITEM_SET_ID] [bigint] NULL,
	[ATTRIBUTE_ID] [bigint] NULL,
	[ADDITIONAL_TEXT] [nvarchar](max) NULL,
 CONSTRAINT [PK_TB_ITEM_ATTRIBUTE] PRIMARY KEY CLUSTERED 
(
	[ITEM_ATTRIBUTE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE FULLTEXT INDEX ON [dbo].[TB_ITEM_ATTRIBUTE](
[ADDITIONAL_TEXT] LANGUAGE [English])
KEY INDEX [PK_TB_ITEM_ATTRIBUTE]ON ([tb_ITEM_ATTRIBUTE_FTIndex], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  Table [dbo].[TB_ITEM_SOURCE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_SOURCE](
	[ITEM_SOURCE_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_ID] [bigint] NOT NULL,
	[SOURCE_ID] [int] NOT NULL,
 CONSTRAINT [PK_TB_ITEM_SOURCE] PRIMARY KEY CLUSTERED 
(
	[ITEM_SOURCE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_TB_ITEM_SOURCE] ON [dbo].[TB_ITEM_SOURCE] 
(
	[ITEM_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[st_Source_Update]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		S
-- Create date: 
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[st_Source_Update] 
	-- Add the parameters for the stored procedure here
	@s_ID int = 0, 
	@sDB nvarchar(200),
	@Name nvarchar(255),
	@DoS date,
	@DoI date,
	@Descr nvarchar(4000),
	@s_Str nvarchar(1000),
	@Notes nvarchar(4000)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE [Reviewer].[dbo].[TB_SOURCE]
	   SET [SOURCE_NAME] = @Name
		  ,[DATE_OF_SEARCH] = @DoS
		  ,[DATE_OF_IMPORT] = @DoI
		  ,[SOURCE_DATABASE] = @sDB
		  ,[SEARCH_DESCRIPTION] = @Descr
		  ,[SEARCH_STRING] = @s_Str
		  ,[NOTES] = @Notes
      
 WHERE SOURCE_ID = @s_ID
END
GO
/****** Object:  Table [dbo].[TB_REPORT_COLUMN_CODE]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_REPORT_COLUMN_CODE](
	[REPORT_COLUMN_CODE_ID] [int] IDENTITY(1,1) NOT NULL,
	[REPORT_ID] [int] NULL,
	[REPORT_COLUMN_ID] [int] NULL,
	[CODE_ORDER] [int] NULL,
	[SET_ID] [int] NULL,
	[ATTRIBUTE_ID] [bigint] NULL,
	[PARENT_ATTRIBUTE_ID] [bigint] NULL,
	[PARENT_ATTRIBUTE_TEXT] [nvarchar](255) NULL,
	[USER_DEF_TEXT] [nvarchar](255) NULL,
	[DISPLAY_CODE] [bit] NULL,
	[DISPLAY_ADDITIONAL_TEXT] [bit] NULL,
	[DISPLAY_CODED_TEXT] [bit] NULL,
 CONSTRAINT [PK_TB_REPORT_COLUMN_CODE] PRIMARY KEY CLUSTERED 
(
	[REPORT_COLUMN_CODE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TB_META_ANALYSIS_OUTCOME]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_META_ANALYSIS_OUTCOME](
	[META_ANALYSIS_OUTCOME_ID] [int] IDENTITY(1,1) NOT NULL,
	[META_ANALYSIS_ID] [int] NULL,
	[OUTCOME_ID] [int] NULL,
 CONSTRAINT [PK_TB_META_ANALYSIS_OUTCOME] PRIMARY KEY CLUSTERED 
(
	[META_ANALYSIS_OUTCOME_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[st_SearchWeightedTerms]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[st_SearchWeightedTerms]
(
	@SEARCH_ID int = null output
,	@CONTACT_ID int = null
,	@REVIEW_ID int = null
,	@SEARCH_TITLE varchar(4000) = null
,	@TERMS NVARCHAR(4000) = NULL
,	@ANSWERS VARCHAR(max) = NULL
,	@FILTER_TYPE NVARCHAR(10) = NULL
)
AS

	-- Step One: Insert record into tb_SEARCH
	EXECUTE st_SearchInsert @REVIEW_ID, @CONTACT_ID, @SEARCH_TITLE, @ANSWERS, @TERMS, @NEW_SEARCH_ID = @SEARCH_ID OUTPUT
	

	-- Step Two: Perform the search and get a hits count

		-- No 'answers' to filter on - ADD FILTERS!
IF (@FILTER_TYPE = 'NONE')
BEGIN
	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
	SELECT DISTINCT  TB_ITEM_REVIEW.ITEM_ID, @SEARCH_ID, RANK FROM TB_ITEM_REVIEW
	INNER JOIN CONTAINSTABLE(TB_ITEM, (TITLE, ABSTRACT), @TERMS) AS KEY_TBL ON KEY_TBL.[KEY] = TB_ITEM_REVIEW.ITEM_ID
	WHERE REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true'
END
ELSE
IF (@FILTER_TYPE = 'INCLUDE') -- FILTER ON THE SET OF STUDIES IN THE LIST
BEGIN
	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
	SELECT DISTINCT  TB_ITEM_ATTRIBUTE.ITEM_ID, @SEARCH_ID, RANK FROM TB_ITEM_ATTRIBUTE
	INNER JOIN CONTAINSTABLE(TB_ITEM, (TITLE, ABSTRACT), @TERMS) AS KEY_TBL ON KEY_TBL.[KEY] = TB_ITEM_ATTRIBUTE.ITEM_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
	INNER JOIN dbo.fn_Split_int(@ANSWERS, ',') ON value = TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.SET_ID = TB_ATTRIBUTE_SET.SET_ID AND
		TB_ITEM_SET.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
		AND REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true'
END
ELSE -- Final filter type is 'exclude': exclude the items in the list
BEGIN
	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
	SELECT DISTINCT  TB_ITEM_ATTRIBUTE.ITEM_ID, @SEARCH_ID, RANK FROM TB_ITEM_ATTRIBUTE
	INNER JOIN CONTAINSTABLE(TB_ITEM, (TITLE, ABSTRACT), @TERMS) AS KEY_TBL ON KEY_TBL.[KEY] = TB_ITEM_ATTRIBUTE.ITEM_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.SET_ID = TB_ATTRIBUTE_SET.SET_ID AND
		TB_ITEM_SET.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
		AND REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true'
	WHERE NOT TB_ITEM_ATTRIBUTE.ITEM_ID IN
		(SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE IA2
			INNER JOIN TB_ATTRIBUTE_SET AS2 ON AS2.ATTRIBUTE_ID = IA2.ATTRIBUTE_ID
			INNER JOIN dbo.fn_Split_int(@ANSWERS, ',') ON value = AS2.ATTRIBUTE_SET_ID)			
		--potential bug - if the attribute_id in question has been applied to an item, but not in the review in question
		
END

	-- Step Three: Update the new search record in tb_SEARCH with the number of records added
	UPDATE tb_SEARCH SET HITS_NO = @@ROWCOUNT WHERE SEARCH_ID = @SEARCH_ID
GO
/****** Object:  Table [dbo].[TB_ITEM_ATTRIBUTE_TEXT]    Script Date: 05/20/2010 16:26:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TB_ITEM_ATTRIBUTE_TEXT](
	[ITEM_ATTRIBUTE_TEXT_ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ITEM_DOCUMENT_ID] [bigint] NULL,
	[ITEM_ATTRIBUTE_ID] [bigint] NULL,
	[TEXT_FROM] [int] NULL,
	[TEXT_TO] [int] NULL,
 CONSTRAINT [PK_TB_ITEM_ATTRIBUTE_TEXT] PRIMARY KEY CLUSTERED 
(
	[ITEM_ATTRIBUTE_TEXT_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_ItemsSetUncoded]    Script Date: 05/20/2010 16:26:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_ItemsSetUncoded]
(
	@REVIEW_ID INT,
	@SET_ID INT, -- NEEDED, AS WE NEED TO KNOW WHETHER CONTACT_ID IS SIGNIFICANT (IN DOUBLE SCREENING IT IS)
	@IS_CODING_FINAL BIT, -- TRUE / FALSE
	@CONTACT_ID INT
)
RETURNS @retTable TABLE (ITEM_ID BIGINT)
AS
BEGIN

IF (@IS_CODING_FINAL = 'True')
BEGIN

INSERT INTO @retTable(ITEM_ID)
SELECT TB_ITEM_REVIEW.ITEM_ID FROM TB_ITEM_REVIEW
WHERE TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
AND NOT TB_ITEM_REVIEW.ITEM_ID IN
	(SELECT IA.ITEM_ID FROM TB_ITEM_ATTRIBUTE IA
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = IA.ITEM_SET_ID
			AND TB_ITEM_SET.SET_ID = @SET_ID)
END
ELSE
BEGIN

INSERT INTO @retTable(ITEM_ID)
SELECT TB_ITEM_REVIEW.ITEM_ID FROM TB_ITEM_REVIEW
WHERE TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
AND NOT TB_ITEM_REVIEW.ITEM_ID IN
	(SELECT IA.ITEM_ID FROM TB_ITEM_ATTRIBUTE IA
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = IA.ITEM_SET_ID 
			AND TB_ITEM_SET.SET_ID = @SET_ID
			AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID)

END

RETURN

END
GO
/****** Object:  UserDefinedFunction [dbo].[fn_ItemAttributes]    Script Date: 05/20/2010 16:26:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_ItemAttributes]
(
	@CODING_IS_FINAL BIT,
	@SET_ID INT,
	@CONTACT_ID INT,
	@ITEM_ID BIGINT
)
RETURNS @retTable TABLE (ITEM_ATTRIBUTE_ID BIGINT, ITEM_SET_ID BIGINT, ATTRIBUTE_ID BIGINT, ADDITIONAL_TEXT NVARCHAR(MAX),
	CONTACT_ID INT, ATTRIBUTE_SET_ID BIGINT, IS_COMPLETED BIT, IS_LOCKED BIT)
AS
BEGIN

/*
Returns item attribute records depending whether we need to filter by contact_id. We filter by contact_id if:
 - The code set is not finalised and we are double-coding (coding_is_final is false).
*/

/* Has this item already been coded and finalised with this code set? */
DECLARE @CHECK_COMPLETED BIT
SET @CHECK_COMPLETED = 'False'
SELECT @CHECK_COMPLETED = IS_COMPLETED FROM TB_ITEM_SET WHERE ITEM_ID = @ITEM_ID AND SET_ID = @SET_ID

/* Returning filtered by contact id */
IF ((@CHECK_COMPLETED = 'False') AND (@CODING_IS_FINAL = 'False'))
BEGIN

INSERT INTO @retTable (ITEM_ATTRIBUTE_ID, ITEM_SET_ID, ATTRIBUTE_ID, ADDITIONAL_TEXT, CONTACT_ID, ATTRIBUTE_SET_ID,
	IS_COMPLETED, IS_LOCKED)
SELECT IA.ITEM_ATTRIBUTE_ID, IA.ITEM_SET_ID, IA.ATTRIBUTE_ID, IA.ADDITIONAL_TEXT, TB_ITEM_SET.CONTACT_ID, ATTRIBUTE_SET_ID,
	IS_COMPLETED, IS_LOCKED
	FROM TB_ITEM_ATTRIBUTE IA
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = IA.ITEM_SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID AND TB_ATTRIBUTE_SET.ATTRIBUTE_ID = IA.ATTRIBUTE_ID
		AND TB_ITEM_SET.SET_ID = @SET_ID
	WHERE IA.ITEM_ID = @ITEM_ID
END
ELSE
/* returning without taking contact_id as a filter */
BEGIN
	INSERT INTO @retTable (ITEM_ATTRIBUTE_ID, ITEM_SET_ID, ATTRIBUTE_ID, ADDITIONAL_TEXT, CONTACT_ID, ATTRIBUTE_SET_ID,
		IS_COMPLETED, IS_LOCKED)
	SELECT IA.ITEM_ATTRIBUTE_ID, IA.ITEM_SET_ID, IA.ATTRIBUTE_ID, IA.ADDITIONAL_TEXT, TB_ITEM_SET.CONTACT_ID, ATTRIBUTE_SET_ID,
		IS_COMPLETED, IS_LOCKED
	FROM TB_ITEM_ATTRIBUTE IA
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = IA.ITEM_SET_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID AND TB_ATTRIBUTE_SET.ATTRIBUTE_ID = IA.ATTRIBUTE_ID
		AND TB_ITEM_SET.SET_ID = @SET_ID
	WHERE IA.ITEM_ID = @ITEM_ID
END

RETURN

END
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetDeleteWarning]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_AttributeSetDeleteWarning]
(
	@ATTRIBUTE_SET_ID BIGINT,
	@SET_ID INT,
	@NUM_ITEMS BIGINT OUTPUT,
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

IF (@ATTRIBUTE_SET_ID > 0)
BEGIN
	SELECT @NUM_ITEMS = COUNT(DISTINCT TB_ITEM_ATTRIBUTE.ITEM_ID) FROM TB_ITEM_ATTRIBUTE
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
		INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ITEM_SET.SET_ID
		INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_SET.SET_ID
			AND TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
			AND TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
			AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
END

IF (@SET_ID > 0)
BEGIN
	SELECT @NUM_ITEMS = COUNT(DISTINCT TB_ITEM_SET.ITEM_ID) FROM TB_ITEM_SET
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_SET.ITEM_ID
			AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		WHERE TB_ITEM_SET.SET_ID = @SET_ID
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_AttributeSetDelete]
(
	@ATTRIBUTE_SET_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@PARENT_ATTRIBUTE_ID BIGINT,
	@ATTRIBUTE_ORDER INT,
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

DELETE FROM TB_ITEM_ATTRIBUTE
from TB_ITEM_ATTRIBUTE INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
		AND TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
		AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		
DELETE FROM TB_ITEM_SET
WHERE NOT ITEM_SET_ID IN (SELECT DISTINCT ITEM_SET_ID FROM TB_ITEM_ATTRIBUTE
							INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID)

	SELECT TB_ATTRIBUTE_SET.ATTRIBUTE_ID FROM TB_ATTRIBUTE_SET
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.SET_ID = TB_ATTRIBUTE_SET.SET_ID
		INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_SET_ID = TB_ITEM_SET.ITEM_SET_ID
			AND TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
		WHERE TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

	IF (@@ROWCOUNT = 0)
	BEGIN

		DELETE FROM TB_ATTRIBUTE_SET WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

		UPDATE TB_ATTRIBUTE_SET
				SET ATTRIBUTE_ORDER = ATTRIBUTE_ORDER -1
				WHERE PARENT_ATTRIBUTE_ID = @PARENT_ATTRIBUTE_ID
				AND ATTRIBUTE_ORDER > @ATTRIBUTE_ORDER

		SELECT ATTRIBUTE_ID FROM TB_ATTRIBUTE_SET WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID

		IF (@@ROWCOUNT = 0)
		BEGIN
			DELETE FROM TB_ATTRIBUTE WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID
		END

	END
	

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeSimpleBulkInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAttributeSimpleBulkInsert]
(
	@SET_ID INT,
	@CONTACT_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@ITEM_ID_LIST varchar(max)
)

As

SET NOCOUNT ON
	
	INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
	SELECT [VALUE], TB_ITEM_SET.ITEM_SET_ID, @ATTRIBUTE_ID FROM DBO.fn_split_int(@ITEM_ID_LIST, ',')
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = [VALUE]
			AND TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
	
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributes]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAttributes]
(
	@ITEM_SET_ID BIGINT
)

As

SET NOCOUNT ON

SELECT DISTINCT ITEM_ATTRIBUTE_ID, TB_ITEM_ATTRIBUTE.ITEM_ID, TB_ITEM_ATTRIBUTE.ITEM_SET_ID,
	TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID, ADDITIONAL_TEXT, CONTACT_ID, ATTRIBUTE_SET_ID
FROM TB_ITEM_ATTRIBUTE
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID AND TB_ITEM_SET.ITEM_SET_ID = @ITEM_SET_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID AND TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
WHERE TB_ITEM_ATTRIBUTE.ITEM_SET_ID = @ITEM_SET_ID


/*
SELECT distinct(TB_REVIEW_SET.set_id), @ITEM_ID ITEM_ID, IA.ITEM_ATTRIBUTE_ID, IA.ITEM_SET_ID, IA.ATTRIBUTE_ID, 
	IA.ADDITIONAL_TEXT, IA.CONTACT_ID, IA.ATTRIBUTE_SET_ID, IA.IS_COMPLETED, IA.IS_LOCKED
FROM TB_REVIEW_SET
CROSS APPLY dbo.fn_ItemAttributes(CODING_IS_FINAL, TB_REVIEW_SET.SET_ID, @CONTACT_ID, @ITEM_ID) IA
WHERE TB_REVIEW_SET.REVIEW_ID = @REVIEW_ID
*/

/*

SELECT IA.ITEM_ATTRIBUTE_ID, IA.ITEM_ID, IA.ITEM_SET_ID, IA.ATTRIBUTE_ID, IA.ADDITIONAL_TEXT, TB_ITEM_SET.CONTACT_ID, ATTRIBUTE_SET_ID
FROM TB_ITEM_ATTRIBUTE IA
INNER JOIN TB

*/


/*
IF (@CONTACT_ID = 0)
BEGIN
	SELECT IA.ITEM_ATTRIBUTE_ID, IA.ITEM_ID, IA.ITEM_SET_ID, IA.ATTRIBUTE_ID, IA.ADDITIONAL_TEXT, TB_ITEM_SET.CONTACT_ID, ATTRIBUTE_SET_ID
	FROM TB_ITEM_ATTRIBUTE IA
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = IA.ITEM_SET_ID
	INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID AND REVIEW_ID = @REVIEW_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID AND TB_ATTRIBUTE_SET.ATTRIBUTE_ID = IA.ATTRIBUTE_ID
	WHERE IA.ITEM_ID = @ITEM_ID
END
ELSE
BEGIN
	SELECT IA.ITEM_ATTRIBUTE_ID, IA.ITEM_ID, IA.ITEM_SET_ID, IA.ATTRIBUTE_ID, IA.ADDITIONAL_TEXT, TB_ITEM_SET.CONTACT_ID, ATTRIBUTE_SET_ID
	FROM TB_ITEM_ATTRIBUTE IA
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = IA.ITEM_SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
	INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID AND REVIEW_ID = @REVIEW_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID AND TB_ATTRIBUTE_SET.ATTRIBUTE_ID = IA.ATTRIBUTE_ID
	WHERE IA.ITEM_ID = @ITEM_ID
END
*/

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeInsertSimple]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAttributeInsertSimple]
(
	@ITEM_ID BIGINT,
	@SET_ID INT,
	@CONTACT_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@ADDITIONAL_TEXT nvarchar(max),
	@REVIEW_ID INT
)

As
SET NOCOUNT ON

-- SIMPLE VERSION: NO RETURN VALUES

-- First get a valid item_set_id.
-- If is_coding_final for this review then contact_id is irrelevant.
-- If coding is complete the contact_id is irrelevant.
-- Otherwise, we need a item_set_id for this specific contact.

DECLARE @IS_CODING_FINAL BIT
DECLARE @ITEM_SET_ID BIGINT
DECLARE @CHECK BIGINT

SELECT @IS_CODING_FINAL = CODING_IS_FINAL FROM TB_REVIEW_SET WHERE SET_ID = @SET_ID AND REVIEW_ID = @REVIEW_ID

IF (@IS_CODING_FINAL = 'True')
BEGIN
	SELECT @ITEM_SET_ID = ITEM_SET_ID FROM TB_ITEM_SET WHERE ITEM_ID = @ITEM_ID AND SET_ID = @SET_ID
END
ELSE
BEGIN
	SELECT @ITEM_SET_ID = ITEM_SET_ID FROM TB_ITEM_SET WHERE ITEM_ID = @ITEM_ID AND SET_ID = @SET_ID AND IS_COMPLETED = 'True'
	IF (@ITEM_SET_ID IS NULL)
	BEGIN
		SELECT @ITEM_SET_ID = ITEM_SET_ID FROM TB_ITEM_SET WHERE ITEM_ID = @ITEM_ID AND SET_ID = @SET_ID AND CONTACT_ID = @CONTACT_ID
	END
END

if (@ITEM_SET_ID IS NULL) -- have to create one
BEGIN
	INSERT INTO TB_ITEM_SET(ITEM_ID, SET_ID, IS_COMPLETED, CONTACT_ID)
	VALUES (@ITEM_ID, @SET_ID, @IS_CODING_FINAL, @CONTACT_ID)
	SET @ITEM_SET_ID = @@IDENTITY
END

-- We (finally) have an item_set_id we can use for our insert

SELECT TOP(1) @CHECK = ITEM_ATTRIBUTE_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID AND ITEM_SET_ID = @ITEM_SET_ID

IF (@CHECK IS NULL) -- Not sure what to do if it's not null... - SHOULD REALLY THROW AN ERROR
BEGIN
	INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID, ADDITIONAL_TEXT)
	VALUES (@ITEM_ID, @ITEM_SET_ID, @ATTRIBUTE_ID, @ADDITIONAL_TEXT)
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAttributeInsert]
(
	@ITEM_ID BIGINT,
	@SET_ID INT,
	@CONTACT_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@ADDITIONAL_TEXT nvarchar(max),
	@REVIEW_ID INT,

	@NEW_ITEM_ATTRIBUTE_ID BIGINT OUTPUT,
	@NEW_ITEM_SET_ID BIGINT OUTPUT
)

As
SET NOCOUNT ON

-- First get a valid item_set_id.
-- If is_coding_final for this review then contact_id is irrelevant.
-- If coding is complete the contact_id is irrelevant.
-- Otherwise, we need a item_set_id for this specific contact.

DECLARE @IS_CODING_FINAL BIT
DECLARE @ITEM_SET_ID BIGINT
DECLARE @CHECK BIGINT

SELECT @IS_CODING_FINAL = CODING_IS_FINAL FROM TB_REVIEW_SET WHERE SET_ID = @SET_ID AND REVIEW_ID = @REVIEW_ID

IF (@IS_CODING_FINAL = 'True')
BEGIN
	SELECT @ITEM_SET_ID = ITEM_SET_ID FROM TB_ITEM_SET WHERE ITEM_ID = @ITEM_ID AND SET_ID = @SET_ID
END
ELSE
BEGIN
	SELECT @ITEM_SET_ID = ITEM_SET_ID FROM TB_ITEM_SET WHERE ITEM_ID = @ITEM_ID AND SET_ID = @SET_ID AND IS_COMPLETED = 'True'
	IF (@ITEM_SET_ID IS NULL)
	BEGIN
		SELECT @ITEM_SET_ID = ITEM_SET_ID FROM TB_ITEM_SET WHERE ITEM_ID = @ITEM_ID AND SET_ID = @SET_ID AND CONTACT_ID = @CONTACT_ID
	END
END

if (@ITEM_SET_ID IS NULL) -- have to create one
BEGIN
	INSERT INTO TB_ITEM_SET(ITEM_ID, SET_ID, IS_COMPLETED, CONTACT_ID)
	VALUES (@ITEM_ID, @SET_ID, @IS_CODING_FINAL, @CONTACT_ID)
	SET @ITEM_SET_ID = @@IDENTITY
END

-- We (finally) have an item_set_id we can use for our insert

SELECT TOP(1) @CHECK = ITEM_ATTRIBUTE_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID AND ITEM_SET_ID = @ITEM_SET_ID

IF (@CHECK IS NULL) -- Not sure what to do if it's not null... - SHOULD REALLY THROW AN ERROR
BEGIN
	INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID, ADDITIONAL_TEXT)
	VALUES (@ITEM_ID, @ITEM_SET_ID, @ATTRIBUTE_ID, @ADDITIONAL_TEXT)
	SET @NEW_ITEM_ATTRIBUTE_ID = @@IDENTITY
END

SET @NEW_ITEM_SET_ID = @ITEM_SET_ID


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAttributeDelete]
(
	@ITEM_ATTRIBUTE_ID BIGINT,
	@ITEM_SET_ID BIGINT
)

As
SET NOCOUNT ON

DELETE FROM TB_ITEM_ATTRIBUTE
	WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID

DECLARE @CHECK BIGINT

SELECT TOP (1) @CHECK =  ITEM_ATTRIBUTE_ID FROM TB_ITEM_ATTRIBUTE WHERE ITEM_SET_ID = @ITEM_SET_ID

IF (@CHECK IS NULL)
BEGIN
	DELETE FROM TB_ITEM_SET WHERE ITEM_SET_ID = @ITEM_SET_ID
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeChildFrequencies]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ItemAttributeChildFrequencies]
(
	@ATTRIBUTE_ID BIGINT = null,
	@SET_ID BIGINT,
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

SELECT ATTRIBUTE_NAME, TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID,
	COUNT(DISTINCT TB_ITEM_ATTRIBUTE.ITEM_ID) AS ITEM_COUNT FROM TB_ITEM_ATTRIBUTE
	
	INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
		AND TB_ITEM_SET.IS_COMPLETED = 'TRUE' AND TB_ITEM_SET.SET_ID = @SET_ID
	RIGHT OUTER JOIN TB_ATTRIBUTE_SET ON TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
		AND TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID = @ATTRIBUTE_ID AND TB_ATTRIBUTE_SET.SET_ID = @SET_ID
	INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
		AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		AND TB_ITEM_REVIEW.IS_INCLUDED = 'TRUE'
	GROUP BY TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID, ATTRIBUTE_NAME
	ORDER BY ITEM_COUNT DESC

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeBulkInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAttributeBulkInsert]
(
	@SET_ID INT,
	@IS_COMPLETED BIT,
	@CONTACT_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@ITEM_ID_LIST varchar(max)
)

As

SET NOCOUNT ON

	DECLARE @ITEM_IDS TABLE
	(
		idx smallint Primary Key,
		value bigint
	)

	INSERT INTO @ITEM_IDS (IDX, VALUE) SELECT * FROM DBO.fn_split_int(@ITEM_ID_LIST, ',')

	INSERT INTO TB_ITEM_SET(ITEM_ID, SET_ID, IS_COMPLETED, CONTACT_ID)
		SELECT [VALUE], @SET_ID, @IS_COMPLETED, @CONTACT_ID FROM @ITEM_IDS ids
			WHERE NOT [VALUE] IN 
			(SELECT ITEM_ID FROM TB_ITEM_SET WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID)

	INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
		SELECT [VALUE], TB_ITEM_SET.ITEM_SET_ID, @ATTRIBUTE_ID FROM @ITEM_IDS ids
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.VALUE
			WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeBulkDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ItemAttributeBulkDelete]
(
	@ATTRIBUTE_ID BIGINT,
	@ITEM_ID_LIST varchar(max),
	@REVIEW_ID INT
)

As
SET NOCOUNT ON

DELETE FROM TB_ITEM_ATTRIBUTE
from TB_ITEM_ATTRIBUTE
	inner join DBO.fn_split_int(@ITEM_ID_LIST, ',') as theList on theList.value = tb_item_attribute.item_id 
	inner join TB_ITEM_REVIEW on TB_ITEM_REVIEW.ITEM_ID = theList.value and TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
	where TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = @ATTRIBUTE_ID
	
delete from TB_ITEM_SET
where not ITEM_SET_ID in
	(select distinct ITEM_SET_ID from TB_ITEM_ATTRIBUTE)

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemAttributeUpdate]
(
	@ADDITIONAL_TEXT nvarchar(max),
	@ITEM_ATTRIBUTE_ID BIGINT
)

As
SET NOCOUNT ON

UPDATE TB_ITEM_ATTRIBUTE
	SET ADDITIONAL_TEXT = @ADDITIONAL_TEXT
	WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemList]
(
	@REVIEW_ID INT,
	@SHOW_INCLUDED BIT = 'true',
	@SHOW_DELETED BIT = 'false',
	@SOURCE_ID INT = 0,
	@ATTRIBUTE_SET_ID_LIST NVARCHAR(MAX) = ''
)

As

SET NOCOUNT ON

IF (@SOURCE_ID = 0) AND (@ATTRIBUTE_SET_ID_LIST = '') /* LIST ALL ITEMS IN THE REVIEW */ BEGIN

SELECT I.ITEM_ID, I.[TYPE_ID], I.OLD_ITEM_ID, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
	TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY,
	[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
	AVAILABILITY, URL, ABSTRACT, COMMENTS, [TYPE_NAME], IS_DELETED, IS_INCLUDED, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 1) as PARENTAUTHORS

FROM TB_ITEM I
INNER JOIN TB_ITEM_TYPE ON TB_ITEM_TYPE.[TYPE_ID] = I.[TYPE_ID] INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND 
	TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
	AND TB_ITEM_REVIEW.IS_INCLUDED = @SHOW_INCLUDED
	AND TB_ITEM_REVIEW.IS_DELETED = @SHOW_DELETED

ORDER BY TITLE

END
ELSE /* FILTER BY A LIST OF ATTRIBUTES */

IF (@ATTRIBUTE_SET_ID_LIST != '')
BEGIN
SELECT DISTINCT (I.ITEM_ID), I.[TYPE_ID], I.OLD_ITEM_ID, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
	TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY,
	[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
	AVAILABILITY, URL, ABSTRACT, COMMENTS, [TYPE_NAME], IS_DELETED, IS_INCLUDED, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 1) as PARENTAUTHORS

FROM TB_ITEM I
INNER JOIN TB_ITEM_TYPE ON TB_ITEM_TYPE.[TYPE_ID] = I.[TYPE_ID] INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND 
	TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
	AND TB_ITEM_REVIEW.IS_INCLUDED = @SHOW_INCLUDED
	AND TB_ITEM_REVIEW.IS_DELETED = @SHOW_DELETED

INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_ID = I.ITEM_ID INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID INNER JOIN dbo.fn_Split_int(@ATTRIBUTE_SET_ID_LIST, ',') attribute_list ON attribute_list.value = TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID AND TB_ITEM_SET.IS_COMPLETED = 'TRUE'
INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID AND TB_REVIEW_SET.REVIEW_ID = @REVIEW_ID -- Make sure the correct set is being used - the same code can appear in more than one set!

END
ELSE -- LISTING BY A SOURCE
BEGIN
SELECT I.ITEM_ID, I.[TYPE_ID], I.OLD_ITEM_ID, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
	TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY,
	[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
	AVAILABILITY, URL, ABSTRACT, COMMENTS, [TYPE_NAME], IS_DELETED, IS_INCLUDED, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 1) as PARENTAUTHORS

FROM TB_ITEM I
INNER JOIN TB_ITEM_TYPE ON TB_ITEM_TYPE.[TYPE_ID] = I.[TYPE_ID] INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND 
	TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
	--AND TB_ITEM_REVIEW.IS_INCLUDED = @SHOW_INCLUDED
	--AND TB_ITEM_REVIEW.IS_DELETED = @SHOW_DELETED INNER JOIN TB_ITEM_SOURCE ON TB_ITEM_SOURCE.ITEM_ID = I.ITEM_ID AND TB_ITEM_SOURCE.SOURCE_ID = @SOURCE_ID
INNER JOIN TB_ITEM_SOURCE ON TB_ITEM_SOURCE.ITEM_ID = I.ITEM_ID AND TB_ITEM_SOURCE.SOURCE_ID = @SOURCE_ID

ORDER BY TITLE
END




SET NOCOUNT OFF

/****** Object:  StoredProcedure [dbo].[st_ItemSearchList]    Script Date: 09/17/2009 16:51:30 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[st_ItemImportPrepare]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:              Sergio
-- Create date: 23-06-09
-- Description: Prepare Tables for Bulk Item import
-- =============================================
CREATE PROCEDURE [dbo].[st_ItemImportPrepare]
        @Items_Number int,
        @Authors_Number int,
        @Item_Seed bigint OUTPUT,
        @Author_Seed bigint OUTPUT,
        @Source_Seed int OUTPUT,
        @Item_Source_Seed bigint OUTPUT,
        @Item_Review_Seed bigint OUTPUT
AS
BEGIN
SET NOCOUNT ON;
-- This procedure Reservs some Identinty values that will be inserted
-- from C# via a Dataset bulkcopy
-- Note the Table Lock Hints used to prevent insertions to happen while dealing with a particular table
Declare @temp bigint
BEGIN TRAN A
        select @Item_Seed = IDENT_CURRENT('TB_ITEM') FROM TB_ITEM WITH
(HOLDLOCK, TABLOCKX)
        set @temp = @Item_Seed + @Items_Number
        DBCC CHECKIDENT('TB_ITEM', RESEED, @temp)
COMMIT TRAN A

BEGIN TRAN B
        select @Author_Seed = IDENT_CURRENT('tb_ITEM_AUTHOR') FROM
tb_ITEM_AUTHOR WITH (HOLDLOCK, TABLOCKX)
        set @temp = @Author_Seed + @Authors_Number
        DBCC CHECKIDENT('tb_ITEM_AUTHOR', RESEED, @temp)
COMMIT TRAN B

BEGIN TRAN C
        select @Source_Seed = IDENT_CURRENT('TB_SOURCE') FROM TB_SOURCE
WITH (HOLDLOCK, TABLOCKX)
        set @temp = @Source_Seed + 1
        DBCC CHECKIDENT('TB_SOURCE', RESEED, @temp)
COMMIT TRAN C

BEGIN TRAN D
        select @Item_Source_Seed = IDENT_CURRENT('TB_ITEM_SOURCE') FROM
TB_ITEM_SOURCE WITH (HOLDLOCK, TABLOCKX)
        set @temp = @Item_Source_Seed + @Items_Number
        DBCC CHECKIDENT('TB_ITEM_SOURCE', RESEED, @temp)
COMMIT TRAN D

BEGIN TRAN E
        select @Item_Review_Seed = IDENT_CURRENT('TB_ITEM_REVIEW') FROM
TB_ITEM_REVIEW WITH (HOLDLOCK, TABLOCKX)
        set @temp = @Item_Review_Seed + @Items_Number
        DBCC CHECKIDENT('TB_ITEM_REVIEW', RESEED, @temp)
COMMIT TRAN E
END
GO
/****** Object:  StoredProcedure [dbo].[st_SourceFromReview_ID]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Sergio
-- Create date: 29-06-09
-- Description:	Gets Sources from Review_ID
-- =============================================
CREATE PROCEDURE [dbo].[st_SourceFromReview_ID] 
	-- Add the parameters for the stored procedure here
	@revID int = 0 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	Select SOURCE_NAME, count(*) As 'Total_Items',
		sum(CASE WHEN tb_item_review.IS_DELETED = 1 then 1 else 0 END) as 'Deleted_Items',
		TB_SOURCE.IS_DELETED,
		TB_SOURCE.Source_ID,
		DATE_OF_SEARCH,
		DATE_OF_IMPORT,
		SOURCE_DATABASE,
		SEARCH_DESCRIPTION,
		SEARCH_STRING,
		TB_SOURCE.NOTES,
		IMPORT_FILTER_NAME as IMPORT_FILTER
		from TB_SOURCE inner join
		tb_item_source on TB_SOURCE.source_id = tb_item_source.source_id
		--inner join tb_item on tb_item_source.item_id = tb_item.Item_ID
		inner join tb_item_review on tb_item_source.Item_ID = tb_item_review.Item_ID
		left outer join TB_IMPORT_FILTER on TB_IMPORT_FILTER.IMPORT_FILTER_ID = TB_SOURCE.IMPORT_FILTER_ID
	where TB_SOURCE.review_ID = @RevID AND TB_ITEM_REVIEW.REVIEW_ID = @RevID
	group by SOURCE_NAME,
			 TB_SOURCE.Source_ID,
			 TB_SOURCE.IS_DELETED,
			 DATE_OF_SEARCH,
			 DATE_OF_IMPORT,
			 SOURCE_DATABASE,
			 SEARCH_DESCRIPTION,
			 SEARCH_STRING,
			 TB_SOURCE.NOTES,
			 IMPORT_FILTER_NAME
	order by TB_SOURCE.Source_ID
END
GO
/****** Object:  StoredProcedure [dbo].[st_SourceDelete]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Sergio
-- Create date: 20/7/09
-- Description:	(Un/)Delete a source and all its Items
-- =============================================
CREATE PROCEDURE [dbo].[st_SourceDelete] 
	-- Add the parameters for the stored procedure here
	@source_ID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
declare @state bit;
declare @rev_ID int;
Set @state = 1 - (select IS_DELETED from TB_SOURCE where SOURCE_ID = @source_ID)
set @rev_ID = (select review_id from TB_SOURCE where SOURCE_ID = @source_ID)
BEGIN TRY

BEGIN TRANSACTION
update TB_SOURCE set IS_DELETED = @state where SOURCE_ID = @source_ID
update IR set IS_DELETED = @state, IS_INCLUDED = 1 - @state
	from TB_SOURCE inner join
		tb_item_source on TB_SOURCE.source_id = tb_item_source.source_id
		inner join tb_item on tb_item_source.item_id = tb_item.Item_ID
		inner join tb_item_review as IR on tb_item.Item_ID = IR.Item_ID
	where TB_SOURCE.SOURCE_ID = @source_ID AND IR.REVIEW_ID = @rev_ID

COMMIT TRANSACTION
END TRY

BEGIN CATCH
IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[st_SearchFreeText]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[st_SearchFreeText]
(
	@SEARCH_ID int = null output
,	@CONTACT_ID nvarchar(50) = null
,	@REVIEW_ID nvarchar(50) = null
,	@SEARCH_TITLE varchar(4000) = null
,	@SEARCH_TEXT varchar(4000) = null
,	@SEARCH_WHAT nvarchar(20) = null
,	@INCLUDED BIT = NULL -- 'INCLUDED' OR 'EXCLUDED'

)
AS
	-- Step One: Insert record into tb_SEARCH
	EXECUTE st_SearchInsert @REVIEW_ID, @CONTACT_ID, @SEARCH_TITLE, @SEARCH_TEXT, '', @NEW_SEARCH_ID = @SEARCH_ID OUTPUT

	-- Step Two: Perform the search and get a hits count

	IF (@SEARCH_WHAT = 'TitleAbstract')
	BEGIN
		INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
		SELECT DISTINCT  TB_ITEM_REVIEW.ITEM_ID, @SEARCH_ID, RANK FROM TB_ITEM_REVIEW
		INNER JOIN CONTAINSTABLE(TB_ITEM, (TITLE, ABSTRACT), @SEARCH_TEXT) AS KEY_TBL ON KEY_TBL.[KEY] = TB_ITEM_REVIEW.ITEM_ID
		WHERE REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true' AND TB_ITEM_REVIEW.IS_INCLUDED = @INCLUDED
	END
	ELSE
	IF (@SEARCH_WHAT = 'AdditionalText')
	BEGIN
		INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
		SELECT DISTINCT  TB_ITEM_ATTRIBUTE.ITEM_ID, @SEARCH_ID, RANK FROM TB_ITEM_ATTRIBUTE
		INNER JOIN CONTAINSTABLE(TB_ITEM_ATTRIBUTE, ADDITIONAL_TEXT, @SEARCH_TEXT) AS KEY_TBL
			ON KEY_TBL.[KEY] =  TB_ITEM_ATTRIBUTE.ITEM_ATTRIBUTE_ID
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
			AND TB_ITEM_SET.IS_COMPLETED = 'TRUE'
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_SET.ITEM_ID = TB_ITEM_REVIEW.ITEM_ID
		WHERE REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true' AND TB_ITEM_REVIEW.IS_INCLUDED = @INCLUDED
	END
	ELSE -- must be uploaded documents
	BEGIN
		INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
		SELECT DISTINCT  tb_ITEM_DOCUMENT.ITEM_ID, @SEARCH_ID, RANK FROM tb_ITEM_DOCUMENT
		INNER JOIN CONTAINSTABLE(TB_ITEM_DOCUMENT, DOCUMENT_TEXT, @SEARCH_TEXT) AS KEY_TBL 
			ON KEY_TBL.[KEY] = tb_ITEM_DOCUMENT.ITEM_DOCUMENT_ID
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = tb_ITEM_DOCUMENT.ITEM_ID
		WHERE REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true' AND TB_ITEM_REVIEW.IS_INCLUDED = @INCLUDED
	END
	
	-- Step Three: Update the new search record in tb_SEARCH with the number of records added
	UPDATE tb_SEARCH SET HITS_NO = @@ROWCOUNT WHERE SEARCH_ID = @SEARCH_ID
GO
/****** Object:  StoredProcedure [dbo].[st_SearchCodeSetCheck]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[st_SearchCodeSetCheck]
(
	@SEARCH_ID int = null output
,	@CONTACT_ID nvarchar(50) = null
,	@REVIEW_ID nvarchar(50) = null
,	@SEARCH_TITLE varchar(4000) = null
,	@SET_ID INT = NULL
,	@IS_CODED BIT = null
,	@INCLUDED BIT = NULL -- 'INCLUDED' OR 'EXCLUDED'

)
AS
	-- Step One: Insert record into tb_SEARCH
	EXECUTE st_SearchInsert @REVIEW_ID, @CONTACT_ID, @SEARCH_TITLE, '', '', @NEW_SEARCH_ID = @SEARCH_ID OUTPUT

	-- Step Two: Perform the search and get a hits count

	IF (@IS_CODED = 'TRUE')
	BEGIN

	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
		SELECT DISTINCT TB_ITEM_SET.ITEM_ID, @SEARCH_ID, 0 FROM TB_ITEM_SET
			INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_SET_ID = TB_ITEM_SET.ITEM_SET_ID
			INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_SET.ITEM_ID = TB_ITEM_REVIEW.ITEM_ID
		WHERE SET_ID = @SET_ID AND REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true'
			AND TB_ITEM_REVIEW.IS_INCLUDED = @INCLUDED
			
	END
	ELSE
	BEGIN
	
	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID, ITEM_RANK)
		SELECT DISTINCT TB_ITEM_REVIEW.ITEM_ID, @SEARCH_ID, 0 FROM TB_ITEM_REVIEW
			WHERE REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true' AND TB_ITEM_REVIEW.IS_INCLUDED = @INCLUDED
			
		EXCEPT
		
		SELECT DISTINCT TB_ITEM_SET.ITEM_ID, @SEARCH_ID, 0 FROM TB_ITEM_SET
			INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_SET_ID = TB_ITEM_SET.ITEM_SET_ID
			INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_SET.ITEM_ID = TB_ITEM_REVIEW.ITEM_ID
		WHERE SET_ID = @SET_ID AND REVIEW_ID = @REVIEW_ID AND IS_DELETED != 'true'
			AND TB_ITEM_REVIEW.IS_INCLUDED = @INCLUDED
	
	END
	
	-- Step Three: Update the new search record in tb_SEARCH with the number of records added
	UPDATE tb_SEARCH SET HITS_NO = @@ROWCOUNT WHERE SEARCH_ID = @SEARCH_ID
GO
/****** Object:  StoredProcedure [dbo].[st_SearchCodes]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[st_SearchCodes]
(
	@SEARCH_ID int = null output
,	@CONTACT_ID nvarchar(50) = null
,	@REVIEW_ID nvarchar(50) = null
,	@SEARCH_TITLE varchar(4000) = null
,	@ATTRIBUTE_SET_ID_LIST varchar(max) = null
,	@INCLUDED BIT = NULL -- 'INCLUDED' OR 'EXCLUDED'

)
AS
	-- Step One: Insert record into tb_SEARCH
	EXECUTE st_SearchInsert @REVIEW_ID, @CONTACT_ID, @SEARCH_TITLE, @ATTRIBUTE_SET_ID_LIST, '', @NEW_SEARCH_ID = @SEARCH_ID OUTPUT

	-- Step Two: Perform the search and get a hits count
	-- NB: We're using a udf to split the string of answer id's into a table, joining this with the tb_EXTRACT_ATTR (and any others that are required)
	-- to perform the insert.  @ANSWERS should be passed in as 'AT10225, AT10226' (with a comma and a space separating each id)

	
	INSERT INTO tb_SEARCH_ITEM (ITEM_ID, SEARCH_ID)
	SELECT DISTINCT  TB_ITEM_REVIEW.ITEM_ID, @SEARCH_ID FROM TB_ITEM_REVIEW
		INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_ID = TB_ITEM_REVIEW.ITEM_ID
		INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
		INNER JOIN dbo.fn_Split_int(@ATTRIBUTE_SET_ID_LIST, ',') attribute_list ON attribute_list.value = TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID AND TB_ITEM_SET.IS_COMPLETED = 'TRUE'
		INNER JOIN TB_REVIEW_SET ON TB_REVIEW_SET.SET_ID = TB_ITEM_SET.SET_ID AND TB_REVIEW_SET.REVIEW_ID = @REVIEW_ID -- Make sure the correct set is being used - the same code can appear in more than one set!
	WHERE TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		AND IS_DELETED != 'true'
		AND TB_ITEM_REVIEW.IS_INCLUDED = @INCLUDED
	 

	-- Step Three: Update the new search record in tb_SEARCH with the number of records added
	UPDATE tb_SEARCH SET HITS_NO = @@ROWCOUNT WHERE SEARCH_ID = @SEARCH_ID
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewWorkAllocationContact]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewWorkAllocationContact]
(
	@REVIEW_ID INT, 
	@CONTACT_ID INT
)

As

SELECT CONTACT_NAME, TB_WORK_ALLOCATION.CONTACT_ID, SET_NAME, TB_WORK_ALLOCATION.SET_ID,
	WORK_ALLOCATION_ID, ATTRIBUTE_NAME, TB_WORK_ALLOCATION.ATTRIBUTE_ID,
	
	(SELECT COUNT(TB_ITEM_ATTRIBUTE.ITEM_ID) FROM TB_ITEM_ATTRIBUTE
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID AND TB_ITEM_SET.IS_COMPLETED = 'TRUE'
		WHERE TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = TB_WORK_ALLOCATION.ATTRIBUTE_ID)
		AS TOTAL_ALLOCATION,
		
	(SELECT COUNT(TB_ITEM_SET.ITEM_ID) FROM TB_ITEM_SET
		INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_SET_ID = TB_ITEM_SET.ITEM_SET_ID
		WHERE TB_ITEM_SET.CONTACT_ID = @CONTACT_ID AND TB_ITEM_SET.SET_ID = TB_WORK_ALLOCATION.SET_ID
		)
		AS TOTAL_STARTED

FROM TB_WORK_ALLOCATION

INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_WORK_ALLOCATION.CONTACT_ID
INNER JOIN TB_SET ON TB_SET.SET_ID = TB_WORK_ALLOCATION.SET_ID
INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_WORK_ALLOCATION.ATTRIBUTE_ID

WHERE TB_WORK_ALLOCATION.REVIEW_ID = @REVIEW_ID AND TB_WORK_ALLOCATION.CONTACT_ID = @CONTACT_ID
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewWorkAllocation]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReviewWorkAllocation]
(
	@REVIEW_ID INT
)

As

SELECT CONTACT_NAME, TB_WORK_ALLOCATION.CONTACT_ID, SET_NAME, TB_WORK_ALLOCATION.SET_ID,
	WORK_ALLOCATION_ID, ATTRIBUTE_NAME, TB_WORK_ALLOCATION.ATTRIBUTE_ID,
	
	(SELECT COUNT(TB_ITEM_ATTRIBUTE.ITEM_ID) FROM TB_ITEM_ATTRIBUTE
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID AND TB_ITEM_SET.IS_COMPLETED = 'TRUE'
		WHERE TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = TB_WORK_ALLOCATION.ATTRIBUTE_ID)
		AS TOTAL_ALLOCATION,
		
	(SELECT COUNT(TB_ITEM_SET.ITEM_ID) FROM TB_ITEM_SET
		INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_SET_ID = TB_ITEM_SET.ITEM_SET_ID
		WHERE TB_ITEM_SET.CONTACT_ID = TB_WORK_ALLOCATION.CONTACT_ID AND TB_ITEM_SET.SET_ID = TB_WORK_ALLOCATION.SET_ID
		)
		AS TOTAL_STARTED
		
FROM TB_WORK_ALLOCATION

INNER JOIN TB_CONTACT ON TB_CONTACT.CONTACT_ID = TB_WORK_ALLOCATION.CONTACT_ID
INNER JOIN TB_SET ON TB_SET.SET_ID = TB_WORK_ALLOCATION.SET_ID
INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_WORK_ALLOCATION.ATTRIBUTE_ID

WHERE REVIEW_ID = @REVIEW_ID
GO
/****** Object:  StoredProcedure [dbo].[st_ItemWorkAllocationList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemWorkAllocationList] (
	@REVIEW_ID INT,
	@WORK_ALLOCATION_ID INT
)

As

SET NOCOUNT ON

SELECT DISTINCT(I.ITEM_ID), I.[TYPE_ID], I.OLD_ITEM_ID, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
	TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY,
	[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
	AVAILABILITY, URL, ABSTRACT, COMMENTS, [TYPE_NAME], IS_DELETED, IS_INCLUDED, [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 1) as PARENTAUTHORS

FROM TB_ITEM I
INNER JOIN TB_ITEM_TYPE ON TB_ITEM_TYPE.[TYPE_ID] = I.[TYPE_ID] INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND 
	TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_ID = I.ITEM_ID
INNER JOIN TB_WORK_ALLOCATION ON TB_WORK_ALLOCATION.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID AND TB_ITEM_SET.IS_COMPLETED = 'TRUE'

WHERE NOT I.ITEM_ID IN
	(SELECT ITEM_ID FROM TB_ITEM_SET
		WHERE TB_ITEM_SET.SET_ID = TB_WORK_ALLOCATION.SET_ID AND TB_ITEM_SET.CONTACT_ID = TB_WORK_ALLOCATION.CONTACT_ID)
	AND TB_WORK_ALLOCATION.WORK_ALLOCATION_ID = @WORK_ALLOCATION_ID

ORDER BY AUTHORS

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemsWithCodes]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemsWithCodes]
(
	@REVIEW_ID INT,
	@CODES NVARCHAR(MAX),
	@CODES_FROM NVARCHAR(MAX)
)

As

SET NOCOUNT ON

	SELECT IA1.ATTRIBUTE_ID FROM TB_ITEM_ATTRIBUTE IA1
		INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = IA1.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		INNER JOIN dbo.fn_Split(@CODES, ',') CODES ON CODES.VALUE = IA1.ATTRIBUTE_ID
		INNER JOIN TB_ITEM_ATTRIBUTE IA2 ON IA1.ITEM_ID = IA2.ITEM_ID
		INNER JOIN dbo.fn_Split(@CODES_FROM, ',') CODES_FROM ON CODES_FROM.VALUE = IA2.ATTRIBUTE_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_MetaAnalysisList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_MetaAnalysisList]
(
	@REVIEW_ID INT,
	@CONTACT_ID INT
)

As

SET NOCOUNT ON
	
	SELECT META_ANALYSIS_ID, META_ANALYSIS_TITLE, TB_META_ANALYSIS.CONTACT_ID, REVIEW_ID,
	TB_META_ANALYSIS.ATTRIBUTE_ID, SET_ID, ATTRIBUTE_ID_INTERVENTION, ATTRIBUTE_ID_CONTROL,
	ATTRIBUTE_ID_OUTCOME, TB_META_ANALYSIS.META_ANALYSIS_TYPE_ID, META_ANALYSIS_TYPE_TITLE,
	A1.ATTRIBUTE_NAME AS INTERVENTION_TEXT, a2.ATTRIBUTE_NAME AS CONTROL_TEXT, a3.ATTRIBUTE_NAME AS OUTCOME_TEXT
	
	FROM TB_META_ANALYSIS
	
	INNER JOIN TB_META_ANALYSIS_TYPE ON TB_META_ANALYSIS_TYPE.META_ANALYSIS_TYPE_ID =
		TB_META_ANALYSIS.META_ANALYSIS_TYPE_ID
		
	left outer JOIN TB_ITEM_ATTRIBUTE IA1 ON IA1.ITEM_ATTRIBUTE_ID = TB_META_ANALYSIS.ATTRIBUTE_ID_INTERVENTION
	left outer JOIN TB_ATTRIBUTE A1 ON A1.ATTRIBUTE_ID = IA1.ATTRIBUTE_ID 
	left outer JOIN TB_ITEM_ATTRIBUTE IA2 ON IA2.ITEM_ATTRIBUTE_ID = TB_META_ANALYSIS.ATTRIBUTE_ID_CONTROL
	left outer JOIN TB_ATTRIBUTE A2 ON A2.ATTRIBUTE_ID = IA2.ATTRIBUTE_ID
	left outer JOIN TB_ITEM_ATTRIBUTE IA3 ON IA3.ITEM_ATTRIBUTE_ID = TB_META_ANALYSIS.ATTRIBUTE_ID_OUTCOME
	left outer JOIN TB_ATTRIBUTE A3 ON A3.ATTRIBUTE_ID = IA3.ATTRIBUTE_ID 
	
	WHERE REVIEW_ID = @REVIEW_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_OutcomeItemUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_OutcomeItemUpdate]
(
	@OUTCOME_ID INT,
	@OUTCOME_TYPE_ID INT,
	@ITEM_ATTRIBUTE_ID_INTERVENTION BIGINT,
	@ITEM_ATTRIBUTE_ID_CONTROL BIGINT,
	@ITEM_ATTRIBUTE_ID_OUTCOME BIGINT,
	@OUTCOME_TITLE NVARCHAR(255),
	@DATA1 DECIMAL (18, 9),
	@DATA2 DECIMAL (18, 9),
	@DATA3 DECIMAL (18, 9),
	@DATA4 DECIMAL (18, 9),
	@DATA5 DECIMAL (18, 9),
	@DATA6 DECIMAL (18, 9)
)

As

SET NOCOUNT ON
	
	UPDATE TB_ITEM_OUTCOME SET
	OUTCOME_TYPE_ID = @OUTCOME_TYPE_ID,
	ITEM_ATTRIBUTE_ID_INTERVENTION = @ITEM_ATTRIBUTE_ID_INTERVENTION,
	ITEM_ATTRIBUTE_ID_CONTROL = @ITEM_ATTRIBUTE_ID_CONTROL,
	ITEM_ATTRIBUTE_ID_OUTCOME = @ITEM_ATTRIBUTE_ID_OUTCOME,
	OUTCOME_TITLE = @OUTCOME_TITLE,
	DATA1 = @DATA1,
	DATA2 = @DATA2,
	DATA3 = @DATA3,
	DATA4 = @DATA4,
	DATA5 = @DATA5,
	DATA6 = @DATA6
	
	WHERE OUTCOME_ID = @OUTCOME_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_OutcomeItemList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_OutcomeItemList]
(
	@REVIEW_ID INT,
	@ITEM_SET_ID BIGINT
)

As

SET NOCOUNT ON

SELECT OUTCOME_ID, TB_ITEM_OUTCOME.ITEM_SET_ID, OUTCOME_TYPE_ID, ITEM_ATTRIBUTE_ID_INTERVENTION,
	ITEM_ATTRIBUTE_ID_CONTROL, ITEM_ATTRIBUTE_ID_OUTCOME, OUTCOME_TITLE,
	DATA1, DATA2, DATA3, DATA4, DATA5, DATA6,
	A1.ATTRIBUTE_NAME AS INTERVENTION_TEXT,
	a2.ATTRIBUTE_NAME AS CONTROL_TEXT,
	a3.ATTRIBUTE_NAME AS OUTCOME_TEXT,
	0 as META_ANALYSIS_OUTCOME_ID -- Meta-analysis id. 0 as not selected
FROM TB_ITEM_OUTCOME
left outer JOIN TB_ATTRIBUTE IA1 ON IA1.ATTRIBUTE_ID = TB_ITEM_OUTCOME.ITEM_ATTRIBUTE_ID_INTERVENTION
left outer JOIN TB_ATTRIBUTE A1 ON A1.ATTRIBUTE_ID = IA1.ATTRIBUTE_ID 
left outer JOIN TB_ATTRIBUTE IA2 ON IA2.ATTRIBUTE_ID = TB_ITEM_OUTCOME.ITEM_ATTRIBUTE_ID_CONTROL
left outer JOIN TB_ATTRIBUTE A2 ON A2.ATTRIBUTE_ID = IA2.ATTRIBUTE_ID
left outer JOIN TB_ATTRIBUTE IA3 ON IA3.ATTRIBUTE_ID = TB_ITEM_OUTCOME.ITEM_ATTRIBUTE_ID_OUTCOME
left outer JOIN TB_ATTRIBUTE A3 ON A3.ATTRIBUTE_ID = IA3.ATTRIBUTE_ID 

WHERE TB_ITEM_OUTCOME.ITEM_SET_ID = @ITEM_SET_ID


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_OutcomeItemInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_OutcomeItemInsert]
(
	@ITEM_SET_ID BIGINT,
	@OUTCOME_TYPE_ID INT = 1,
	@ITEM_ATTRIBUTE_ID_INTERVENTION BIGINT,
	@ITEM_ATTRIBUTE_ID_CONTROL BIGINT,
	@ITEM_ATTRIBUTE_ID_OUTCOME BIGINT,
	@OUTCOME_TITLE NVARCHAR(255),
	@DATA1 DECIMAL (18, 9),
	@DATA2 DECIMAL (18, 9),
	@DATA3 DECIMAL (18, 9),
	@DATA4 DECIMAL (18, 9),
	@DATA5 DECIMAL (18, 9),
	@DATA6 DECIMAL (18, 9),
	@NEW_OUTCOME_ID INT OUTPUT
)

As

SET NOCOUNT ON
	
	INSERT INTO TB_ITEM_OUTCOME
	(	ITEM_SET_ID
	,	OUTCOME_TYPE_ID
	,	ITEM_ATTRIBUTE_ID_INTERVENTION
	,	ITEM_ATTRIBUTE_ID_CONTROL
	,	ITEM_ATTRIBUTE_ID_OUTCOME
	,	OUTCOME_TITLE
	,	DATA1
	,	DATA2
	,	DATA3
	,	DATA4
	,	DATA5
	,	DATA6
	)	
	VALUES
	(
		@ITEM_SET_ID
	,	@OUTCOME_TYPE_ID
	,	@ITEM_ATTRIBUTE_ID_INTERVENTION
	,	@ITEM_ATTRIBUTE_ID_CONTROL
	,	@ITEM_ATTRIBUTE_ID_OUTCOME
	,	@OUTCOME_TITLE
	,	@DATA1
	,	@DATA2
	,	@DATA3
	,	@DATA4
	,	@DATA5
	,	@DATA6
	)
	-- Get the identity and return it
	SET @NEW_OUTCOME_ID = @@identity

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_OutcomeItemDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[st_OutcomeItemDelete] 
	-- Add the parameters for the stored procedure here
	
	@OUTCOME_ID INT
AS
BEGIN
	DELETE FROM TB_ITEM_OUTCOME WHERE OUTCOME_ID = @OUTCOME_ID
END
GO
/****** Object:  StoredProcedure [dbo].[st_ReportExecute]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[st_ReportExecute]
(
	@REVIEW_ID INT
,	@ITEM_IDS NVARCHAR(MAX)
,	@REPORT_ID INT
,	@ORDER_BY NVARCHAR(10)

)
AS
SET NOCOUNT ON

SELECT * FROM TB_REPORT_COLUMN WHERE REPORT_ID = @REPORT_ID
ORDER BY COLUMN_ORDER

select TB_ITEM_ATTRIBUTE.ITEM_ID, OLD_ITEM_ID, SHORT_TITLE, TB_REPORT_COLUMN_CODE.REPORT_COLUMN_ID,
	REPORT_COLUMN_CODE_ID, COLUMN_ORDER, USER_DEF_TEXT, ATTRIBUTE_NAME, ADDITIONAL_TEXT,
	DISPLAY_CODE, DISPLAY_ADDITIONAL_TEXT, DISPLAY_CODED_TEXT, REPORT_COLUMN_NAME

FROM TB_REPORT_COLUMN_CODE
INNER JOIN TB_REPORT_COLUMN ON TB_REPORT_COLUMN.REPORT_COLUMN_ID = TB_REPORT_COLUMN_CODE.REPORT_COLUMN_ID
INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID = TB_REPORT_COLUMN_CODE.ATTRIBUTE_ID
	AND TB_ATTRIBUTE_SET.SET_ID = TB_REPORT_COLUMN_CODE.SET_ID
INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
	AND TB_ITEM_SET.IS_COMPLETED = 'TRUE'
INNER JOIN TB_ITEM ON TB_ITEM.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
	AND TB_ITEM_REVIEW.IS_DELETED != 'TRUE'
INNER JOIN dbo.fn_Split_int(@ITEM_IDS, ',') attribute_list ON attribute_list.value = TB_ITEM_ATTRIBUTE.ITEM_ID

ORDER BY CASE WHEN
	@ORDER_BY = 'Short title' THEN TB_ITEM.SHORT_TITLE WHEN
	@ORDER_BY = 'Item Id' THEN TB_ITEM_ATTRIBUTE.ITEM_ID ELSE
	TB_ITEM.OLD_ITEM_ID END, COLUMN_ORDER, CODE_ORDER




SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportDelete]    Script Date: 05/20/2010 16:26:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ReportDelete]
(
	@REPORT_ID INT
)

As

SET NOCOUNT ON

	DELETE FROM TB_REPORT_COLUMN_CODE WHERE REPORT_ID = @REPORT_ID
	DELETE FROM TB_REPORT_COLUMN WHERE REPORT_ID = @REPORT_ID
	DELETE FROM TB_REPORT WHERE REPORT_ID = @REPORT_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportColumnDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ReportColumnDelete]
(
	@REPORT_ID INT
)

As

SET NOCOUNT ON

	DELETE FROM TB_REPORT_COLUMN_CODE WHERE REPORT_ID = @REPORT_ID
	DELETE FROM TB_REPORT_COLUMN WHERE REPORT_ID = @REPORT_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportColumnCodeList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ReportColumnCodeList]
(
	@REPORT_COLUMN_ID INT
)

As

SET NOCOUNT ON

	SELECT * FROM TB_REPORT_COLUMN_CODE
		WHERE REPORT_COLUMN_ID = @REPORT_COLUMN_ID
		ORDER BY CODE_ORDER

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ReportColumnCodeInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[st_ReportColumnCodeInsert]
(
	@REPORT_ID INT,
	@REPORT_COLUMN_ID INT,
	@CODE_ORDER INT,
	@SET_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@PARENT_ATTRIBUTE_ID BIGINT,
	@PARENT_ATTRIBUTE_TEXT NVARCHAR(255),
	@USER_DEF_TEXT NVARCHAR(255),
	@DISPLAY_CODE BIT,
	@DISPLAY_ADDITIONAL_TEXT BIT,
	@DISPLAY_CODED_TEXT BIT
)

As

SET NOCOUNT ON

	INSERT INTO TB_REPORT_COLUMN_CODE(REPORT_ID, REPORT_COLUMN_ID, CODE_ORDER, SET_ID, ATTRIBUTE_ID, PARENT_ATTRIBUTE_ID,
		PARENT_ATTRIBUTE_TEXT, USER_DEF_TEXT, DISPLAY_CODE, DISPLAY_ADDITIONAL_TEXT, DISPLAY_CODED_TEXT)
	VALUES (@REPORT_ID, @REPORT_COLUMN_ID, @CODE_ORDER, @SET_ID, @ATTRIBUTE_ID, @PARENT_ATTRIBUTE_ID,
		@PARENT_ATTRIBUTE_TEXT, @USER_DEF_TEXT, @DISPLAY_CODE, @DISPLAY_ADDITIONAL_TEXT, @DISPLAY_CODED_TEXT)
	
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_RandomAllocate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[st_RandomAllocate]
(
	@REVIEW_ID INT,
	@CONTACT_ID INT,
	@FILTER_TYPE NVARCHAR(255),
	@ATTRIBUTE_ID_FILTER BIGINT,
	@SET_ID_FILTER INT,
	@ATTRIBUTE_ID BIGINT,
	@SET_ID INT,
	@HOW_MANY INT
)
AS
SET NOCOUNT ON

	-- FIRST, GET A LIST OF ALL THE ITEM_IDs THAT WE'RE WORKING WITH BY USING THE VARIOUS FILTER OPTIONS
	declare @ItemIds TABLE (idx BIGINT Primary Key)
	
	-- FILTER BY ALL EXCLUDED
	IF (@FILTER_TYPE = 'All excluded')
	BEGIN
	INSERT INTO @ItemIds(idx)
		SELECT DISTINCT ITEM_ID FROM TB_ITEM_REVIEW
			WHERE TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID AND TB_ITEM_REVIEW.IS_INCLUDED = 'FALSE'
	END
	
	-- FILTER BY ALL WITH THIS ATTRIBUTE
	IF (@FILTER_TYPE = 'With this code')
	BEGIN
	INSERT INTO @ItemIds(idx)
		SELECT DISTINCT TB_ITEM_ATTRIBUTE.ITEM_ID FROM TB_ITEM_ATTRIBUTE
			INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
			WHERE TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = @ATTRIBUTE_ID_FILTER
	END
		
	-- FILTER BY ALL WITHOUT THIS ATTRIBUTE
	IF (@FILTER_TYPE = 'Without this code')
	BEGIN
	INSERT INTO @ItemIds(idx)
		SELECT DISTINCT ITEM_ID FROM TB_ITEM_REVIEW
			WHERE TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		EXCEPT
			SELECT TB_ITEM_ATTRIBUTE.ITEM_ID FROM TB_ITEM_ATTRIBUTE
			INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
			WHERE TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = @ATTRIBUTE_ID_FILTER
	END
	
	-- FILTER BY 'ALL WITHOUT ANY CODES FROM THIS SET'
	IF (@FILTER_TYPE = 'Not in this set')
	BEGIN
	INSERT INTO @ItemIds(idx)
		SELECT DISTINCT ITEM_ID FROM TB_ITEM_REVIEW
			WHERE TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		EXCEPT
			SELECT TB_ITEM_SET.ITEM_ID FROM TB_ITEM_SET
			INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_SET.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
			WHERE TB_ITEM_SET.SET_ID = @SET_ID_FILTER
	END
	
	-- NOW WE HAVE OUR LIST, CHECK THAT THERE ARE ENOUGH ITEM IDs IN IT
	DECLARE @CHECK_COUNT INT
	SELECT @CHECK_COUNT = COUNT(*) FROM @ItemIds

	IF (@CHECK_COUNT > @HOW_MANY)
	BEGIN
		-- ATTRIBUTE_IDs FOR OUR NEW ATTRIBUTES
		DECLARE @GROUP1 BIGINT
		DECLARE @GROUP2 BIGINT
		DECLARE @GROUP3 BIGINT
		DECLARE @GROUP4 BIGINT
		DECLARE @GROUP5 BIGINT
		DECLARE @DUMMY_OUTPUT BIGINT -- WE'RE NOT INTERESTED IN THIS VALUE
		
		EXECUTE st_AttributeSetInsert @SET_ID, @ATTRIBUTE_ID, 1, '', 1, 'Group 1', '', @CONTACT_ID, @NEW_ATTRIBUTE_SET_ID = @DUMMY_OUTPUT OUTPUT, @NEW_ATTRIBUTE_ID = @GROUP1 OUTPUT
		EXECUTE st_AttributeSetInsert @SET_ID, @ATTRIBUTE_ID, 1, '', 2, 'Group 2', '', @CONTACT_ID, @NEW_ATTRIBUTE_SET_ID = @DUMMY_OUTPUT OUTPUT, @NEW_ATTRIBUTE_ID = @GROUP2 OUTPUT
		
		IF (@HOW_MANY > 2)
		BEGIN
			EXECUTE st_AttributeSetInsert @SET_ID, @ATTRIBUTE_ID, 1, '', 3, 'Group 3', '', @CONTACT_ID, @NEW_ATTRIBUTE_SET_ID = @DUMMY_OUTPUT OUTPUT, @NEW_ATTRIBUTE_ID = @GROUP3 OUTPUT
		END
		IF (@HOW_MANY > 3)
		BEGIN
			EXECUTE st_AttributeSetInsert @SET_ID, @ATTRIBUTE_ID, 1, '', 4, 'Group 4', '', @CONTACT_ID, @NEW_ATTRIBUTE_SET_ID = @DUMMY_OUTPUT OUTPUT, @NEW_ATTRIBUTE_ID = @GROUP4 OUTPUT
		END
		IF (@HOW_MANY > 4)
		BEGIN
			EXECUTE st_AttributeSetInsert @SET_ID, @ATTRIBUTE_ID, 1, '', 5, 'Group 5', '', @CONTACT_ID, @NEW_ATTRIBUTE_SET_ID = @DUMMY_OUTPUT OUTPUT, @NEW_ATTRIBUTE_ID = @GROUP5 OUTPUT
		END
	
		-- NOW WE DO THE ACTUAL INPUTTING OF VALUES
		-- FIRST, WE HAVE TO CREATE ITEM_SET RECORDS FOR ALL OF THE ITEMS
		
		INSERT INTO TB_ITEM_SET(ITEM_ID, SET_ID, IS_COMPLETED, CONTACT_ID)
		SELECT idx, @SET_ID, 'True', @CONTACT_ID FROM @ItemIds ids
			WHERE NOT idx IN 
			(SELECT ITEM_ID FROM TB_ITEM_SET WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID)
	
		-- NOW WE HAVE ITEM_SET RECORDS FOR EVERYTHING, WE ASSIGN THE ITEMS TO A GIVEN ATTRIBUTE AT RANDOM
		
		IF (@HOW_MANY = 2)
		BEGIN
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (50) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP1 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				ORDER BY NEWID()
				
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP2 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1)
		END
		
		IF (@HOW_MANY = 3)
		BEGIN
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (33) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP1 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				ORDER BY NEWID()
		
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (50) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP2 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1)
				ORDER BY NEWID()
				
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP3 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1 OR ATTRIBUTE_ID = @GROUP2)
		END
		
		IF (@HOW_MANY = 4)
		BEGIN
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (25) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP1 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				ORDER BY NEWID()
		
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (33) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP2 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1)
				ORDER BY NEWID()
				
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (50) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP3 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1 or ATTRIBUTE_ID = @GROUP2)
				ORDER BY NEWID()
				
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP4 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1 OR ATTRIBUTE_ID = @GROUP2 or @ATTRIBUTE_ID = @GROUP3)
		END
		
		IF (@HOW_MANY = 5)
		BEGIN
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (20) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP1 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				ORDER BY NEWID()
		
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (25) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP2 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1)
				ORDER BY NEWID()
				
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (33) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP3 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1 or ATTRIBUTE_ID = @GROUP2)
				ORDER BY NEWID()
				
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT TOP (50) PERCENT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP4 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1 or ATTRIBUTE_ID = @GROUP2 or ATTRIBUTE_ID = @GROUP3)
				ORDER BY NEWID()
				
			INSERT INTO TB_ITEM_ATTRIBUTE(ITEM_ID, ITEM_SET_ID, ATTRIBUTE_ID)
				SELECT idx, TB_ITEM_SET.ITEM_SET_ID, @GROUP5 FROM @ItemIds ids
				INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_ID = ids.idx
				WHERE TB_ITEM_SET.SET_ID = @SET_ID AND TB_ITEM_SET.CONTACT_ID = @CONTACT_ID
				AND NOT idx IN (SELECT ITEM_ID FROM TB_ITEM_ATTRIBUTE WHERE ATTRIBUTE_ID = @GROUP1 OR ATTRIBUTE_ID = @GROUP2 or ATTRIBUTE_ID = @GROUP3 OR ATTRIBUTE_ID = @GROUP4)
		END
	
	END

SET NOCOUNT OFF

	RETURN
GO
/****** Object:  StoredProcedure [dbo].[st_OutcomeList]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_OutcomeList]
(
	@REVIEW_ID INT,
	@SET_ID BIGINT,
	@ITEM_ATTRIBUTE_ID_INTERVENTION BIGINT = NULL,
	@ITEM_ATTRIBUTE_ID_CONTROL BIGINT = NULL,
	@ITEM_ATTRIBUTE_ID_OUTCOME BIGINT = NULL,
	@ATTRIBUTE_ID BIGINT = NULL,
	@META_ANALYSIS_ID INT = NULL
)

As

	IF (@ITEM_ATTRIBUTE_ID_INTERVENTION = 0)
	BEGIN
		SET @ITEM_ATTRIBUTE_ID_INTERVENTION = NULL
	END
	
	IF (@ITEM_ATTRIBUTE_ID_CONTROL = 0)
	BEGIN
		SET @ITEM_ATTRIBUTE_ID_CONTROL = NULL
	END
	
	IF (@ITEM_ATTRIBUTE_ID_OUTCOME = 0)
	BEGIN
		SET @ITEM_ATTRIBUTE_ID_OUTCOME = NULL
	END
	
	IF (@ATTRIBUTE_ID = 0)
	BEGIN
		SET @ATTRIBUTE_ID = NULL
	END
	
	IF (@SET_ID = 0)
	BEGIN
		SET @SET_ID = NULL
	END

SET NOCOUNT ON

SELECT distinct TB_ITEM_OUTCOME.OUTCOME_ID, TB_ITEM_OUTCOME.ITEM_SET_ID, OUTCOME_TYPE_ID, ITEM_ATTRIBUTE_ID_INTERVENTION,
	ITEM_ATTRIBUTE_ID_CONTROL, ITEM_ATTRIBUTE_ID_OUTCOME, OUTCOME_TITLE,
	DATA1, DATA2, DATA3, DATA4, DATA5, DATA6, TB_META_ANALYSIS_OUTCOME.META_ANALYSIS_OUTCOME_ID, TB_ITEM_SET.ITEM_SET_ID,
	TB_ITEM_ATTRIBUTE.ITEM_ID, '' INTERVENTION_TEXT, '' CONTROL_TEXT, '' OUTCOME_TEXT
	
	FROM TB_ITEM_OUTCOME

	inner join TB_ITEM_SET on tb_item_set.ITEM_SET_ID = TB_ITEM_OUTCOME.ITEM_SET_ID
	inner join TB_ITEM_REVIEW on tb_item_review.ITEM_ID = tb_item_set.ITEM_ID
	inner JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_SET_ID = tb_item_set.ITEM_SET_ID
	
	LEFT OUTER JOIN TB_META_ANALYSIS_OUTCOME ON TB_META_ANALYSIS_OUTCOME.OUTCOME_ID = TB_ITEM_OUTCOME.OUTCOME_ID
		AND TB_META_ANALYSIS_OUTCOME.META_ANALYSIS_ID = @META_ANALYSIS_ID
	
	WHERE TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
	AND (@ITEM_ATTRIBUTE_ID_INTERVENTION IS NULL OR (ITEM_ATTRIBUTE_ID_INTERVENTION = @ITEM_ATTRIBUTE_ID_INTERVENTION))
	AND (@ITEM_ATTRIBUTE_ID_CONTROL IS NULL OR (ITEM_ATTRIBUTE_ID_CONTROL = @ITEM_ATTRIBUTE_ID_CONTROL))
	AND (@ITEM_ATTRIBUTE_ID_OUTCOME IS NULL OR (ITEM_ATTRIBUTE_ID_OUTCOME = @ITEM_ATTRIBUTE_ID_OUTCOME))
	AND (@ATTRIBUTE_ID IS NULL OR (TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = @ATTRIBUTE_ID))
	AND (@SET_ID IS NULL OR (TB_ITEM_SET.SET_ID = @SET_ID))
	
	--order by TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_MetaAnalysisUpdate]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_MetaAnalysisUpdate]
(
	@META_ANALYSIS_ID INT,
	@TITLE NVARCHAR(255),
	@CONTACT_ID INT,
	@REVIEW_ID INT,
	@ATTRIBUTE_ID BIGINT = NULL,
	@SET_ID INT = NULL,
	@ATTRIBUTE_ID_INTERVENTION BIGINT,
	@ATTRIBUTE_ID_CONTROL BIGINT,
	@ATTRIBUTE_ID_OUTCOME BIGINT,
	@OUTCOME_IDS nvarchar(max),
	@META_ANALYSIS_TYPE_ID INT
)

As

SET NOCOUNT ON
	
	UPDATE TB_META_ANALYSIS
	SET	META_ANALYSIS_TITLE = @TITLE
	,	CONTACT_ID = @CONTACT_ID
	,	REVIEW_ID = @REVIEW_ID
	,	ATTRIBUTE_ID = @ATTRIBUTE_ID
	,	SET_ID = @SET_ID
	,	ATTRIBUTE_ID_INTERVENTION = @ATTRIBUTE_ID_INTERVENTION
	,	ATTRIBUTE_ID_CONTROL = @ATTRIBUTE_ID_CONTROL
	,	ATTRIBUTE_ID_OUTCOME = @ATTRIBUTE_ID_OUTCOME
	,	META_ANALYSIS_TYPE_ID = @META_ANALYSIS_TYPE_ID
	
	WHERE META_ANALYSIS_ID = @META_ANALYSIS_ID
	
	DELETE FROM TB_META_ANALYSIS_OUTCOME WHERE META_ANALYSIS_ID = @META_ANALYSIS_ID
	
	IF (@OUTCOME_IDS != '')
	BEGIN
		INSERT INTO TB_META_ANALYSIS_OUTCOME (META_ANALYSIS_ID, OUTCOME_ID)
		SELECT @META_ANALYSIS_ID, VALUE from DBO.fn_Split_int(@OUTCOME_IDS, ',')
	END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_MetaAnalysisInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_MetaAnalysisInsert]
(
	@TITLE NVARCHAR(255),
	@CONTACT_ID INT,
	@REVIEW_ID INT,
	@ATTRIBUTE_ID BIGINT = NULL,
	@SET_ID INT = NULL,
	@ATTRIBUTE_ID_INTERVENTION BIGINT,
	@ATTRIBUTE_ID_CONTROL BIGINT,
	@ATTRIBUTE_ID_OUTCOME BIGINT,
	@META_ANALYSIS_TYPE_ID INT,
	@OUTCOME_IDS nvarchar(max),
	@NEW_META_ANALYSIS_ID INT OUTPUT
)

As

SET NOCOUNT ON
	
	INSERT INTO TB_META_ANALYSIS
	(	META_ANALYSIS_TITLE
	,	CONTACT_ID
	,	REVIEW_ID
	,	ATTRIBUTE_ID
	,	SET_ID
	,	ATTRIBUTE_ID_INTERVENTION
	,	ATTRIBUTE_ID_CONTROL
	,	ATTRIBUTE_ID_OUTCOME
	,	META_ANALYSIS_TYPE_ID
	)	
	VALUES
	(
		@TITLE
	,	@CONTACT_ID
	,	@REVIEW_ID
	,	@ATTRIBUTE_ID
	,	@SET_ID
	,	@ATTRIBUTE_ID_INTERVENTION
	,	@ATTRIBUTE_ID_CONTROL
	,	@ATTRIBUTE_ID_OUTCOME
	,	@META_ANALYSIS_TYPE_ID
	)
	-- Get the identity and return it
	SET @NEW_META_ANALYSIS_ID = @@identity
	
	IF (@OUTCOME_IDS != '')
	BEGIN
		INSERT INTO TB_META_ANALYSIS_OUTCOME (META_ANALYSIS_ID, OUTCOME_ID)
		SELECT @NEW_META_ANALYSIS_ID, VALUE from DBO.fn_Split_int(@OUTCOME_IDS, ',')
	END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemScreenNext]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[st_ItemScreenNext]
(
	@REVIEW_ID INT,
	-- @CURRENT_ITEM_ID BIGINT, Can't remember why this parameter is there
	@SHOW_PREVIOUSLY_SCREENED BIT = 'false',
	@SET_ID INT, -- NEEDED, AS CONTACT_ID IS SIGNIFICANT SOMETIMES (IN DOUBLE SCREENING IT IS)
	@IS_CODING_FINAL BIT, -- TRUE / FALSE - DEPENDS ON THE SET_ID IN THE GIVEN REVIEW
	@CONTACT_ID INT,
	@ATTRIBUTE_SET_ID BIGINT = 0 -- SCREENING A PARTICULAR GROUP OF STUDIES, OR ALL?
)

/* Returns the next item to be screened by a reviewer. The set of documents to select within can either be a 'group' - i.e. those coded with
a given attribute, or all in the review. (Specific 'groups' can be assigned to particular reviewers for screening.)

First we decide which set of items we are selecting from - all in review, or those assigned with a particular attribute.

We also need to return either those items already screened, or all items (depending on user choice).
*/

As

SET NOCOUNT ON

IF (@ATTRIBUTE_SET_ID = 0) /* SELECT FROM ALL ITEMS IN THE REVIEW */
BEGIN

	IF (@SHOW_PREVIOUSLY_SCREENED = 'True')
	BEGIN
	-- First, just grab all the usual fields for item information
	SELECT TOP (1) I.ITEM_ID, I.[TYPE_ID], [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
		TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY
		[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
		AVAILABILITY, URL, ABSTRACT, COMMENTS
	FROM TB_ITEM I

	-- Limit to a given review
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID

	ORDER BY NEWID()

	END
	ELSE
	BEGIN
	-- First, just grab all the usual fields for item information
	SELECT TOP(1) I.ITEM_ID, I.[TYPE_ID], [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
		TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY
		[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
		AVAILABILITY, URL, ABSTRACT, COMMENTS
	FROM TB_ITEM I

	-- Limit to a given review
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID

	-- Limit to items not already coded with a given code set
	WHERE I.ITEM_ID IN (SELECT * FROM dbo.fn_ItemsSetUncoded(@REVIEW_ID, @SET_ID, @IS_CODING_FINAL, @CONTACT_ID))

	ORDER BY NEWID()

	END
END
ELSE
BEGIN

	IF (@SHOW_PREVIOUSLY_SCREENED = 'True')
	BEGIN
	-- First, just grab all the usual fields for item information
	SELECT TOP(1) I.ITEM_ID, I.[TYPE_ID], [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
		TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY
		[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
		AVAILABILITY, URL, ABSTRACT, COMMENTS
	FROM TB_ITEM I

	-- Limit to a given review
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID

	-- Limit to a given attribute
	INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_ID = I.ITEM_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
		AND TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
	
	ORDER BY NEWID()

	END
	ELSE
	BEGIN
	-- First, just grab all the usual fields for item information
	SELECT TOP(1) I.ITEM_ID, I.[TYPE_ID], [dbo].fn_REBUILD_AUTHORS(I.ITEM_ID, 0) as AUTHORS,
		TITLE, PARENT_TITLE, SHORT_TITLE, DATE_CREATED, CREATED_BY, DATE_EDITED, EDITED_BY
		[YEAR], [MONTH], STANDARD_NUMBER, CITY, COUNTRY, PUBLISHER, INSTITUTION, VOLUME, PAGES, EDITION, ISSUE, IS_LOCAL,
		AVAILABILITY, URL, ABSTRACT, COMMENTS
	FROM TB_ITEM I

	-- Limit to a given review
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = I.ITEM_ID AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID

	-- Limit to a given attribute
	INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_ID = I.ITEM_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
		AND TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

	-- Limit to items not already coded with a given code set
	WHERE I.ITEM_ID IN (SELECT * FROM dbo.fn_ItemsSetUncoded(@REVIEW_ID, @SET_ID, @IS_CODING_FINAL, @CONTACT_ID))

	ORDER BY NEWID()

	END
END

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDocumentDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Sergio
-- Create date: 
-- Description:	Delete An ItemDocument and associated Item_Attribute_Text
-- =============================================
CREATE PROCEDURE [dbo].[st_ItemDocumentDelete] 
	-- Add the parameters for the stored procedure here
	@DocID bigint = 0
AS
BEGIN
BEGIN TRY
	BEGIN TRANSACTION
	delete from TB_ITEM_ATTRIBUTE_TEXT where ITEM_DOCUMENT_ID = @DocID
	delete from tb_ITEM_DOCUMENT where ITEM_DOCUMENT_ID = @DocID
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeTextInsert]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[st_ItemAttributeTextInsert]
(
	@ITEM_ATTRIBUTE_ID BIGINT,
	@ITEM_DOCUMENT_ID BIGINT,
	@START_AT INT,
	@END_AT INT
)
AS
SET NOCOUNT ON

	DECLARE @MIN_START bigint
	DECLARE @MAX_END bigint
	DECLARE @ITEM_ATTRIBUTE_TEXT_ID BIGINT
	DECLARE @CHECK_COUNT INT

	-- FIRST CHECK THAT WE HAVEN'T ALREADY GOT A CODE COVERING THIS
	SELECT @CHECK_COUNT = COUNT(*) FROM TB_ITEM_ATTRIBUTE_TEXT
		WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
		AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
		AND (TEXT_FROM <= @START_AT AND TEXT_TO >= @END_AT)

	IF (@CHECK_COUNT > 0)
		RETURN -- NO NEED TO GO ANY FURTHER: THERE IS A CODE THAT COVERS THIS ALREADY

   -- OVERLAPPING AT THE BEGINNING
	SELECT @MIN_START = TEXT_FROM, @MAX_END = TEXT_TO, @ITEM_ATTRIBUTE_TEXT_ID = ITEM_ATTRIBUTE_TEXT_ID
		FROM TB_ITEM_ATTRIBUTE_TEXT
		WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
		AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
		AND (TEXT_FROM <= @START_AT AND TEXT_TO >= @START_AT)
	IF (@MIN_START != NULL AND @MAX_END != NULL)
	BEGIN
		UPDATE TB_ITEM_ATTRIBUTE_TEXT
			SET TEXT_FROM = CASE WHEN @MIN_START < @START_AT THEN @MIN_START ELSE @START_AT END,
				TEXT_TO = CASE WHEN @MAX_END > @END_AT THEN @MAX_END ELSE @END_AT END
			WHERE ITEM_ATTRIBUTE_TEXT_ID = @ITEM_ATTRIBUTE_TEXT_ID
	END
	ELSE
	BEGIN
		-- OVERLAPPING AT THE END
		SELECT @MIN_START = TEXT_FROM, @MAX_END = TEXT_TO, @ITEM_ATTRIBUTE_TEXT_ID = ITEM_ATTRIBUTE_TEXT_ID
			FROM TB_ITEM_ATTRIBUTE_TEXT
			WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
			AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
			AND (TEXT_FROM <= @END_AT AND TEXT_TO >= @END_AT)
		IF (@MIN_START != NULL AND @MAX_END != NULL)
		BEGIN
			UPDATE TB_ITEM_ATTRIBUTE_TEXT
				SET TEXT_FROM = CASE WHEN @MIN_START < @START_AT THEN @MIN_START ELSE @START_AT END,
					TEXT_TO = CASE WHEN @MAX_END > @END_AT THEN @MAX_END ELSE @END_AT END
				WHERE ITEM_ATTRIBUTE_TEXT_ID = @ITEM_ATTRIBUTE_TEXT_ID
		END
		ELSE
		BEGIN
			-- OVERLAPPING AT BOTH ENDS
			SELECT @MIN_START = TEXT_FROM, @MAX_END = TEXT_TO, @ITEM_ATTRIBUTE_TEXT_ID = ITEM_ATTRIBUTE_TEXT_ID
				FROM TB_ITEM_ATTRIBUTE_TEXT
				WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
				AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
				AND (TEXT_FROM <= @START_AT AND TEXT_TO >= @END_AT)
			IF (@MIN_START != NULL AND @MAX_END != NULL)
			BEGIN
				UPDATE TB_ITEM_ATTRIBUTE_TEXT
					SET TEXT_FROM = CASE WHEN @MIN_START < @START_AT THEN @MIN_START ELSE @START_AT END,
						TEXT_TO = CASE WHEN @MAX_END > @END_AT THEN @MAX_END ELSE @END_AT END
					WHERE ITEM_ATTRIBUTE_TEXT_ID = @ITEM_ATTRIBUTE_TEXT_ID
			END
			ELSE
			BEGIN
				-- NOT OVERLAPPING ANYWHERE = NEW INSERT
				INSERT INTO TB_ITEM_ATTRIBUTE_TEXT (ITEM_DOCUMENT_ID, ITEM_ATTRIBUTE_ID, TEXT_FROM, TEXT_TO)
				VALUES (@ITEM_DOCUMENT_ID, @ITEM_ATTRIBUTE_ID, @START_AT, @END_AT)
			END
		END
	END
	


/*
	SELECT @MIN_START = MIN(TEXT_FROM), @MAX_END = MAX(TEXT_TO) FROM TB_ITEM_ATTRIBUTE_TEXT
		WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
		AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
		AND
		(
			(TEXT_FROM <= @START_AT AND TEXT_TO >= @START_AT) OR
			(TEXT_FROM <= @END_AT AND TEXT_TO > @END_AT) OR
			(TEXT_TO > @START_AT AND TEXT_TO < @END_AT)
		)

	IF ((@MIN_START != NULL) AND (@MIN_START < @START_AT))
	BEGIN
		SET @START_AT = @MIN_START
	END
	IF ((@MAX_END != NULL) AND (@MAX_END > @END_AT))
	BEGIN
		SET @END_AT = @MAX_END
	END

	DELETE FROM TB_ITEM_ATTRIBUTE_TEXT
	WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
		AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
		AND (TEXT_FROM >= @START_AT AND TEXT_TO <= @END_AT)

	INSERT INTO TB_ITEM_ATTRIBUTE_TEXT (ITEM_DOCUMENT_ID, ITEM_ATTRIBUTE_ID, TEXT_FROM, TEXT_TO)
	VALUES (@ITEM_DOCUMENT_ID, @ITEM_ATTRIBUTE_ID, @START_AT, @END_AT)

*/


SET NOCOUNT OFF
	RETURN
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeTextDelete]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[st_ItemAttributeTextDelete]
(
	@ITEM_ATTRIBUTE_ID BIGINT,
	@ITEM_DOCUMENT_ID BIGINT,
	@START_AT INT,
	@END_AT INT
)
AS
--SET NOCOUNT ON

	DECLARE @STORED_START int
	DECLARE @STORED_END int

	-- FIRST DELETE ALL CODES THAT LIE ENTIRELY INSIDE THE SELECTED SECTION
	DELETE FROM TB_ITEM_ATTRIBUTE_TEXT
		WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
		AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
		AND (TEXT_FROM >=  @START_AT AND TEXT_TO <= @END_AT)
	
	SET @STORED_START = NULL

	SELECT  @STORED_START = TEXT_FROM, @STORED_END = TEXT_TO FROM TB_ITEM_ATTRIBUTE_TEXT
		WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
		AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
		AND (TEXT_FROM <  @START_AT AND TEXT_TO > @END_AT)

	IF (@STORED_START != NULL) -- WE'RE DELETING A SECTION WITHIN A CURRENT CODE
	BEGIN
		UPDATE TB_ITEM_ATTRIBUTE_TEXT
			SET TEXT_TO = @START_AT
			WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
			AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
			AND (TEXT_FROM = @STORED_START AND TEXT_TO = @STORED_END)

		INSERT INTO TB_ITEM_ATTRIBUTE_TEXT(ITEM_DOCUMENT_ID, ITEM_ATTRIBUTE_ID, TEXT_FROM, TEXT_TO)
		VALUES (@ITEM_DOCUMENT_ID, @ITEM_ATTRIBUTE_ID, @END_AT, @STORED_END)

	END
	ELSE
	BEGIN

		-- OVERLAPPING AT START
		UPDATE TB_ITEM_ATTRIBUTE_TEXT
			SET TEXT_TO = @START_AT
			WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
			AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
			AND (TEXT_FROM  <=  @START_AT AND TEXT_TO <= @END_AT AND TEXT_TO > @START_AT)

		-- OVERLAPPING AT END
		UPDATE TB_ITEM_ATTRIBUTE_TEXT
			SET TEXT_FROM = @END_AT
			WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
			AND ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID
			AND (TEXT_FROM  >=  @START_AT AND TEXT_FROM <= @END_AT AND TEXT_TO > @END_AT)

	END

--SET NOCOUNT OFF
	RETURN
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeText]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[st_ItemAttributeText]
(
	@ITEM_ATTRIBUTE_ID BIGINT
)
AS
SET NOCOUNT ON

	SELECT ITEM_ATTRIBUTE_TEXT_ID,
		ITEM_DOCUMENT_ID,
		ITEM_ATTRIBUTE_ID,
		TEXT_FROM,
		TEXT_TO
	FROM TB_ITEM_ATTRIBUTE_TEXT
	WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
	ORDER BY TEXT_FROM
		


SET NOCOUNT OFF
	RETURN
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeTextAllItems]    Script Date: 05/20/2010 16:26:26 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[st_AttributeTextAllItems]
(
	@ATTRIBUTE_SET_ID BIGINT
)
AS
SET NOCOUNT ON


SELECT TB_ITEM.TITLE, TB_ITEM.ITEM_ID, TB_ITEM_DOCUMENT.ITEM_DOCUMENT_ID, DOCUMENT_TITLE, TEXT_FROM, TEXT_TO,
			SUBSTRING(TB_ITEM_DOCUMENT.DOCUMENT_TEXT, TEXT_FROM + 1, TEXT_TO 
				--+ (LEN(SUBSTRING(TB_ITEM_DOCUMENT.DOCUMENT_TEXT, TEXT_FROM, TEXT_TO + 1 - TEXT_FROM)) - 
				--	LEN(REPLACE(SUBSTRING(TB_ITEM_DOCUMENT.DOCUMENT_TEXT, TEXT_FROM, TEXT_TO + 1 - TEXT_FROM), CHAR(13), ''))) + 1 
			
			- TEXT_FROM) CODED_TEXT
		FROM tb_ITEM_ATTRIBUTE_TEXT 
		INNER JOIN tb_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE_TEXT.ITEM_ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ITEM_ATTRIBUTE_ID
		INNER JOIN TB_ITEM_DOCUMENT ON TB_ITEM_DOCUMENT.ITEM_DOCUMENT_ID = TB_ITEM_ATTRIBUTE_TEXT.ITEM_DOCUMENT_ID
		INNER JOIN TB_ITEM ON TB_ITEM.ITEM_ID = TB_ITEM_DOCUMENT.ITEM_ID
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
		INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
			AND TB_ATTRIBUTE_SET.ATTRIBUTE_ID = tb_ITEM_ATTRIBUTE.ATTRIBUTE_ID

		WHERE TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

	ORDER BY TB_ITEM.TITLE, ITEM_DOCUMENT_ID, TEXT_FROM


SET NOCOUNT OFF
	RETURN
GO
/****** Object:  Default [DF_TB_CONTACT_EXPIRY_DATE]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_CONTACT] ADD  CONSTRAINT [DF_TB_CONTACT_EXPIRY_DATE]  DEFAULT (dateadd(year,(1),getdate())) FOR [EXPIRY_DATE]
GO
/****** Object:  Default [DF_TB_CONTACT_MONTHS_CREDIT]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_CONTACT] ADD  CONSTRAINT [DF_TB_CONTACT_MONTHS_CREDIT]  DEFAULT ((0)) FOR [MONTHS_CREDIT]
GO
/****** Object:  Default [DF_TB_CONTACT_TYPE]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_CONTACT] ADD  CONSTRAINT [DF_TB_CONTACT_TYPE]  DEFAULT ('Professional') FOR [TYPE]
GO
/****** Object:  Default [DF_TB_CONTACT_IS_SITE_ADMIN]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_CONTACT] ADD  CONSTRAINT [DF_TB_CONTACT_IS_SITE_ADMIN]  DEFAULT ((0)) FOR [IS_SITE_ADMIN]
GO
/****** Object:  Default [DF__TB_IMPORT__START__7B47DA60]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__START__7B47DA60]  DEFAULT ('\\M\\w') FOR [STARTOFNEWREC]
GO
/****** Object:  Default [DF__TB_IMPORT__TYPEF__7C3BFE99]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__TYPEF__7C3BFE99]  DEFAULT ('\\M\\w') FOR [TYPEFIELD]
GO
/****** Object:  Default [DF__TB_IMPORT__START__7D3022D2]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__START__7D3022D2]  DEFAULT ('\\M\\w') FOR [STARTOFNEWFIELD]
GO
/****** Object:  Default [DF__TB_IMPORT__TITLE__7E24470B]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__TITLE__7E24470B]  DEFAULT ('\\M\\w') FOR [TITLE]
GO
/****** Object:  Default [DF__TB_IMPORT__PTITL__7F186B44]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__PTITL__7F186B44]  DEFAULT ('\\M\\w') FOR [PTITLE]
GO
/****** Object:  Default [DF__TB_IMPORT__SHORT__000C8F7D]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__SHORT__000C8F7D]  DEFAULT ('\\M\\w') FOR [SHORTTITLE]
GO
/****** Object:  Default [DF__TB_IMPORT___DATE__0100B3B6]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT___DATE__0100B3B6]  DEFAULT ('\\M\\w') FOR [DATE]
GO
/****** Object:  Default [DF__TB_IMPORT__MONTH__01F4D7EF]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__MONTH__01F4D7EF]  DEFAULT ('\\M\\w') FOR [MONTH]
GO
/****** Object:  Default [DF__TB_IMPORT__AUTHO__02E8FC28]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__AUTHO__02E8FC28]  DEFAULT ('\\M\\w') FOR [AUTHOR]
GO
/****** Object:  Default [DF__TB_IMPORT__PAREN__03DD2061]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__PAREN__03DD2061]  DEFAULT ('\\M\\w') FOR [PARENTAUTHOR]
GO
/****** Object:  Default [DF__TB_IMPORT__STAND__04D1449A]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__STAND__04D1449A]  DEFAULT ('\\M\\w') FOR [STANDARDN]
GO
/****** Object:  Default [DF__TB_IMPORT___CITY__05C568D3]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT___CITY__05C568D3]  DEFAULT ('\\M\\w') FOR [CITY]
GO
/****** Object:  Default [DF__TB_IMPORT__PUBLI__06B98D0C]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__PUBLI__06B98D0C]  DEFAULT ('\\M\\w') FOR [PUBLISHER]
GO
/****** Object:  Default [DF__TB_IMPORT__INSTI__07ADB145]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__INSTI__07ADB145]  DEFAULT ('\\M\\w') FOR [INSTITUTION]
GO
/****** Object:  Default [DF__TB_IMPORT__VOLUM__08A1D57E]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__VOLUM__08A1D57E]  DEFAULT ('\\M\\w') FOR [VOLUME]
GO
/****** Object:  Default [DF__TB_IMPORT__ISSUE__0995F9B7]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__ISSUE__0995F9B7]  DEFAULT ('\\M\\w') FOR [ISSUE]
GO
/****** Object:  Default [DF__TB_IMPORT__EDITI__0A8A1DF0]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__EDITI__0A8A1DF0]  DEFAULT ('\\M\\w') FOR [EDITION]
GO
/****** Object:  Default [DF__TB_IMPORT__START__0B7E4229]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__START__0B7E4229]  DEFAULT ('\\M\\w') FOR [STARTPAGE]
GO
/****** Object:  Default [DF__TB_IMPORT__ENDPA__0C726662]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__ENDPA__0C726662]  DEFAULT ('\\M\\w') FOR [ENDPAGE]
GO
/****** Object:  Default [DF__TB_IMPORT__PAGES__0D668A9B]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__PAGES__0D668A9B]  DEFAULT ('\\M\\w') FOR [PAGES]
GO
/****** Object:  Default [DF__TB_IMPORT__AVAIL__0E5AAED4]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__AVAIL__0E5AAED4]  DEFAULT ('\\M\\w') FOR [AVAILABILITY]
GO
/****** Object:  Default [DF__TB_IMPORT_F__URL__0F4ED30D]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT_F__URL__0F4ED30D]  DEFAULT ('\\M\\w') FOR [URL]
GO
/****** Object:  Default [DF__TB_IMPORT__ABSTR__1042F746]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__ABSTR__1042F746]  DEFAULT ('\\M\\w') FOR [ABSTRACT]
GO
/****** Object:  Default [DF_TB_IMPORT_FILTER_OLDITEMID]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF_TB_IMPORT_FILTER_OLDITEMID]  DEFAULT ('\\M\\w') FOR [OLD_ITEM_ID]
GO
/****** Object:  Default [DF__TB_IMPORT__NOTES__11371B7F]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__NOTES__11371B7F]  DEFAULT ('\\M\\w') FOR [NOTES]
GO
/****** Object:  Default [DF__TB_IMPORT__DEFAU__122B3FB8]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER] ADD  CONSTRAINT [DF__TB_IMPORT__DEFAU__122B3FB8]  DEFAULT ((12)) FOR [DEFAULTTYPECODE]
GO
/****** Object:  Default [DF_tb_ITEM_TYPE_ID]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_TYPE_ID]  DEFAULT ((0)) FOR [TYPE_ID]
GO
/****** Object:  Default [DF_tb_ITEM_TITLE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_TITLE]  DEFAULT ('') FOR [TITLE]
GO
/****** Object:  Default [DF_tb_ITEM_PARENT_TITLE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_PARENT_TITLE]  DEFAULT ('') FOR [PARENT_TITLE]
GO
/****** Object:  Default [DF_tb_ITEM_SHORT_TITLE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_SHORT_TITLE]  DEFAULT ('') FOR [SHORT_TITLE]
GO
/****** Object:  Default [DF_tb_ITEM_CREATED_BY]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_CREATED_BY]  DEFAULT ('') FOR [CREATED_BY]
GO
/****** Object:  Default [DF_tb_ITEM_YEAR]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_YEAR]  DEFAULT ((0)) FOR [YEAR]
GO
/****** Object:  Default [DF_tb_ITEM_MONTH]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_MONTH]  DEFAULT ((0)) FOR [MONTH]
GO
/****** Object:  Default [DF_tb_ITEM_STANDARD_NUMBER]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_STANDARD_NUMBER]  DEFAULT ('') FOR [STANDARD_NUMBER]
GO
/****** Object:  Default [DF_tb_ITEM_CITY]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_CITY]  DEFAULT ('') FOR [CITY]
GO
/****** Object:  Default [DF_tb_ITEM_COUNTRY]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_COUNTRY]  DEFAULT ('') FOR [COUNTRY]
GO
/****** Object:  Default [DF_tb_ITEM_PUBLISHER]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_PUBLISHER]  DEFAULT ('') FOR [PUBLISHER]
GO
/****** Object:  Default [DF_tb_ITEM_INSTITUTION]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_INSTITUTION]  DEFAULT ('') FOR [INSTITUTION]
GO
/****** Object:  Default [DF_tb_ITEM_VOLUME]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_VOLUME]  DEFAULT ('') FOR [VOLUME]
GO
/****** Object:  Default [DF_tb_ITEM_PAGES]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_PAGES]  DEFAULT ('') FOR [PAGES]
GO
/****** Object:  Default [DF_tb_ITEM_EDITION]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_EDITION]  DEFAULT ('') FOR [EDITION]
GO
/****** Object:  Default [DF_tb_ITEM_ISSUE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_ISSUE]  DEFAULT ('') FOR [ISSUE]
GO
/****** Object:  Default [DF_tb_ITEM_IS_LOCAL]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_IS_LOCAL]  DEFAULT ((0)) FOR [IS_LOCAL]
GO
/****** Object:  Default [DF_tb_ITEM_AVAILABILITY]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_AVAILABILITY]  DEFAULT ('') FOR [AVAILABILITY]
GO
/****** Object:  Default [DF_tb_ITEM_URL]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_URL]  DEFAULT ('') FOR [URL]
GO
/****** Object:  Default [DF_tb_ITEM_ABSTRACT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_ABSTRACT]  DEFAULT ('') FOR [ABSTRACT]
GO
/****** Object:  Default [DF_tb_ITEM_COMMENTS]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM] ADD  CONSTRAINT [DF_tb_ITEM_COMMENTS]  DEFAULT ('') FOR [COMMENTS]
GO
/****** Object:  Default [DF_tb_ITEM_AUTHORS_First]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_AUTHOR] ADD  CONSTRAINT [DF_tb_ITEM_AUTHORS_First]  DEFAULT ('') FOR [FIRST]
GO
/****** Object:  Default [DF_tb_ITEM_AUTHORS_Second]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_AUTHOR] ADD  CONSTRAINT [DF_tb_ITEM_AUTHORS_Second]  DEFAULT ('') FOR [SECOND]
GO
/****** Object:  Default [DF_tb_ITEM_AUTHOR_ORIGIN]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_AUTHOR] ADD  CONSTRAINT [DF_tb_ITEM_AUTHOR_ORIGIN]  DEFAULT ((0)) FOR [ROLE]
GO
/****** Object:  Default [DF_tb_ITEM_TYPE_DESCRIPTION]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_TYPE] ADD  CONSTRAINT [DF_tb_ITEM_TYPE_DESCRIPTION]  DEFAULT ('') FOR [DESCRIPTION]
GO
/****** Object:  Default [DF_tb_ITEM_TYPE_NOTES]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_TYPE] ADD  CONSTRAINT [DF_tb_ITEM_TYPE_NOTES]  DEFAULT ('') FOR [NOTES]
GO
/****** Object:  Default [DF_TB_REVIEW_EXPIRY_DATE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REVIEW] ADD  CONSTRAINT [DF_TB_REVIEW_EXPIRY_DATE]  DEFAULT (dateadd(year,(1),getdate())) FOR [EXPIRY_DATE]
GO
/****** Object:  Default [DF_TB_REVIEW_MONTHS_CREDIT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REVIEW] ADD  CONSTRAINT [DF_TB_REVIEW_MONTHS_CREDIT]  DEFAULT ((0)) FOR [MONTHS_CREDIT]
GO
/****** Object:  Default [DF_TB_SOURCE_IS_DELETED]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_IS_DELETED]  DEFAULT ((0)) FOR [IS_DELETED]
GO
/****** Object:  Default [DF_TB_SOURCE_DATE_OF_SEARCH]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_DATE_OF_SEARCH]  DEFAULT (getdate()) FOR [DATE_OF_SEARCH]
GO
/****** Object:  Default [DF_TB_SOURCE_DATE_OF_IMPORT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_DATE_OF_IMPORT]  DEFAULT (getdate()) FOR [DATE_OF_IMPORT]
GO
/****** Object:  Default [DF_TB_SOURCE_SOURCE_DATABASE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_SOURCE_DATABASE]  DEFAULT ('') FOR [SOURCE_DATABASE]
GO
/****** Object:  Default [DF_TB_SOURCE_SEARCH_DESCRIPTION]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_SEARCH_DESCRIPTION]  DEFAULT ('') FOR [SEARCH_DESCRIPTION]
GO
/****** Object:  Default [DF_TB_SOURCE_SEARCH_STRING]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_SEARCH_STRING]  DEFAULT ('') FOR [SEARCH_STRING]
GO
/****** Object:  Default [DF_TB_SOURCE_NOTES]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_NOTES]  DEFAULT ('') FOR [NOTES]
GO
/****** Object:  Default [DF_TB_SOURCE_IMPORT_FILTER_ID]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE] ADD  CONSTRAINT [DF_TB_SOURCE_IMPORT_FILTER_ID]  DEFAULT ([dbo].[fn_GetFirstImportFilterID]()) FOR [IMPORT_FILTER_ID]
GO
/****** Object:  Default [DF__tb_TEMP_I__TYPE___49C3F6B7]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_TEMP_ITEM] ADD  CONSTRAINT [DF__tb_TEMP_I__TYPE___49C3F6B7]  DEFAULT ((0)) FOR [TYPE_ID]
GO
/****** Object:  Default [DF_tb_TEMP_ITEM_HasData]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_TEMP_ITEM] ADD  CONSTRAINT [DF_tb_TEMP_ITEM_HasData]  DEFAULT (N'x') FOR [PubData]
GO
/****** Object:  Default [DF_tb_TEMP_ITEM_INSTITUTION]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_TEMP_ITEM] ADD  CONSTRAINT [DF_tb_TEMP_ITEM_INSTITUTION]  DEFAULT ('') FOR [INSTITUTION]
GO
/****** Object:  ForeignKey [FK_TB_ATTRIBUTE_tb_CONTACT]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_ATTRIBUTE]  WITH CHECK ADD  CONSTRAINT [FK_TB_ATTRIBUTE_tb_CONTACT] FOREIGN KEY([CONTACT_ID])
REFERENCES [dbo].[TB_CONTACT] ([CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_ATTRIBUTE] CHECK CONSTRAINT [FK_TB_ATTRIBUTE_tb_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_ATTRIBUTE_SET_TB_ATTRIBUTE]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_ATTRIBUTE_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_ATTRIBUTE_SET_TB_ATTRIBUTE] FOREIGN KEY([ATTRIBUTE_ID])
REFERENCES [dbo].[TB_ATTRIBUTE] ([ATTRIBUTE_ID])
GO
ALTER TABLE [dbo].[TB_ATTRIBUTE_SET] CHECK CONSTRAINT [FK_TB_ATTRIBUTE_SET_TB_ATTRIBUTE]
GO
/****** Object:  ForeignKey [FK_TB_ATTRIBUTE_SET_TB_ATTRIBUTE_TYPE]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_ATTRIBUTE_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_ATTRIBUTE_SET_TB_ATTRIBUTE_TYPE] FOREIGN KEY([ATTRIBUTE_TYPE_ID])
REFERENCES [dbo].[TB_ATTRIBUTE_TYPE] ([ATTRIBUTE_TYPE_ID])
GO
ALTER TABLE [dbo].[TB_ATTRIBUTE_SET] CHECK CONSTRAINT [FK_TB_ATTRIBUTE_SET_TB_ATTRIBUTE_TYPE]
GO
/****** Object:  ForeignKey [FK_TB_ATTRIBUTE_SET_TB_SETS]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_ATTRIBUTE_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_ATTRIBUTE_SET_TB_SETS] FOREIGN KEY([SET_ID])
REFERENCES [dbo].[TB_SET] ([SET_ID])
GO
ALTER TABLE [dbo].[TB_ATTRIBUTE_SET] CHECK CONSTRAINT [FK_TB_ATTRIBUTE_SET_TB_SETS]
GO
/****** Object:  ForeignKey [FK_TB_CONTACT_REVIEW_ROLE_TB_REVIEW_CONTACT]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_CONTACT_REVIEW_ROLE]  WITH CHECK ADD  CONSTRAINT [FK_TB_CONTACT_REVIEW_ROLE_TB_REVIEW_CONTACT] FOREIGN KEY([REVIEW_CONTACT_ID])
REFERENCES [dbo].[TB_REVIEW_CONTACT] ([REVIEW_CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_CONTACT_REVIEW_ROLE] CHECK CONSTRAINT [FK_TB_CONTACT_REVIEW_ROLE_TB_REVIEW_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_CONTACT_REVIEW_ROLE_TB_REVIEW_ROLE]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_CONTACT_REVIEW_ROLE]  WITH CHECK ADD  CONSTRAINT [FK_TB_CONTACT_REVIEW_ROLE_TB_REVIEW_ROLE] FOREIGN KEY([ROLE_NAME])
REFERENCES [dbo].[TB_REVIEW_ROLE] ([ROLE_NAME])
GO
ALTER TABLE [dbo].[TB_CONTACT_REVIEW_ROLE] CHECK CONSTRAINT [FK_TB_CONTACT_REVIEW_ROLE_TB_REVIEW_ROLE]
GO
/****** Object:  ForeignKey [FK_TB_DIAGRAM_tb_REVIEW]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_DIAGRAM]  WITH CHECK ADD  CONSTRAINT [FK_TB_DIAGRAM_tb_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_DIAGRAM] CHECK CONSTRAINT [FK_TB_DIAGRAM_tb_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_IMPORT_FILTER_TYPE_MAP_TB_IMPORT_FILTER]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER_TYPE_MAP]  WITH CHECK ADD  CONSTRAINT [FK_TB_IMPORT_FILTER_TYPE_MAP_TB_IMPORT_FILTER] FOREIGN KEY([IMPORT_FILTER_ID])
REFERENCES [dbo].[TB_IMPORT_FILTER] ([IMPORT_FILTER_ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TB_IMPORT_FILTER_TYPE_MAP] CHECK CONSTRAINT [FK_TB_IMPORT_FILTER_TYPE_MAP_TB_IMPORT_FILTER]
GO
/****** Object:  ForeignKey [FK_TB_IMPORT_FILTER_TYPE_RULE_TB_IMPORT_FILTER]    Script Date: 05/20/2010 16:26:29 ******/
ALTER TABLE [dbo].[TB_IMPORT_FILTER_TYPE_RULE]  WITH CHECK ADD  CONSTRAINT [FK_TB_IMPORT_FILTER_TYPE_RULE_TB_IMPORT_FILTER] FOREIGN KEY([IMPORT_FILTER_ID])
REFERENCES [dbo].[TB_IMPORT_FILTER] ([IMPORT_FILTER_ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TB_IMPORT_FILTER_TYPE_RULE] CHECK CONSTRAINT [FK_TB_IMPORT_FILTER_TYPE_RULE_TB_IMPORT_FILTER]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_ATTRIBUTE_TB_ATTRIBUTE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TB_ATTRIBUTE] FOREIGN KEY([ATTRIBUTE_ID])
REFERENCES [dbo].[TB_ATTRIBUTE] ([ATTRIBUTE_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE] CHECK CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TB_ATTRIBUTE]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_ATTRIBUTE_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE] CHECK CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_ATTRIBUTE_TB_ITEM_SET]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TB_ITEM_SET] FOREIGN KEY([ITEM_SET_ID])
REFERENCES [dbo].[TB_ITEM_SET] ([ITEM_SET_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE] CHECK CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TB_ITEM_SET]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_ATTRIBUTE_TEXT_TB_ITEM_ATTRIBUTE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE_TEXT]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TEXT_TB_ITEM_ATTRIBUTE] FOREIGN KEY([ITEM_ATTRIBUTE_ID])
REFERENCES [dbo].[TB_ITEM_ATTRIBUTE] ([ITEM_ATTRIBUTE_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE_TEXT] CHECK CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TEXT_TB_ITEM_ATTRIBUTE]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_ATTRIBUTE_TEXT_tb_ITEM_DOCUMENT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE_TEXT]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TEXT_tb_ITEM_DOCUMENT] FOREIGN KEY([ITEM_DOCUMENT_ID])
REFERENCES [dbo].[TB_ITEM_DOCUMENT] ([ITEM_DOCUMENT_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_ATTRIBUTE_TEXT] CHECK CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_TEXT_tb_ITEM_DOCUMENT]
GO
/****** Object:  ForeignKey [FK_tb_ITEM_AUTHORS_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_AUTHOR]  WITH CHECK ADD  CONSTRAINT [FK_tb_ITEM_AUTHORS_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TB_ITEM_AUTHOR] CHECK CONSTRAINT [FK_tb_ITEM_AUTHORS_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_tb_ITEM_DOCUMENT_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_DOCUMENT]  WITH CHECK ADD  CONSTRAINT [FK_tb_ITEM_DOCUMENT_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_DOCUMENT] CHECK CONSTRAINT [FK_tb_ITEM_DOCUMENT_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_LINK_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_LINK]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_LINK_tb_ITEM] FOREIGN KEY([ITEM_ID_PRIMARY])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_LINK] CHECK CONSTRAINT [FK_TB_ITEM_LINK_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_LINK_tb_ITEM1]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_LINK]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_LINK_tb_ITEM1] FOREIGN KEY([ITEM_ID_SECONDARY])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_LINK] CHECK CONSTRAINT [FK_TB_ITEM_LINK_tb_ITEM1]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_ATTRIBUTE_OUTCOME_TB_ITEM_SET]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_OUTCOME]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_OUTCOME_TB_ITEM_SET] FOREIGN KEY([ITEM_SET_ID])
REFERENCES [dbo].[TB_ITEM_SET] ([ITEM_SET_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_OUTCOME] CHECK CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_OUTCOME_TB_ITEM_SET]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_ATTRIBUTE_OUTCOME_TB_OUTCOME_TYPE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_OUTCOME]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_OUTCOME_TB_OUTCOME_TYPE] FOREIGN KEY([OUTCOME_TYPE_ID])
REFERENCES [dbo].[TB_OUTCOME_TYPE] ([OUTCOME_TYPE_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_OUTCOME] CHECK CONSTRAINT [FK_TB_ITEM_ATTRIBUTE_OUTCOME_TB_OUTCOME_TYPE]
GO
/****** Object:  ForeignKey [FK_tb_ITEM_REVIEW_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_REVIEW]  WITH CHECK ADD  CONSTRAINT [FK_tb_ITEM_REVIEW_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_REVIEW] CHECK CONSTRAINT [FK_tb_ITEM_REVIEW_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_tb_ITEM_REVIEW_tb_ITEM1]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_REVIEW]  WITH CHECK ADD  CONSTRAINT [FK_tb_ITEM_REVIEW_tb_ITEM1] FOREIGN KEY([MASTER_ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_REVIEW] CHECK CONSTRAINT [FK_tb_ITEM_REVIEW_tb_ITEM1]
GO
/****** Object:  ForeignKey [FK_tb_ITEM_REVIEW_tb_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_REVIEW]  WITH CHECK ADD  CONSTRAINT [FK_tb_ITEM_REVIEW_tb_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_REVIEW] CHECK CONSTRAINT [FK_tb_ITEM_REVIEW_tb_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_SET_tb_CONTACT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_SET_tb_CONTACT] FOREIGN KEY([CONTACT_ID])
REFERENCES [dbo].[TB_CONTACT] ([CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_SET] CHECK CONSTRAINT [FK_TB_ITEM_SET_tb_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_SET_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_SET_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_SET] CHECK CONSTRAINT [FK_TB_ITEM_SET_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_SET_TB_SETS]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_SET_TB_SETS] FOREIGN KEY([SET_ID])
REFERENCES [dbo].[TB_SET] ([SET_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_SET] CHECK CONSTRAINT [FK_TB_ITEM_SET_TB_SETS]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_SOURCE_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_SOURCE]  WITH NOCHECK ADD  CONSTRAINT [FK_TB_ITEM_SOURCE_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_SOURCE] CHECK CONSTRAINT [FK_TB_ITEM_SOURCE_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_SOURCE_TB_SOURCE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_SOURCE]  WITH NOCHECK ADD  CONSTRAINT [FK_TB_ITEM_SOURCE_TB_SOURCE] FOREIGN KEY([SOURCE_ID])
REFERENCES [dbo].[TB_SOURCE] ([SOURCE_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_SOURCE] CHECK CONSTRAINT [FK_TB_ITEM_SOURCE_TB_SOURCE]
GO
/****** Object:  ForeignKey [FK_TB_ITEM_TERM_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_ITEM_TERM]  WITH CHECK ADD  CONSTRAINT [FK_TB_ITEM_TERM_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_ITEM_TERM] CHECK CONSTRAINT [FK_TB_ITEM_TERM_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_META_ANALYSIS_TB_CONTACT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_META_ANALYSIS]  WITH CHECK ADD  CONSTRAINT [FK_TB_META_ANALYSIS_TB_CONTACT] FOREIGN KEY([CONTACT_ID])
REFERENCES [dbo].[TB_CONTACT] ([CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_META_ANALYSIS] CHECK CONSTRAINT [FK_TB_META_ANALYSIS_TB_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_META_ANALYSIS_TB_META_ANALYSIS_TYPE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_META_ANALYSIS]  WITH CHECK ADD  CONSTRAINT [FK_TB_META_ANALYSIS_TB_META_ANALYSIS_TYPE] FOREIGN KEY([META_ANALYSIS_TYPE_ID])
REFERENCES [dbo].[TB_META_ANALYSIS_TYPE] ([META_ANALYSIS_TYPE_ID])
GO
ALTER TABLE [dbo].[TB_META_ANALYSIS] CHECK CONSTRAINT [FK_TB_META_ANALYSIS_TB_META_ANALYSIS_TYPE]
GO
/****** Object:  ForeignKey [FK_TB_META_ANALYSIS_TB_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_META_ANALYSIS]  WITH CHECK ADD  CONSTRAINT [FK_TB_META_ANALYSIS_TB_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_META_ANALYSIS] CHECK CONSTRAINT [FK_TB_META_ANALYSIS_TB_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_META_ANALYSIS_OUTCOME_TB_ITEM_OUTCOME]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_META_ANALYSIS_OUTCOME]  WITH CHECK ADD  CONSTRAINT [FK_TB_META_ANALYSIS_OUTCOME_TB_ITEM_OUTCOME] FOREIGN KEY([OUTCOME_ID])
REFERENCES [dbo].[TB_ITEM_OUTCOME] ([OUTCOME_ID])
GO
ALTER TABLE [dbo].[TB_META_ANALYSIS_OUTCOME] CHECK CONSTRAINT [FK_TB_META_ANALYSIS_OUTCOME_TB_ITEM_OUTCOME]
GO
/****** Object:  ForeignKey [FK_TB_META_ANALYSIS_OUTCOME_TB_META_ANALYSIS]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_META_ANALYSIS_OUTCOME]  WITH CHECK ADD  CONSTRAINT [FK_TB_META_ANALYSIS_OUTCOME_TB_META_ANALYSIS] FOREIGN KEY([META_ANALYSIS_ID])
REFERENCES [dbo].[TB_META_ANALYSIS] ([META_ANALYSIS_ID])
GO
ALTER TABLE [dbo].[TB_META_ANALYSIS_OUTCOME] CHECK CONSTRAINT [FK_TB_META_ANALYSIS_OUTCOME_TB_META_ANALYSIS]
GO
/****** Object:  ForeignKey [FK_TB_REPORT_TB_CONTACT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REPORT]  WITH CHECK ADD  CONSTRAINT [FK_TB_REPORT_TB_CONTACT] FOREIGN KEY([CONTACT_ID])
REFERENCES [dbo].[TB_CONTACT] ([CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_REPORT] CHECK CONSTRAINT [FK_TB_REPORT_TB_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_REPORT_TB_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REPORT]  WITH CHECK ADD  CONSTRAINT [FK_TB_REPORT_TB_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_REPORT] CHECK CONSTRAINT [FK_TB_REPORT_TB_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_REPORT_COLUMN_TB_REPORT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REPORT_COLUMN]  WITH CHECK ADD  CONSTRAINT [FK_TB_REPORT_COLUMN_TB_REPORT] FOREIGN KEY([REPORT_ID])
REFERENCES [dbo].[TB_REPORT] ([REPORT_ID])
GO
ALTER TABLE [dbo].[TB_REPORT_COLUMN] CHECK CONSTRAINT [FK_TB_REPORT_COLUMN_TB_REPORT]
GO
/****** Object:  ForeignKey [FK_TB_REPORT_COLUMN_CODE_TB_REPORT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REPORT_COLUMN_CODE]  WITH CHECK ADD  CONSTRAINT [FK_TB_REPORT_COLUMN_CODE_TB_REPORT] FOREIGN KEY([REPORT_ID])
REFERENCES [dbo].[TB_REPORT] ([REPORT_ID])
GO
ALTER TABLE [dbo].[TB_REPORT_COLUMN_CODE] CHECK CONSTRAINT [FK_TB_REPORT_COLUMN_CODE_TB_REPORT]
GO
/****** Object:  ForeignKey [FK_TB_REPORT_COLUMN_CODE_TB_REPORT_COLUMN]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REPORT_COLUMN_CODE]  WITH CHECK ADD  CONSTRAINT [FK_TB_REPORT_COLUMN_CODE_TB_REPORT_COLUMN] FOREIGN KEY([REPORT_COLUMN_ID])
REFERENCES [dbo].[TB_REPORT_COLUMN] ([REPORT_COLUMN_ID])
GO
ALTER TABLE [dbo].[TB_REPORT_COLUMN_CODE] CHECK CONSTRAINT [FK_TB_REPORT_COLUMN_CODE_TB_REPORT_COLUMN]
GO
/****** Object:  ForeignKey [FK_TB_REVIEW_CONTACT_tb_CONTACT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REVIEW_CONTACT]  WITH CHECK ADD  CONSTRAINT [FK_TB_REVIEW_CONTACT_tb_CONTACT] FOREIGN KEY([CONTACT_ID])
REFERENCES [dbo].[TB_CONTACT] ([CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_REVIEW_CONTACT] CHECK CONSTRAINT [FK_TB_REVIEW_CONTACT_tb_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_REVIEW_CONTACT_tb_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REVIEW_CONTACT]  WITH CHECK ADD  CONSTRAINT [FK_TB_REVIEW_CONTACT_tb_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_REVIEW_CONTACT] CHECK CONSTRAINT [FK_TB_REVIEW_CONTACT_tb_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_REVIEW_SET_tb_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REVIEW_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_REVIEW_SET_tb_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_REVIEW_SET] CHECK CONSTRAINT [FK_TB_REVIEW_SET_tb_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_REVIEW_SET_TB_SETS]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_REVIEW_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_REVIEW_SET_TB_SETS] FOREIGN KEY([SET_ID])
REFERENCES [dbo].[TB_SET] ([SET_ID])
GO
ALTER TABLE [dbo].[TB_REVIEW_SET] CHECK CONSTRAINT [FK_TB_REVIEW_SET_TB_SETS]
GO
/****** Object:  ForeignKey [FK_TB_SEARCH_tb_CONTACT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SEARCH]  WITH CHECK ADD  CONSTRAINT [FK_TB_SEARCH_tb_CONTACT] FOREIGN KEY([CONTACT_ID])
REFERENCES [dbo].[TB_CONTACT] ([CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_SEARCH] CHECK CONSTRAINT [FK_TB_SEARCH_tb_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_SEARCH_tb_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SEARCH]  WITH CHECK ADD  CONSTRAINT [FK_TB_SEARCH_tb_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_SEARCH] CHECK CONSTRAINT [FK_TB_SEARCH_tb_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_SEARCH_ITEM_tb_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SEARCH_ITEM]  WITH CHECK ADD  CONSTRAINT [FK_TB_SEARCH_ITEM_tb_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_SEARCH_ITEM] CHECK CONSTRAINT [FK_TB_SEARCH_ITEM_tb_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_SEARCH_ITEM_TB_SEARCH]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SEARCH_ITEM]  WITH CHECK ADD  CONSTRAINT [FK_TB_SEARCH_ITEM_TB_SEARCH] FOREIGN KEY([SEARCH_ID])
REFERENCES [dbo].[TB_SEARCH] ([SEARCH_ID])
GO
ALTER TABLE [dbo].[TB_SEARCH_ITEM] CHECK CONSTRAINT [FK_TB_SEARCH_ITEM_TB_SEARCH]
GO
/****** Object:  ForeignKey [FK_TB_SET_TB_SET_TYPE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SET]  WITH CHECK ADD  CONSTRAINT [FK_TB_SET_TB_SET_TYPE] FOREIGN KEY([SET_TYPE_ID])
REFERENCES [dbo].[TB_SET_TYPE] ([SET_TYPE_ID])
GO
ALTER TABLE [dbo].[TB_SET] CHECK CONSTRAINT [FK_TB_SET_TB_SET_TYPE]
GO
/****** Object:  ForeignKey [FK_TB_SOURCE_TB_IMPORT_FILTER]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE]  WITH NOCHECK ADD  CONSTRAINT [FK_TB_SOURCE_TB_IMPORT_FILTER] FOREIGN KEY([IMPORT_FILTER_ID])
REFERENCES [dbo].[TB_IMPORT_FILTER] ([IMPORT_FILTER_ID])
GO
ALTER TABLE [dbo].[TB_SOURCE] NOCHECK CONSTRAINT [FK_TB_SOURCE_TB_IMPORT_FILTER]
GO
/****** Object:  ForeignKey [FK_TB_SOURCE_tb_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_SOURCE]  WITH NOCHECK ADD  CONSTRAINT [FK_TB_SOURCE_tb_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_SOURCE] CHECK CONSTRAINT [FK_TB_SOURCE_tb_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_TERM_EXTR_T_MAP_TB_ITEM]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_TERM_EXTR_T_MAP]  WITH CHECK ADD  CONSTRAINT [FK_TB_TERM_EXTR_T_MAP_TB_ITEM] FOREIGN KEY([ITEM_ID])
REFERENCES [dbo].[TB_ITEM] ([ITEM_ID])
GO
ALTER TABLE [dbo].[TB_TERM_EXTR_T_MAP] CHECK CONSTRAINT [FK_TB_TERM_EXTR_T_MAP_TB_ITEM]
GO
/****** Object:  ForeignKey [FK_TB_WORK_ALLOCATION_TB_ATTRIBUTE]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_WORK_ALLOCATION]  WITH CHECK ADD  CONSTRAINT [FK_TB_WORK_ALLOCATION_TB_ATTRIBUTE] FOREIGN KEY([ATTRIBUTE_ID])
REFERENCES [dbo].[TB_ATTRIBUTE] ([ATTRIBUTE_ID])
GO
ALTER TABLE [dbo].[TB_WORK_ALLOCATION] CHECK CONSTRAINT [FK_TB_WORK_ALLOCATION_TB_ATTRIBUTE]
GO
/****** Object:  ForeignKey [FK_TB_WORK_ALLOCATION_tb_CONTACT]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_WORK_ALLOCATION]  WITH CHECK ADD  CONSTRAINT [FK_TB_WORK_ALLOCATION_tb_CONTACT] FOREIGN KEY([CONTACT_ID])
REFERENCES [dbo].[TB_CONTACT] ([CONTACT_ID])
GO
ALTER TABLE [dbo].[TB_WORK_ALLOCATION] CHECK CONSTRAINT [FK_TB_WORK_ALLOCATION_tb_CONTACT]
GO
/****** Object:  ForeignKey [FK_TB_WORK_ALLOCATION_TB_REVIEW]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_WORK_ALLOCATION]  WITH CHECK ADD  CONSTRAINT [FK_TB_WORK_ALLOCATION_TB_REVIEW] FOREIGN KEY([REVIEW_ID])
REFERENCES [dbo].[TB_REVIEW] ([REVIEW_ID])
GO
ALTER TABLE [dbo].[TB_WORK_ALLOCATION] CHECK CONSTRAINT [FK_TB_WORK_ALLOCATION_TB_REVIEW]
GO
/****** Object:  ForeignKey [FK_TB_WORK_ALLOCATION_TB_SET]    Script Date: 05/20/2010 16:26:30 ******/
ALTER TABLE [dbo].[TB_WORK_ALLOCATION]  WITH CHECK ADD  CONSTRAINT [FK_TB_WORK_ALLOCATION_TB_SET] FOREIGN KEY([SET_ID])
REFERENCES [dbo].[TB_SET] ([SET_ID])
GO
ALTER TABLE [dbo].[TB_WORK_ALLOCATION] CHECK CONSTRAINT [FK_TB_WORK_ALLOCATION_TB_SET]
GO
