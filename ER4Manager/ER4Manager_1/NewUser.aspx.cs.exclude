using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using System.Data;
using System.Configuration;
using System.Collections;
using System.Web.Security;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;
using System.Data.SqlClient;

public partial class NewUser : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Utils.GetSessionString("Contact_ID") != null)
        {
            if (Utils.GetSessionString("IsAdm") == "True")
            {
                if (!IsPostBack)
                {

                    ComponentArt.Web.UI.TabStrip ts = (ComponentArt.Web.UI.TabStrip)Master.FindControl("tsMenu");
                    if (ts != null)
                    {
                        ts.SelectedTab = ts.Tabs[4];
                        ts.SelectedTab = ts.Tabs[4].Tabs[3];
                    }
                    System.Web.UI.WebControls.Label lbl = (Label)Master.FindControl("lblPageTitle");
                    if (lbl != null)
                    {
                        lbl.Text = "New users";
                    }

                    Telerik.Web.UI.RadTabStrip radTs = (Telerik.Web.UI.RadTabStrip)Master.FindControl("rtsMenu");
                    if (radTs != null)
                    {
                        radTs.SelectedIndex = 4;
                        radTs.Tabs[4].Tabs[3].Selected = true;
                        //radTs.Tabs[3].Tabs[2].Width = 670;
                    }
                    System.Web.UI.WebControls.Label lbl1 = (Label)Master.FindControl("lblHeadingText");
                    if (lbl1 != null)
                    {
                        lbl1.Text = "New users";
                    }



                    string SQL = "select count(distinct CONTACT_ID) as NUMBER_LOGINS from TB_LOGON_TICKET " +
                        "where CREATED > '2010-07-01 00:00:01'";
                    bool isAdmDB = true;
                    SqlDataReader sdr = Utils.ReturnReader(SQL, isAdmDB);
                    if (sdr.Read())  // already exists
                    {
                        lblNumActiveUsers.Text = sdr["NUMBER_LOGINS"].ToString();
                    }
                    sdr.Close();
                    SQL = "select count(distinct CONTACT_ID) as NUMBER_ACCOUNTS from TB_CONTACT " +
                        "where EXPIRY_DATE > '2010-03-20 00:00:01'";
                    isAdmDB = false;
                    sdr = Utils.ReturnReader(SQL, isAdmDB);
                    if (sdr.Read())  // already exists
                    {
                        lblAccountsCreated.Text = sdr["NUMBER_ACCOUNTS"].ToString();
                    }
                    sdr.Close();

                    string direction = "DESC";
                    string orderBy = "NUMBER_LOGINS";
                    buildGrid(orderBy, direction);
                }
            }
            else
            {
                Server.Transfer("Error.aspx");
            }
        }
        else
        {
            Server.Transfer("Error.aspx");
        }
    }

    private void buildGrid(string orderBy, string direction)
    {
        // sort out days remainings
        //string start = "";
        //string end = "";
        string start = ddlDaysRemaining.SelectedValue.Substring(0, ddlDaysRemaining.SelectedValue.IndexOf(":"));
        string end = ddlDaysRemaining.SelectedValue.Substring(ddlDaysRemaining.SelectedValue.IndexOf(":") + 1);
        /*
        switch (ddlDaysRemaining.SelectedValue)
        {
            case "-10000:10000":
                start = ddlDaysRemaining.SelectedValue.Substring(0, ddlDaysRemaining.SelectedValue.IndexOf(":"));
                end = ddlDaysRemaining.SelectedValue.Substring(ddlDaysRemaining.SelectedValue.IndexOf(":"));
                break;
            case "-6:1":
                ;
                break;
            case "-1:5":
                ;
                break;
            case "3:11":
                ;
                break;
            case "6:19":
                ;
                break;
            case "17:24":
                ;
                break;
            case "24:10000":
                ;
                break;

            default: 
                break;

        }
         */
        /*
        <asp:DropDownList ID="ddlDaysRemaining" runat="server" 
                onselectedindexchanged="ddlDaysRemaining_SelectedIndexChanged">
                <asp:ListItem Value="&gt;-10000:&lt; 10000">All</asp:ListItem>
                <asp:ListItem Value="&gt; -6:&lt; 1">-5 to 0 days</asp:ListItem>
                <asp:ListItem Value="&gt; - 1: &lt; 5">0 - 4 days </asp:ListItem>
                <asp:ListItem Value="&gt; 3:&lt; 11">4 - 10 days</asp:ListItem>
                <asp:ListItem Value="&gt; 6: &lt; 19">10 - 18 days</asp:ListItem>
                <asp:ListItem Value="&gt; 17: 24 days">18 to 24 days</asp:ListItem>
                <asp:ListItem Value="&gt; 24">&gt; 24 days</asp:ListItem>
            </asp:DropDownList>
        */


        
        DataTable dt = new DataTable();
        System.Data.DataRow newrow;

        dt.Columns.Add(new DataColumn("CONTACT_ID", typeof(string)));
        dt.Columns.Add(new DataColumn("CONTACT_NAME", typeof(string)));
        dt.Columns.Add(new DataColumn("NUMBER_LOGINS", typeof(string)));
        dt.Columns.Add(new DataColumn("DAYS_SINCE_CREATION", typeof(string)));
        dt.Columns.Add(new DataColumn("DAYS_REMAINING", typeof(string)));
        dt.Columns.Add(new DataColumn("LAST_ACCESS", typeof(string)));
        dt.Columns.Add(new DataColumn("1_WK_SENT", typeof(string)));
        dt.Columns.Add(new DataColumn("3_WK_SENT", typeof(string)));
        dt.Columns.Add(new DataColumn("EXPIRED_SENT", typeof(string)));
        string SQL = "";
        if (cbWithLogin.Checked == false)
        {
            /*
            SQL = "SELECT c.[CONTACT_ID],c.CONTACT_NAME, COUNT(lt.TICKET_GUID) AS NUMBER_LOGINS, " +
                "DATEDIFF (day, c.DATE_CREATED, GETDATE()) as DAYS_SINCE_CREATION, " +
                "DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) as DAYS_REMAINING, " +
                "MAX(lt.CREATED)as LAST_ACCESS, ce.[1_WK_EMAIL_SENT], ce.[3_WK_EMAIL_SENT], " +
                "ce.[4_WK_EMAIL_SENT] " +
                "FROM Reviewer.dbo.TB_CONTACT c " +
                "left join Revieweradmin.dbo.TB_LOGON_TICKET lt " +
                "on lt.CONTACT_ID = c.CONTACT_ID " +
                "left join Revieweradmin.dbo.TB_CONTACT_EMAILS_SENT ce " +
                "on ce.CONTACT_ID = c.CONTACT_ID " +
                "where c.EXPIRY_DATE > '2010-03-20 00:00:01' ";
            SQL += "and (DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) >= '" + start + "' ";
            SQL += "and DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) <= '" + end + "') ";
            SQL += "group by c.CONTACT_ID,  c.CONTACT_NAME, c.DATE_CREATED, c.EXPIRY_DATE, " +
                "ce.[1_WK_EMAIL_SENT], ce.[3_WK_EMAIL_SENT], ce.[4_WK_EMAIL_SENT] " +
                "order by " + orderBy + " " + direction + " ";
            */
            
            // for considering site license
            SQL = "SELECT c.[CONTACT_ID],c.CONTACT_NAME, COUNT(lt.TICKET_GUID) AS NUMBER_LOGINS, " +
                "DATEDIFF (day, c.DATE_CREATED, GETDATE()) as DAYS_SINCE_CREATION, " +
                
                //"DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) as DAYS_REMAINING, " +
                "DATEDIFF (DAY, GETDATE(), ( CASE when sl.[EXPIRY_DATE] is not null " +
				"and sl.[EXPIRY_DATE] > c.[EXPIRY_DATE] " +
				"	then sl.[EXPIRY_DATE] " +
				"else c.[EXPIRY_DATE] " +
				"end " +
			    ")) as DAYS_REMAINING, " +

                "MAX(lt.CREATED)as LAST_ACCESS, ce.[1_WK_EMAIL_SENT], ce.[3_WK_EMAIL_SENT], " +
                "ce.[4_WK_EMAIL_SENT] " +
                "FROM Reviewer.dbo.TB_CONTACT c " +
                "left join Revieweradmin.dbo.TB_LOGON_TICKET lt " +
                "on lt.CONTACT_ID = c.CONTACT_ID " +
                "left join Revieweradmin.dbo.TB_CONTACT_EMAILS_SENT ce " +
                "on ce.CONTACT_ID = c.CONTACT_ID " +

                "Left outer join TB_SITE_LIC_CONTACT lc on lc.CONTACT_ID = c.CONTACT_ID " +
                "Left outer join TB_SITE_LIC sl on lc.SITE_LIC_ID = sl.SITE_LIC_ID " +


                "where c.EXPIRY_DATE > '2010-03-20 00:00:01' ";
            SQL += "and (DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) >= '" + start + "' ";
            SQL += "and DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) <= '" + end + "') ";
            SQL += "group by c.CONTACT_ID,  c.CONTACT_NAME, c.DATE_CREATED, c.EXPIRY_DATE, " +
                "ce.[1_WK_EMAIL_SENT], ce.[3_WK_EMAIL_SENT], ce.[4_WK_EMAIL_SENT] " +
                ", sl.EXPIRY_DATE " +
                "order by " + orderBy + " " + direction + " ";



        }
        else
        {
            SQL = "SELECT c.[CONTACT_ID],c.CONTACT_NAME, COUNT(lt.TICKET_GUID) AS NUMBER_LOGINS, " +
                "DATEDIFF (day, c.DATE_CREATED, GETDATE()) as DAYS_SINCE_CREATION, " +
                
                //"DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) as DAYS_REMAINING, " +
                "DATEDIFF (DAY, GETDATE(), ( CASE when sl.[EXPIRY_DATE] is not null " +
                "and sl.[EXPIRY_DATE] > c.[EXPIRY_DATE] " +
                "	then sl.[EXPIRY_DATE] " +
                "else c.[EXPIRY_DATE] " +
                "end " +
                ")) as DAYS_REMAINING, " +
                
                "ce.[1_WK_EMAIL_SENT], ce.[3_WK_EMAIL_SENT], " +
                "ce.[4_WK_EMAIL_SENT], " +
                "MAX(CREATED)as LAST_ACCESS FROM [ReviewerAdmin].[dbo].[TB_LOGON_TICKET] lt " +               
                "Inner Join Reviewer.dbo.TB_CONTACT c " +
                "on lt.CONTACT_ID = c.CONTACT_ID " +
                "left join Revieweradmin.dbo.TB_CONTACT_EMAILS_SENT ce " +
                "on ce.CONTACT_ID = c.CONTACT_ID " +

                // added
                "Left outer join TB_SITE_LIC_CONTACT lc on lc.CONTACT_ID = c.CONTACT_ID " +
                "Left outer join TB_SITE_LIC sl on lc.SITE_LIC_ID = sl.SITE_LIC_ID " +

                "Where CREATED > DATEADD(DD, -" + ddlTimePeriod.SelectedValue + ", GETDATE()) " +
                "and CREATED > '2010-07-01 00:00:01' " +
                "and c.EXPIRY_DATE > '2010-03-20 00:00:01' ";
            SQL += "and (DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) >= '" + start + "' ";
            SQL += "and DATEDIFF (DAY, GETDATE(), c.EXPIRY_DATE) <= '" + end + "') ";
            SQL += "group by c.CONTACT_ID, c.CONTACT_NAME, c.DATE_CREATED, c.EXPIRY_DATE,  " +
                "ce.[1_WK_EMAIL_SENT], ce.[3_WK_EMAIL_SENT], ce.[4_WK_EMAIL_SENT] " +
                // added
                ", sl.EXPIRY_DATE " +
                
                "order by " + orderBy + " " + direction + " ";
        }

        bool isAdmDB = false;
        SqlDataReader sdr = Utils.ReturnReader(SQL, isAdmDB);
        string test = "aa";
        while (sdr.Read())
        {
            newrow = dt.NewRow();
            newrow["CONTACT_ID"] = sdr["CONTACT_ID"].ToString();
            newrow["CONTACT_NAME"] = sdr["CONTACT_NAME"].ToString();
            newrow["NUMBER_LOGINS"] = sdr["NUMBER_LOGINS"].ToString();
            newrow["DAYS_SINCE_CREATION"] = sdr["DAYS_SINCE_CREATION"].ToString();
            newrow["DAYS_REMAINING"] = sdr["DAYS_REMAINING"].ToString();
            newrow["LAST_ACCESS"] = sdr["LAST_ACCESS"].ToString();
            test = sdr["1_WK_EMAIL_SENT"].ToString();
            if (sdr["1_WK_EMAIL_SENT"].ToString() == "True")
            {
                newrow["1_WK_SENT"] = "Y";
            }
            else if (sdr["1_WK_EMAIL_SENT"].ToString() == "False")
            {
                newrow["1_WK_SENT"] = "N";
            }
            else
            {
                newrow["1_WK_SENT"] = "N/A";
            }

            if (sdr["3_WK_EMAIL_SENT"].ToString() == "True")
            {
                newrow["3_WK_SENT"] = "Y";
            }
            else if (sdr["3_WK_EMAIL_SENT"].ToString() == "False")
            {
                newrow["3_WK_SENT"] = "N";
            }
            else
            {
                newrow["3_WK_SENT"] = "N/A";
            }

            if (sdr["4_WK_EMAIL_SENT"].ToString() == "True")
            {
                newrow["EXPIRED_SENT"] = "Y";
            }
            else if (sdr["4_WK_EMAIL_SENT"].ToString() == "False")
            {
                newrow["EXPIRED_SENT"] = "N";
            }
            else
            {
                newrow["EXPIRED_SENT"] = "N/A";
            }
            //newrow["3_WK_SENT"] = "?";
            //newrow["EXPIRED_SENT"] = "?";
            dt.Rows.Add(newrow);
        }
        sdr.Close();

        Grid1.DataSource = dt;
        Grid1.DataBind();
    }


    protected void ddlTimePeriod_SelectedIndexChanged(object sender, EventArgs e)
    {
        string direction = "DESC";
        if (cbAsc.Checked == true)
            direction = "ASC";

        string orderBy = "NUMBER_LOGINS";
        ddlSortBy.SelectedValue = "NUMBER_LOGINS";
        buildGrid(orderBy, direction);
    }
    protected void ddlSortBy_SelectedIndexChanged(object sender, EventArgs e)
    {
        string direction = "DESC";
        if (cbAsc.Checked == true)
            direction = "ASC";
        buildGrid(ddlSortBy.SelectedValue, direction);
    }
    protected void cbWithLogin_CheckedChanged(object sender, EventArgs e)
    {
        if (cbWithLogin.Checked == true)
        {
            ddlTimePeriod.Enabled = true;
        }
        else
        {
            ddlTimePeriod.Enabled = false;
            ddlTimePeriod.SelectedIndex = 0;
        }
        string direction = "DESC";
        if (cbAsc.Checked == true)
            direction = "ASC";
        buildGrid(ddlSortBy.SelectedValue, direction);
    }
    protected void cbAsc_CheckedChanged(object sender, EventArgs e)
    {
        string direction = "DESC";
        if (cbAsc.Checked == true)
            direction = "ASC";
        buildGrid(ddlSortBy.SelectedValue, direction);
    }
    protected void cbRemaining_CheckedChanged(object sender, EventArgs e)
    {
        string direction = "DESC";
        if (cbAsc.Checked == true)
            direction = "ASC";
        buildGrid(ddlSortBy.SelectedValue, direction);
    }
    protected void Grid1_ItemCommand(object sender, ComponentArt.Web.UI.GridItemCommandEventArgs e)
    {
        switch (((LinkButton)e.Control).CommandName)
        {
            case "Email":
                pnlEmail.Visible = true;

                string SQL = "select CONTACT_NAME, EMAIL from TB_CONTACT where CONTACT_ID = '" +
                    ((LinkButton)e.Control).CommandArgument + "'";
                bool isAdmDB = false;
                SqlDataReader sdr = Utils.ReturnReader(SQL, isAdmDB);
                if (sdr.Read())
                {
                    lblName.Text = sdr["CONTACT_NAME"].ToString();
                    tbEmailAddress.Text = sdr["EMAIL"].ToString();
                }
                sdr.Close();

                lblContactID.Text = ((LinkButton)e.Control).CommandArgument;
                ddlEmail.SelectedIndex = 0;
                ddlEmail_SelectedIndexChanged(sender, e);

                // if this item is linked to any items in screening (and in this review), mark them as NOT TRANSFERRED
                //Utils.ExecuteSP(Server, "st_REFERENCE_SCREEN_ITEM_TRANSFER_STATUS_AND_LINK_UPDATE",
                //    Review_ID, ((LinkButton)e.Control).CommandArgument, "UNTRANSFERRED");

                //Server.Transfer("items.aspx");
                break;

            default: break;
        }
    }
    protected void ddlEmail_SelectedIndexChanged(object sender, EventArgs e)
    {
        string SQL = "select top (1) [" + ddlEmail.SelectedValue + "_WK_EMAIL], SUBJECT from TB_CONTACT_EMAILS";
        bool isAdmDB = true;
        SqlDataReader sdr = Utils.ReturnReader(SQL, isAdmDB);
        if (sdr.Read())
        {
            tbEmail.Text = sdr[ddlEmail.SelectedValue + "_WK_EMAIL"].ToString();
            tbSubject.Text = sdr["SUBJECT"].ToString();
        }
        sdr.Close();

        tbGreeting.Text = "Dear " + lblName.Text;


    }
    protected void lbUpdate_Click(object sender, EventArgs e)
    {
        tbEmail.Text = tbEmail.Text.Replace("'", "''");
        
        string SQL = "update top (1) TB_CONTACT_EMAILS set [" + ddlEmail.SelectedValue + "_WK_EMAIL] = '" +
            tbEmail.Text + "'";
        bool isAdmDB = true;
        Utils.ExecuteQuery(SQL, isAdmDB);
    }
    protected void lbCancel_Click(object sender, EventArgs e)
    {
        pnlEmail.Visible = false;
    }
    protected void cmdSend_Click(object sender, EventArgs e)
    {
        tbEmail.Text = tbGreeting.Text + "\r\n\r\n" + tbEmail.Text;
        string emailMessage = tbEmail.Text.Replace("\r\n", "<br>");   
        
        string sendResult = Utils.NewUserEmail(tbEmailAddress.Text,
                    tbSubject.Text, emailMessage);
        // send the same email to us as well
        //sendResult = Utils.NewUserEmail("EPPIsupport@ioe.ac.uk",
        //    tbSubject.Text, emailMessage);
        // mark as sent
        lbMarkAsSent_Click(sender, e);
    }
    protected void Grid1_ItemContentCreated(object sender, ComponentArt.Web.UI.GridItemContentCreatedEventArgs e)
    {
        LinkButton lb = (LinkButton)e.Content.FindControl("lbEmail");
        if (lb != null)
        {
            //lb.Attributes.Add("onclick", "if (confirm('Are you sure you want to remove this item?') == false) return false;");
            lb.CommandArgument = e.Item["CONTACT_ID"].ToString();
        }
    }
    protected void lbMarkAsSent_Click(object sender, EventArgs e)
    {
        string SQL = "select * from TB_CONTACT_EMAILS_SENT where CONTACT_ID = '" + lblContactID.Text + "' " ;
        SQL += "if @@ROWCOUNT > 0 ";
        SQL += "begin ";
        SQL += "update TB_CONTACT_EMAILS_SENT set [" + ddlEmail.SelectedValue + "_WK_EMAIL_SENT] = 1 " +
            "where CONTACT_ID = '" + lblContactID.Text + "' ";
        SQL += "end ";
        SQL += "else ";
        SQL += "begin ";
        SQL += "  insert into TB_CONTACT_EMAILS_SENT (CONTACT_ID, [" + ddlEmail.SelectedValue + "_WK_EMAIL_SENT]) ";
        SQL += "  values (" + lblContactID.Text + ", 1) ";
        SQL += "end ";
        
        //SQL = "update TB_CONTACT_EMAILS_SENT set [" + ddlEmail.SelectedValue + "_WK_EMAIL_SENT] = 1 " +
        //    "where CONTACT_ID = '" + lblContactID.Text + "'";
        bool isAdmDB = true;
        Utils.ExecuteQuery(SQL, isAdmDB);

        string direction = "DESC";
        if (cbAsc.Checked == true)
            direction = "ASC";
        buildGrid(ddlSortBy.SelectedValue, direction);

    }
    protected void lbMarkAsNotSent_Click(object sender, EventArgs e)
    {
        string SQL = "select * from TB_CONTACT_EMAILS_SENT where CONTACT_ID = '" + lblContactID.Text + "' ";
        SQL += "if @@ROWCOUNT > 0 ";
        SQL += "begin ";
        SQL += "update TB_CONTACT_EMAILS_SENT set [" + ddlEmail.SelectedValue + "_WK_EMAIL_SENT] = 0 " +
            "where CONTACT_ID = '" + lblContactID.Text + "' ";
        SQL += "end ";
        SQL += "else ";
        SQL += "begin ";
        SQL += "  insert into TB_CONTACT_EMAILS_SENT (CONTACT_ID, [" + ddlEmail.SelectedValue + "_WK_EMAIL_SENT]) ";
        SQL += "  values (" + lblContactID.Text + ", 0) ";
        SQL += "end ";

        bool isAdmDB = true;
        Utils.ExecuteQuery(SQL, isAdmDB);
    }
    protected void ddlDaysRemaining_SelectedIndexChanged(object sender, EventArgs e)
    {
        string direction = "DESC";
        if (cbAsc.Checked == true)
            direction = "ASC";
        buildGrid(ddlSortBy.SelectedValue, direction);
    }
}
