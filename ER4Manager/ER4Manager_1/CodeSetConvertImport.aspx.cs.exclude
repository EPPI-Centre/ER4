using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using System.Data;
using System.Configuration;
using System.Collections;
using System.Web.Security;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Xsl;
using System.Xml.XPath;
using System.Xml.Schema;
using System.Text;

public partial class CodeSetConvertImport : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Utils.GetSessionString("Contact_ID") != null)
        {
            if (Utils.GetSessionString("IsAdm") == "True")
            {
                if (!IsPostBack)
                {

                    ComponentArt.Web.UI.TabStrip ts = (ComponentArt.Web.UI.TabStrip)Master.FindControl("tsMenu");
                    if (ts != null)
                    {
                        ts.SelectedTab = ts.Tabs[6];
                        ts.SelectedTab = ts.Tabs[6].Tabs[3];
                    }
                    System.Web.UI.WebControls.Label lbl = (Label)Master.FindControl("lblPageTitle");
                    if (lbl != null)
                    {
                        lbl.Text = "Code Export / Import";
                    }



                }
            }
            else
            {
                Server.Transfer("Error.aspx");
            }
        }
        else
        {
            Server.Transfer("Error.aspx");
        }
    }
    protected void cmdConvertGuideline_Click(object sender, EventArgs e)
    {
        // put file into string
        string myString = "";
        StringBuilder sb = new StringBuilder();
        System.IO.StreamReader s = new System.IO.StreamReader(fDocument.PostedFile.InputStream, Encoding.Default);
        try
        {
            do
            {
                myString = s.ReadLine();
                sb = sb.Append(myString);
                sb = sb.Append("\r\n");
            }
            while (s.Peek() != -1);
        }
        catch
        {
            myString = "";
        }
        finally
        {
            s.Close();
        }

        string xmlFile = sb.ToString();

        


        /*
        XmlDocument doc = new XmlDocument();
        doc.LoadXml(xmlFile);

        XPathNavigator xnav = doc.CreateNavigator();
        string xmlText = GetXNavDescr(xnav, 0);
        */
        
    }

    /*
    private string GetXNavDescr(XPathNavigator xnav, int level)
    {
        string xnavValue = "";
        if (xnav.NodeType.ToString() == "Element")
        {
            switch (xnav.Name)
            {
                case "guideline_name":
                    xnavValue = xnav.Value;
                    // create review
                    GuidelineDB oGuidelineDB = new GuidelineDB();
                    SqlParameter[] paramList1 = new SqlParameter[4];
                    paramList1[0] = new SqlParameter("@GUIDELINE", SqlDbType.NVarChar, 255, ParameterDirection.Input,
                        true, 0, 0, null, DataRowVersion.Default, xnav.Value);
                    paramList1[1] = new SqlParameter("@GUIDELINE_STATUS_ID", SqlDbType.NVarChar, 50, ParameterDirection.Input,
                        true, 0, 0, null, DataRowVersion.Default, ddlGuidelineStatus.SelectedValue);
                    paramList1[2] = new SqlParameter("@CONTACT_ID", SqlDbType.NVarChar, 50, ParameterDirection.Input,
                        true, 0, 0, null, DataRowVersion.Default, ddlReviewGroup.SelectedValue);
                    paramList1[3] = new SqlParameter("@NEW_GUIDELINE_ID", SqlDbType.NVarChar, 50, ParameterDirection.Output,
                        true, 0, 0, null, DataRowVersion.Default, "");
                    Utils.ExecuteSPWithReturnValues(Server, "st_GUIDELINE_CREATE", paramList1);
                    NewGuidelineID = paramList1[3].Value.ToString();
                    PresentXmlPosition = "guideline_name";
                    break;
                case "section_name":
                    xnavValue = xnav.Value;
                    PreviousXmlPosition = PresentXmlPosition;
                    PresentXmlPosition = "section_name";
                    SupAttributeID = "NULL";

                    insertAttribute(xnav.Value);
                    LastSectionAttributeID = AttributeID;
                    LastQuestionAttributeID = "";
                    break;
                case "question_name":
                    xnavValue = xnav.Value;
                    PreviousXmlPosition = PresentXmlPosition;
                    PresentXmlPosition = "question_name";
                    SupAttributeID = LastSectionAttributeID;

                    insertAttribute(xnav.Value);
                    LastQuestionAttributeID = AttributeID;

                    break;
                case "answer_name":
                    if (PresentXmlPosition == "section_name")
                    {
                        // we shouldn't be here. Bad XML file. We need to do something to recover
                    }
                    else
                    {
                        xnavValue = xnav.Value;
                        PreviousXmlPosition = PresentXmlPosition;
                        PresentXmlPosition = "answer_name";
                        SupAttributeID = LastQuestionAttributeID;
                        insertAttribute(xnav.Value);
                    }
                    break;
                case "description":
                    updateDescription(xnav.Value);
                    break;
            }
        }

        if (xnav.HasAttributes)
        {
            xnav.MoveToFirstAttribute();
            do
            {
            } while (xnav.MoveToNextAttribute());
            // return to parent
            xnav.MoveToParent();
        }

        if (xnav.HasChildren)
        {
            xnav.MoveToFirstChild();
            do
            {
                GetXNavDescr(xnav, level + 1);
            } while (xnav.MoveToNext());
            // return to parent.
            xnav.MoveToParent();
        }
        return xnavValue;
    }
    */
}
