import { Inject, Injectable, EventEmitter, Output } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ModalService } from './modal.service';
import { BusyAwareService } from '../helpers/BusyAwareService';
import { ConfigService } from './config.service';
import { forEach } from 'lodash';

@Injectable({
  providedIn: 'root',
})

export class MetaAnalysisService extends BusyAwareService {

  constructor(
    private _httpC: HttpClient,
    private modalService: ModalService,
    configService: ConfigService
  ) {
    super(configService);
  }

  public MetaAnalysisList: MetaAnalysis[] = [];


  public FetchMAsList() {
    this._BusyMethods.push("FetchMAsList");
    this.MetaAnalysisList = [];
    this._httpC.get<iMetaAnalysis[]>(this._baseUrl + 'api/MetaAnalysis/GetMAList')
      .subscribe(
        (res) => {
          this.RemoveBusy("FetchMAsList");
          for (let iMa of res) {
            let MA: MetaAnalysis = new MetaAnalysis(iMa);
            this.MetaAnalysisList.push(MA);
          }
        }
        , (err) => {
          this.RemoveBusy("FetchMAsList");
          this.modalService.GenericError(err);
        }
      );
  }

  Clear() {

  }
}
interface iMetaAnalysis {
  analysisType: number;
  title: string;
  knha: boolean;
  fitStats: boolean;
  confint: boolean;
  egger: boolean;
  rankCorr: boolean;
  trimFill: boolean;
  statisticalModel: number;
  verbose: number;
  significanceLevel: number;
  decPlaces: number;
  xAxisTitle: string;
  summaryEstimateTitle: string;
  showAnnotations: boolean;
  showAnnotationWeights: boolean;
  fittedVals: boolean;
  credInt: boolean;
  showFunnel: boolean;
  showBoxplot: boolean;
  sortedBy: string;
  sortDirection: string;
  nmaStatisticalModel: number;
  largeValuesGood: boolean;
  nmaReference: string;
  exponentiated: boolean;
  allTreatments: boolean;
  metaAnalysisId: number;
  attributeId: number;
  setId: number;
  attributeIdIntervention: number;
  attributeIdControl: number;
  attributeIdOutcome: number;
  randomised: number;
  roB: number;
  incon: number;
  indirect: number;
  imprec: number;
  pubBias: number;
  certaintyLevel: number;
  roBComment: string;
  roBSequence: boolean;
  roBConcealment: boolean;
  roBBlindingParticipants: boolean;
  roBBlindingAssessors: boolean;
  roBIncomplete: boolean;
  roBSelective: boolean;
  roBNoIntention: boolean;
  roBCarryover: boolean;
  roBStopped: boolean;
  roBUnvalidated: boolean;
  roBOther: boolean;
  inconComment: string;
  inconPoint: boolean;
  inconCIs: boolean;
  inconDirection: boolean;
  inconStatistical: boolean;
  inconOther: boolean;
  indirectComment: string;
  indirectPopulation: boolean;
  indirectOutcome: boolean;
  indirectNoDirect: boolean;
  indirectIntervention: boolean;
  indirectTime: boolean;
  indirectOther: boolean;
  imprecComment: string;
  imprecWide: boolean;
  imprecFew: boolean;
  imprecOnlyOne: boolean;
  imprecOther: boolean;
  pubBiasComment: string;
  pubBiasCommercially: boolean;
  pubBiasAsymmetrical: boolean;
  pubBiasLimited: boolean;
  pubBiasMissing: boolean;
  pubBiasDiscontinued: boolean;
  pubBiasDiscrepancy: boolean;
  pubBiasOther: boolean;
  upgradeComment: string;
  upgradeLarge: boolean;
  upgradeVeryLarge: boolean;
  upgradeAllPlausible: boolean;
  upgradeClear: boolean;
  upgradeNone: boolean;
  certaintyLevelComment: string;
  metaAnalysisTypeId: number;
  metaAnalysisTypeTitle: string;
  interventionText: string;
  controlText: string;
  outcomeText: string;
  outcomes: [];
  metaAnalysisModerators: [];
  attributeIdQuestion: string;
  attributeQuestionText: string;
  attributeIdAnswer: string;
  attributeAnswerText: string;
  gridSettings: string;
  filterSettingsList: [];
  feForestPlot: null;
  reForestPlot: null;
  feFunnelPlot: null;
  feSumWeight: number;
  reSumWeight: number;
  feEffect: number;
  feSE: number;
  feCiUpper: number;
  feCiLower: number;
  reEffect: number;
  reSE: number;
  reCiUpper: number;
  reCiLower: number;
  tauSquared: number;
  q: number;
  reQ: number;
  numStudies: number;
  fileDrawerZ: number;
  sumWeightsSquared: number;
  reSumWeightsTimesOutcome: number;
  wY_squared: number;
}
export class MetaAnalysis {
  constructor(iMA: iMetaAnalysis) {
    this.analysisType = iMA.analysisType;
    this.title = iMA.title;
    this.knha = iMA.knha;
    this.fitStats = iMA.fitStats;
    this.confint = iMA.confint;
    this.egger = iMA.egger;
    this.rankCorr = iMA.rankCorr;
    this.trimFill = iMA.trimFill;
    this.statisticalModel = iMA.statisticalModel;
    this.verbose = iMA.verbose;
    this.significanceLevel = iMA.significanceLevel;
    this.decPlaces = iMA.decPlaces;
    this.xAxisTitle = iMA.xAxisTitle;
    this.summaryEstimateTitle = iMA.summaryEstimateTitle;
    this.showAnnotations = iMA.showAnnotations;
    this.showAnnotationWeights = iMA.showAnnotationWeights;
    this.fittedVals = iMA.fittedVals;
    this.credInt = iMA.credInt;
    this.showFunnel = iMA.showFunnel;
    this.showBoxplot = iMA.showBoxplot;
    this.sortedBy = iMA.sortedBy;
    this.sortDirection = iMA.sortDirection;
    this.nmaStatisticalModel = iMA.nmaStatisticalModel;
    this.largeValuesGood = iMA.largeValuesGood;
    this.nmaReference = iMA.nmaReference;
    this.exponentiated = iMA.exponentiated;
    this.allTreatments = iMA.allTreatments;
    this.metaAnalysisId = iMA.metaAnalysisId;
    this.attributeId = iMA.attributeId;
    this.setId = iMA.setId;
    this.attributeIdIntervention = iMA.attributeIdIntervention;
    this.attributeIdControl = iMA.attributeIdControl;
    this.attributeIdOutcome = iMA.attributeIdOutcome;
    this.randomised = iMA.randomised;
    this.roB = iMA.roB;
    this.incon = iMA.incon;
    this.indirect = iMA.indirect;
    this.imprec = iMA.imprec;
    this.pubBias = iMA.pubBias;
    this.certaintyLevel = iMA.certaintyLevel;
    this.roBComment = iMA.roBComment;
    this.roBSequence = iMA.roBSequence;
    this.roBConcealment = iMA.roBConcealment;
    this.roBBlindingParticipants = iMA.roBBlindingParticipants;
    this.roBBlindingAssessors = iMA.roBBlindingAssessors;
    this.roBIncomplete = iMA.roBIncomplete;
    this.roBSelective = iMA.roBSelective;
    this.roBNoIntention = iMA.roBNoIntention;
    this.roBCarryover = iMA.roBCarryover;
    this.roBStopped = iMA.roBStopped;
    this.roBUnvalidated = iMA.roBUnvalidated;
    this.roBOther = iMA.roBOther;
    this.inconComment = iMA.inconComment;
    this.inconPoint = iMA.inconPoint;
    this.inconCIs = iMA.inconCIs;
    this.inconDirection = iMA.inconDirection;
    this.inconStatistical = iMA.inconStatistical;
    this.inconOther = iMA.inconOther;
    this.indirectComment = iMA.indirectComment;
    this.indirectPopulation = iMA.indirectPopulation;
    this.indirectOutcome = iMA.indirectOutcome;
    this.indirectNoDirect = iMA.indirectNoDirect;
    this.indirectIntervention = iMA.indirectIntervention;
    this.indirectTime = iMA.indirectTime;
    this.indirectOther = iMA.indirectOther;
    this.imprecComment = iMA.imprecComment;
    this.imprecWide = iMA.imprecWide;
    this.imprecFew = iMA.imprecFew;
    this.imprecOnlyOne = iMA.imprecOnlyOne;
    this.imprecOther = iMA.imprecOther;
    this.pubBiasComment = iMA.pubBiasComment;
    this.pubBiasCommercially = iMA.pubBiasCommercially;
    this.pubBiasAsymmetrical = iMA.pubBiasAsymmetrical;
    this.pubBiasLimited = iMA.pubBiasLimited;
    this.pubBiasMissing = iMA.pubBiasMissing;
    this.pubBiasDiscontinued = iMA.pubBiasDiscontinued;
    this.pubBiasDiscrepancy = iMA.pubBiasDiscrepancy;
    this.pubBiasOther = iMA.pubBiasOther;
    this.upgradeComment = iMA.upgradeComment;
    this.upgradeLarge = iMA.upgradeLarge;
    this.upgradeVeryLarge = iMA.upgradeVeryLarge;
    this.upgradeAllPlausible = iMA.upgradeAllPlausible;
    this.upgradeClear = iMA.upgradeClear;
    this.upgradeNone = iMA.upgradeNone;
    this.certaintyLevelComment = iMA.certaintyLevelComment;
    this.metaAnalysisTypeId = iMA.metaAnalysisTypeId;
    this.metaAnalysisTypeTitle = iMA.metaAnalysisTypeTitle;
    this.interventionText = iMA.interventionText;
    this.controlText = iMA.controlText;
    this.outcomeText = iMA.outcomeText;
    this.outcomes = iMA.outcomes;
    this.metaAnalysisModerators = iMA.metaAnalysisModerators;
    this.attributeIdQuestion = iMA.attributeIdQuestion;
    this.attributeQuestionText = iMA.attributeQuestionText;
    this.attributeIdAnswer = iMA.attributeIdAnswer;
    this.attributeAnswerText = iMA.attributeAnswerText;
    this.gridSettings = iMA.gridSettings;
    this.filterSettingsList = iMA.filterSettingsList;
    this.feForestPlot =null;
    this.reForestPlot =null;
    this.feFunnelPlot =null;
    this.feSumWeight = iMA.feSumWeight;
    this.reSumWeight = iMA.reSumWeight;
    this.feEffect = iMA.feEffect;
    this.feSE = iMA.feSE;
    this.feCiUpper = iMA.feCiUpper;
    this.feCiLower = iMA.feCiLower;
    this.reEffect = iMA.reEffect;
    this.reSE = iMA.reSE;
    this.reCiUpper = iMA.reCiUpper;
    this.reCiLower = iMA.reCiLower;
    this.tauSquared = iMA.tauSquared;
    this.q = iMA.q;
    this.reQ = iMA.reQ;
    this.numStudies = iMA.numStudies;
    this.fileDrawerZ = iMA.fileDrawerZ;
    this.sumWeightsSquared = iMA.sumWeightsSquared;
    this.reSumWeightsTimesOutcome = iMA.reSumWeightsTimesOutcome;
    this.wY_squared = iMA.wY_squared;
  }
  public analysisType: number;
  public title: string;
  public knha: boolean;
  public fitStats: boolean;
  public confint: boolean;
  public egger: boolean;
  public rankCorr: boolean;
  public trimFill: boolean;
  public statisticalModel: number;
  public verbose: number;
  public significanceLevel: number;
  public decPlaces: number;
  public xAxisTitle: string;
  public summaryEstimateTitle: string;
  public showAnnotations: boolean;
  public showAnnotationWeights: boolean;
  public fittedVals: boolean;
  public credInt: boolean;
  public showFunnel: boolean;
  public showBoxplot: boolean;
  public sortedBy: string;
  public sortDirection: string;
  public nmaStatisticalModel: number;
  public largeValuesGood: boolean;
  public nmaReference: string;
  public exponentiated: boolean;
  public allTreatments: boolean;
  public metaAnalysisId: number;
  public attributeId: number;
  public setId: number;
  public attributeIdIntervention: number;
  public attributeIdControl: number;
  public attributeIdOutcome: number;
  public randomised: number;
  public roB: number;
  public incon: number;
  public indirect: number;
  public imprec: number;
  public pubBias: number;
  public certaintyLevel: number;
  public roBComment: string;
  public roBSequence: boolean;
  public roBConcealment: boolean;
  public roBBlindingParticipants: boolean;
  public roBBlindingAssessors: boolean;
  public roBIncomplete: boolean;
  public roBSelective: boolean;
  public roBNoIntention: boolean;
  public roBCarryover: boolean;
  public roBStopped: boolean;
  public roBUnvalidated: boolean;
  public roBOther: boolean;
  public inconComment: string;
  public inconPoint: boolean;
  public inconCIs: boolean;
  public inconDirection: boolean;
  public inconStatistical: boolean;
  public inconOther: boolean;
  public indirectComment: string;
  public indirectPopulation: boolean;
  public indirectOutcome: boolean;
  public indirectNoDirect: boolean;
  public indirectIntervention: boolean;
  public indirectTime: boolean;
  public indirectOther: boolean;
  public imprecComment: string;
  public imprecWide: boolean;
  public imprecFew: boolean;
  public imprecOnlyOne: boolean;
  public imprecOther: boolean;
  public pubBiasComment: string;
  public pubBiasCommercially: boolean;
  public pubBiasAsymmetrical: boolean;
  public pubBiasLimited: boolean;
  public pubBiasMissing: boolean;
  public pubBiasDiscontinued: boolean;
  public pubBiasDiscrepancy: boolean;
  public pubBiasOther: boolean;
  public upgradeComment: string;
  public upgradeLarge: boolean;
  public upgradeVeryLarge: boolean;
  public upgradeAllPlausible: boolean;
  public upgradeClear: boolean;
  public upgradeNone: boolean;
  public certaintyLevelComment: string;
  public metaAnalysisTypeId: number;
  public metaAnalysisTypeTitle: string;
  public interventionText: string;
  public controlText: string;
  public outcomeText: string;
  public outcomes: [];
  public metaAnalysisModerators: [];
  public attributeIdQuestion: string;
  public attributeQuestionText: string;
  public attributeIdAnswer: string;
  public attributeAnswerText: string;
  public gridSettings: string;
  public filterSettingsList: [];
  public feForestPlot: null;
  public reForestPlot: null;
  public feFunnelPlot: null;
  public feSumWeight: number;
  public reSumWeight: number;
  public feEffect: number;
  public feSE: number;
  public feCiUpper: number;
  public feCiLower: number;
  public reEffect: number;
  public reSE: number;
  public reCiUpper: number;
  public reCiLower: number;
  public tauSquared: number;
  public q: number;
  public reQ: number;
  public numStudies: number;
  public fileDrawerZ: number;
  public sumWeightsSquared: number;
  public reSumWeightsTimesOutcome: number;
  public wY_squared: number;
} 
