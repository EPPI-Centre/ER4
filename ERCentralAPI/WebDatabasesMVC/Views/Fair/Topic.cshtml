@model FairTopicVM;
@using BusinessLibrary.BusinessClasses;
@using WebDatabasesMVC.ViewModels;
@using Microsoft.AspNetCore.Html;
@using System.IO;
@using System.Security.Claims;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    Layout = "~/Views/Shared/_FairLayout.cshtml";
}
<script id="InitialScript" type="text/javascript">
    @{var jdata = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver()
            , ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
        }));};
    var ListData = @jdata;
    var IsFair = true;
    $(document).ready(function () {
        BuildPage(ListData);
        $("#InitialScript").remove();

        $("#FrequencyPie").prop("disabled", true);
        $("#FrequencyTable").prop("disabled", false);

    });
</script>
<script>
    var treeviewData = null;
    var progressData = null;
    var freqData = null;
    var topicAttribute = null;
    function BuildPage(ListData) {
        topicAttribute = ListData.topicAttribute;
        var treeDS = {
            schema: {
                parse: function (response) {
                    dataItem = null;
                    var nodes = [];
                    for (var i = 0; i < response.length; i++) {
                        if (response[i].originalSetId == 180878) {
                            //we don't want the "Progress Plus" tool on the left side tree, we want it on the pie chart on the right!
                            GetFreqForPieChart(response[i]);
                            continue;
                        }
                        var nodes2 = [];
                        var nd = new kendo.data.Node({ text: response[i].setName });
                        nd.id = response[i].setId;
                        nd.isCodeset = true;
                        nd.setId = nd.id;
                        for (var ii = 0; ii < response[i].attributes.attributesList.length; ii++) {
                            nd.append(Buildnode(response[i].attributes.attributesList[ii]));
                        }
                        nd.expanded = true;
                        nd.items = nodes2;
                        nodes.push(nd);
                    }
                    //GetYearsFreqs();//getting the years chart after the codes...
                    //setTimeout(function () {
                    //    GetMaps();
                    //}, 150); //don't like multiple requests to be fired all at once!
                    return nodes;
                }
            }
            , data: ListData.reviewSets
        };
        const tV = $("#treeView");
        tV.kendoTreeView({
            dataSource: treeDS
            , select: TreeViewSelection
        });
        treeviewData = $("#treeView").data("kendoTreeView");
        GoToItemsJson(topicAttribute, false);
    }

    function GetFreqForPieChart(dataItem) {
        $("#FreqSpinner").show();
        progressData = dataItem;
        $.post(pathRoot + "Frequencies/FairGetFrequenciesJSON", { attId: 0, setId: dataItem.setId, included: true, onlyThisAttribute: topicAttribute.attributeId }
            , function (data, result) {
                $("#FreqSpinner").hide();
                if (result == "success") {
                    freqData = data;
                    BuildPie();
                } else {
                    $("#FrequenciesGrid").html("");
                }
            });
    }

    function GetFreqsPie() {
        if (!progressData) {
            return;
        } else {
            BuildPie();
            return;
        }
    }


    function GetFreqsTable() {
        if (!progressData) {
            return;
        } else {
            BuildFreqs();
            return;
        }
    }

    function BuildFreqs() {

        let myData = [];
        // put in array for manipulating without disturbing the original
        for (var i = freqData.results.length - 1; i >= 0; i--) {
            myData.push(freqData.results[i]);
        }
        if (myData.length == 0) return;

        for (var i = 0; i < myData.length; i++) {
            // shorten codes names that are stupid long
            if (myData[i].attribute.length > 60) {
                myData[i].shortName = myData[i].attribute.substring(0, 60) + "...";
            } else {
                myData[i].shortName = myData[i].attribute;
            }
        }

        // remove the last row if it is 'none of the above'
        if (myData[0].attributeId == -999999) {
            myData.splice(0, 1);
        }

        $("#FrequencyPie").prop("disabled", false);
        $("#FrequencyTable").prop("disabled", true);
        $("#FrequenciesGrid").show();
        $("#FrequenciesChart").hide();
        $("#FrequenciesGrid").kendoGrid({
            rowTemplate: kendo.template($("#FrequenciesTemplate").html()),
            columns: [
                {
                    field: "attribute",
                    title: "Code Name",
                    headerAttributes: {
                        "class": "small py-0 px-1 font-weight-bold w-75"
                    }
                },
                {
                    field: "itemCount",
                    title: "Count",
                    headerAttributes: {
                        "class": "small py-0 px-1 font-weight-bold w-25"
                    }
                }],
            dataSource: { data: myData }
        });

    }

    function BuildPie() {

        let myData = [];
        // remove all of the rows that have zero values
        for (var i = freqData.results.length - 1; i >= 0; i--) {
            if (freqData.results[i].itemCount > 0) {
                myData.push(freqData.results[i]);
            }
        }
        if (myData.length == 0) return;

        for (var i = 0; i < myData.length; i++) {
            // shorten codes names that are stupid long
            if (myData[i].attribute.length > 60) {
                myData[i].shortName = myData[i].attribute.substring(0, 60) + "...";
            } else {
                myData[i].shortName = myData[i].attribute;
            }
        }

        // remove the last row if it is 'none of the above'
        if (myData[0].attributeId == -999999) {
            myData.splice(0, 1);
        }

        var legendPostion = "right";
        var chartHeight = 250;

        var ele = document.getElementById("VisualsDiv"), // Do not use #
            eleStyle = window.getComputedStyle(ele);
        /* Below is the width of ele */
        var eleWidth = parseInt(eleStyle.width.replace("px", ""));

        //if (eleWidth <= 768) {
        if (eleWidth <= 570) {
            legendPostion = "bottom";
            chartHeight = 400;
        }

        if (myData.length > 20) {
            legendPostion = "bottom";
            chartHeight = 400;
        }

        //$("#FrequenciesGrid").hide();
        $("#FrequencyPie").prop("disabled", true);
        $("#FrequencyTable").prop("disabled", false);
        $("#FrequenciesGrid").hide();
        $("#FrequenciesChart").show();
        if (myData.length != 0) {
            //$("#BarOrPieChartVisible").show();
            //$("#FrequenciesChart").show();
            //$("#NoCodedRecords").hide();

            $("#FrequenciesChart").kendoChart({
                dataSource: { data: myData },
                chartArea: {
                    height: chartHeight
                },
                seriesDefaults: {
                    type: "pie"
                },
                seriesClick: function (e) {
                    GoToFreqListPieAndBar(e);
                },
                series: [{
                    field: "itemCount",
                    categoryField: "shortName",
                    padding: 0
                }],
                tooltip: {
                    visible: true,
                    template: "#= HTMLEncodeText(dataItem.attribute) #: #= value # records"
                },
                legend: {
                    item: {
                        visual: function (e) {
                            var color = e.options.markers.background;
                            var labelColor = e.options.labels.color;

                            var rect = new kendo.geometry.Rect([0, 0], [400, 50]);
                            if (eleWidth <= 570) {
                                rect = new kendo.geometry.Rect([0, 0], [400, 100]);
                            }


                            var layout = new kendo.drawing.Layout(rect, {
                                spacing: 10
                            });

                            var allZeroValues = false;
                            if (e.series.data[e.pointIndex].itemCount == 0) {
                                allZeroValues = true;
                            }

                            if (!allZeroValues) {
                                // create a circle geometry centered at x=10, y=5, with a radius of 5
                                var CircGeometry = new kendo.geometry.Circle([10, 5], 5);
                                // draw the circle using the geometry and set the color (could have no stroke)
                                var MarkerCircle = new kendo.drawing.Circle(CircGeometry, {
                                    stroke: { color: color, width: 1 },
                                    fill: { color: color }
                                });

                                var label = new kendo.drawing.Text(e.series.data[e.pointIndex].shortName + " (" +
                                    e.series.data[e.pointIndex].itemCount + ")", [0, 0], {
                                    fill: {
                                        color: labelColor
                                    }
                                });

                                layout.append(MarkerCircle, label);
                                layout.reflow()
                            }
                            return layout;
                        }
                    },
                    position: legendPostion,
                    padding: 10,
                    background: "#e2e3e5",
                    border: {
                        width: 1,
                        color: "#d6d8db"
                    },
                },
            });
        }
        else {
            //$("#BarOrPieChartVisible").hide();
            //$("#FrequenciesChart").hide();
            //$("#NoCodedRecords").show();
        }
    }
    function GoToFreqListPieAndBar(code) {
        GoToItemsJson(code.dataItem, true);
    }

    function GetFreqLinkContent(attribute, attributeId, itemCount, setId) {
        if (itemCount == 0) return "0";
        else {
            var name = attribute.replaceAll('\'', '\\\'').toString();
            name = name.replaceAll('\"', '%22');
            return '<a href="javascript:GoToFreqTable(\'' + name + '\', \'' + attributeId + '\',\'' + setId +
                '\')" style="color: #007bff!important;">' +
                itemCount.toString() + '</a>';
        }
    }

    function GoToFreqListPieAndBar(code) {
        GoToItemsJson(code.dataItem, true);
    }

    function GoToFreqTable(attribute, attributeId, setId) {
        GoToTableItemsJson(attribute, attributeId, setId, true);
    }

    function GoToTableItemsJson(attribute, attributeId, setId, useFilter = true) {
        $("#ItemCount").html("");
        $("#ItemsGrid").empty();
        $("#ItemsGrid").kendoGrid();
        const included = 'true';
        let spinnerItems = $("#spinnerItems");
        if (spinnerItems) spinnerItems.show();

        //ALERT! we're taking for granted that we do NOT support "none of the above" frequency results...
        var Destination = pathRoot + "ItemList/FairGetFreqListJson";
        var pars = {};
        if (useFilter) {
            Destination = pathRoot + "ItemList/FairGetListWithWithoutAttsJSON";
            var Descript = "Items with: " + attribute + " and " + topicAttribute.attributeName;
            var WithAttIds = attributeId.toString() + "," + topicAttribute.attributeId.toString();
            var WithSetId = setId.toString() + "," + topicAttribute.setId.toString();
            pars = {
                WithAttIds: WithAttIds
                , WithSetId: WithSetId
                , WithoutAttIds: ''
                , WithoutSetId: ''
                , included: included
                , Description: Descript
            };
        }
        else {
            pars = { attId: AttributeSet.attributeId, attName: AttributeSet.attributeName };
        }

        $.post(Destination
            , pars
            , function (data, result) {
                if (spinnerItems) spinnerItems.hide();
                BuildItems(data, result);
            }
        );
    }

    function GoToItemsJson(AttributeSet, useFilter = true) {
        $("#ItemCount").html("");
        $("#ItemsGrid").empty();
        $("#ItemsGrid").kendoGrid();
        const included = 'true';
        let spinnerItems = $("#spinnerItems");
        if (spinnerItems) spinnerItems.show();

        //ALERT! we're taking for granted that we do NOT support "none of the above" frequency results...
        var Destination = pathRoot + "ItemList/FairGetFreqListJson";
        var pars = {};
        if (useFilter) {
            Destination = pathRoot + "ItemList/FairGetListWithWithoutAttsJSON";
            var Descript = "Items with: " + AttributeSet.attribute + " and " + topicAttribute.attributeName;
            var WithAttIds = AttributeSet.attributeId.toString() + "," + topicAttribute.attributeId.toString();
            var WithSetId = AttributeSet.setId.toString() + "," + topicAttribute.setId.toString();
            pars = {
                WithAttIds: WithAttIds
                , WithSetId: WithSetId
                , WithoutAttIds: ''
                , WithoutSetId: ''
                , included: included
                , Description: Descript
            };
        }
        else {
            pars = { attId: AttributeSet.attributeId, attName: AttributeSet.attributeName };
        }

        $.post(Destination
            , pars
            , function (data, result) {
                if (spinnerItems) spinnerItems.hide();
                BuildItems(data, result);
            }
        );

        //}
    }

</script>

<!-- blue area below header -->
<div class="panel-header bg-primary-gradient">
    <div class="page-inner py-5">
        <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row">
            <table>
                <tr>
                    <td>
                        <h2 class="text-white pb-2 fw-bold">Spacer</h2>
                    </td>
                </tr>
                <tr>
                    <td><h2 class="text-white pb-2 fw-bold">@Model.TopicAttribute.AttributeName</h2></td>
                </tr>
            </table>
        </div>
    </div>
</div>


<div class="page-inner mt--5">
    <div class="row mt--2">

        <div class="col-md-3">
            <div class="card full-height">
                <div class="card-body">
                    <div class="card-title">Explore</div>

                    <div class="scrollbar scrollbar-inner">
                        <div class="">
                            @await Html.PartialAsync("_FairCodingTools")
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card full-height">
                <div class="card-body">
                    <div class="card-title">@Model.TopicAttribute.AttributeName</div>
                    <div class="row py-3">
                        <div class="card-body" id="WebDBDescriptionBody" tooltip="">
                            <div class="card-category" id="WebDBDescription" style="overflow-y:auto;">
                                @{
                                    if (Model.TopicAttribute.ExtType != "")
                                    { <img class="float-right" src="@Model.ImagesBaseUrl@Model.TopicAttribute.ExtType" /> }
                                }
                                @Model.TopicAttribute.AttributeSetDescription
                            </div>
                            <div class="large m-2 p-1">
                                <a href="@Model.TopicAttribute.ExtURL" target="_blank">Wikipedia page</a>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>



        <div class="col-md-3">
            <div class="card full-height">
                <div class="card-body">

                    <div class="card-title">
                        Statistics&nbsp;&nbsp;
                        <button class="btn btn-primary btn-sm btn-round" onclick="GetFreqsPie()" id="FrequencyPie">
                            <span class="btn-label">
                                <i class="fa fa-chart-pie"></i>
                            </span>
                            Pie
                        </button>
                        <button class="btn btn-primary btn-sm btn-round" onclick="GetFreqsTable()" id="FrequencyTable">
                            <span class="btn-label">
                                <i class="fa fa-table"></i>
                            </span>
                            Table
                        </button>
                    </div>
                    <div class="row py-3">
                        <div id="FreqSpinner" class="ml-2" style="display:none;">
                            <div class="d-flex justify-content-end">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </div>
                        </div>
                        <div id="VisualsDiv" class="w-100">
                            <div id="FrequenciesChart" style="overflow-y:auto;" class="chart"></div>
                            <div id="FrequenciesGrid"></div>
                        </div>

                        <script id="FrequenciesTemplate" type="text/x-kendo-tmpl">
                            <tr class="border border-bottom ">
                                <td class="px-1 py-0 border-bottom small w-75">
                                    #= HTMLEncodeText(attribute) #
                                </td>
                                <td class="px-1 py-0 border-bottom small w-25">
                                    #= GetFreqLinkContent(attribute, attributeId, itemCount, setId) #
                                </td>
                            </tr>
                        </script>
                    </div>



                </div>
            </div>
        </div>


        <div class="card w-100">
            <div id="spinnerItems" class="col-12 row m-0" style="display:none;">
                <div class="col-auto p-1">Loading...</div>
                <div class="col d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>

            @await Html.PartialAsync("_ItemsList")
        </div>
    </div>
</div>
