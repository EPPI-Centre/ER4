@model BusinessLibrary.BusinessClasses.WebDbFrequencyCrosstabAndMapSelectionCriteria
@using BusinessLibrary.BusinessClasses







<script type="text/javascript">
    $(document).ready(function () {
        //console.log("ready function is happening");
        var pars = {
            attIdx: @Model.attributeIdXAxis
            , setIdx: @Model.setIdXAxis
            , attIdy: @Model.attributeIdYAxis
            , setIdy: @Model.setIdYAxis
            , included: @Model.included
            , graphic: "table"
        };

        $("#spinner").show();
        $.post("../Frequencies/GetCrosstabJSON", pars, (data, status) => {
            if (status == "success") {
                xTabData = data;
                buildTable();
            }
        });
        //$('[tool-tip-toggle="tooltip-demo"]').tooltip({
        //    placement: 'top'
        //});
    });
    let xTabData = null;
    let rgx = new RegExp("'", 'g');
    let rgx2 = new RegExp("\"", 'g');
    let rgxRev = new RegExp("↖", 'g');
    let rgx2Rev = new RegExp("↗", 'g');

    function buildTable() {
        if (xTabData == null) return;
        const CrosstabsGrid = $("#CrosstabsGrid");
        const ResultsTitle = $("#ResultsTitle");
        let evenRow = false, evenCol = false;
        let headerClass = "";
        $("#BubbleLegend").html("");
        if (!CrosstabsGrid || !ResultsTitle) return;
        let rTab = "<table class=''><tr><th></th>";
        htmlTitle = "<h5 class=\"card-title mb-3\">Cross-tab report</h5>";
        if ((xTabData.attibuteIdX == 0) && (xTabData.attibuteIdY == 0)) {
            htmlTitle += "<h5><b>(Column) " + HTMLEncodeText(xTabData.setIdXName) + "</b> vs <b>(Row) " + HTMLEncodeText(xTabData.setIdYName) + "</b></h5>";
        }
        if ((xTabData.attibuteIdX != 0) && (xTabData.attibuteIdY != 0)) {
            htmlTitle += "<h5><b>(Column) " + HTMLEncodeText(xTabData.attibuteIdXName) + "</b> vs <b>(Row) " + HTMLEncodeText(xTabData.attibuteIdYName) + "</b></h5>";
        }
        if ((xTabData.attibuteIdX == 0) && (xTabData.attibuteIdY != 0)) {
            htmlTitle += "<h5><b>(Column) " + HTMLEncodeText(xTabData.setIdXName) + "</b> vs <b>(Row) " + HTMLEncodeText(xTabData.attibuteIdYName) + "</b></h5>";
        }
        if ((xTabData.attibuteIdX != 0) && (xTabData.attibuteIdY == 0)) {
            htmlTitle += "<h5><b>(Column) " + HTMLEncodeText(xTabData.attibuteIdXName) + "</b> vs <b>(Row) " + HTMLEncodeText(xTabData.setIdYName) + "</b></h5>";
        }
        ResultsTitle.html(htmlTitle);
        for (let i = 0; i < xTabData.columnAttIDs.length; i++){
            if (evenCol) {
                headerClass = "xTabHeaderA";
            } else {
                headerClass = "xTabHeaderB";
            }
            rTab += "<th class='" + headerClass +"'>" + HTMLEncodeText(xTabData.columnAttNames[i]) + "</th>";
            evenCol = !evenCol;
        }
        rTab += "</tr>";
        for (let row of xTabData.rows)
        {
            if (evenRow) {
                headerClass = "xTabHeaderA";
            } else {
                headerClass = "xTabHeaderB";
            }
            evenRow = !evenRow;
            rTab += "<tr><th class='" + headerClass + "'>" + HTMLEncodeText(row.attributeName) + "</th>";
            for (let i = 0; i < xTabData.columnAttIDs.length; i++) {
                if (row.counts[i] == 0) {
                    rTab += "<td class='td_XtabEmptyCell'>0</td>";
                }
                else if (row == xTabData.rows[xTabData.rows.length - 1]) {//last row: with column header, without all the row codes
                    let withS = xTabData.columnAttIDs[i].toString();
                    let without = "";
                    let withoutSets = "";
                    let descript = "Records without " + HTMLEncodeText(xTabData.columnAttNames[i]).replace(rgx, "&nwarr;").replace(rgx2, "&nearr;");
                    for (let ri = 0; ri < xTabData.rows.length - 1; ri++) {//skip last row!
                        without += xTabData.rows[ri].attributeId.toString() + ",";
                        withoutSets += xTabData.setIdY.toString() + ",";
                    }
                    without = without.substring(0, without.length - 1);
                    withoutSets = withoutSets.substring(0, withoutSets.length - 1);
                    rTab += "<td class='td_XtabCell' style=\"background-color: rgba(211, 211, 255, 0.20)\">";
                    rTab += "<a href=\"javascript:GoToItemsJson('" + withS + "', '" + xTabData.setIdX.toString() + "', '"
                        + without + "', '" + withoutSets + "', '" + descript + "')\">" + row.counts[i] + "</a></td>";
                }
                else if (i == xTabData.columnAttIDs.length - 1) {//last cell: with row header, without all the column codes
                    let withS = row.attributeId.toString();
                    let without = "";
                    let withoutSets = "";
                    let descript = "Records without " + HTMLEncodeText(row.attributeName).replace(rgx, "&nwarr;").replace(rgx2, "&nearr;");
                    for (let ci = 0; ci < row.counts.length - 1; ci++) {//skip last column!
                        without += xTabData.columnAttIDs[ci].toString() + ",";
                        withoutSets += xTabData.setIdX.toString() + ",";
                    }
                    without = without.substring(0, without.length - 1);
                    withoutSets = withoutSets.substring(0, withoutSets.length - 1);
                    rTab += "<td class='td_XtabCell' style=\"background-color:rgba(211, 211, 255, 0.20)\">";
                    rTab += "<a href=\"javascript:GoToItemsJson('" + withS + "', '" + xTabData.setIdY.toString() + "', '"
                        + without + "', '" + withoutSets + "', '" + descript + "')\">" + row.counts[i] + "</a></td>";
                }
                else {//normal cell, with row and col codes
                    let withS = row.attributeId.toString() + "," + xTabData.columnAttIDs[i].toString();
                    let withSets = xTabData.setIdY.toString() + "," + xTabData.setIdX.toString();
                    let descript = HTMLEncodeText(xTabData.columnAttNames[i]).replace(rgx, "&nwarr;").replace(rgx2, "&nearr;")
                        + " [AND] " + HTMLEncodeText(row.attributeName).replace(rgx, "&nwarr;").replace(rgx2, "&nearr;");
                    rTab += "<td class='td_XtabCell' style=\"background-color:rgba(211, 211, 255, 0.20)\">";
                    rTab += "<a href=\"javascript:GoToItemsJson('" + withS + "', '" + withSets + "', '', '', '" + descript + "')\">" + row.counts[i] + "</a></td>";
                }
            }
            rTab += "</tr >";
        }
        rTab += "</table >";
        CrosstabsGrid.html(rTab);
        $("#spinner").hide();
    }

    function GoToItemsJson(WithAttIds, WithSetId, WithoutAttIds, WithoutSetId, Descript) {
        $("#ItemCount").html("");
        $("#ItemsGrid").empty();
        $("#ItemsGrid").kendoGrid();
        let spinnerItems = $("#spinnerItems");
        if (spinnerItems) spinnerItems.show();
        var pars = {
            WithAttIds: WithAttIds
            , WithSetId: WithSetId
            , WithoutAttIds: WithoutAttIds
            , WithoutSetId: WithoutSetId
            , included: @Model.included
            , Description: Descript.replace(rgxRev, '\'').replace(rgx2Rev, '"')
        }
        $.post("../ItemList/GetListWithWithoutAttsJSON"
            , pars
            , function (data, result) {
                if (spinnerItems) spinnerItems.hide();
                BuildItems(data, result);
            }
        );

    }


    function BubbleMap(isLinear) {
        const CrosstabsGrid = $("#CrosstabsGrid");
        const ResultsTitle = $("#ResultsTitle");
        if (!CrosstabsGrid || !ResultsTitle) return;
        let maxVal = 0;
        let rTab = "";
        let fa1 = 0;
        let fa2 = 0;
        let fa3 = 0;
        let fa4 = 0;
        let fa5 = 0;
        let fa6 = 0;
        for (let i = 0; i < xTabData.rows.length - 1; i++)//ignore the last row
        {
            for (let j = 0; j < xTabData.rows[i].counts.length - 1; j++)//ignore the last column
            {
                if (xTabData.rows[i].counts[j] > maxVal) maxVal = xTabData.rows[i].counts[j];
            }
        }
        if (maxVal < 7) {
            fa1 = 1;
            fa2 = 2;
            fa3 = 3;
            fa4 = 4;
            fa5 = 5;
            fa6 = 6;
        }
        else if (isLinear) {
            fa1 = maxVal / 6;
            fa2 = fa1 * 2;
            fa3 = fa1 * 3;
            fa4 = fa1 * 4;
            fa5 = fa1 * 5;
            fa6 = maxVal;
        } else {
            //log scale!
            fa6 = Math.log10(maxVal);
            fa1 = fa6 / 6;
            fa5 = fa6 - fa1;
            fa4 = fa5 - fa1;
            fa3 = fa4 - fa1;
            fa2 = fa3 - fa1;
        }
        let evenRow = false, evenCol = false;
        let headerClass = "";
        //console.log(fa1, fa2, fa3, fa4, fa5, fa6);
        rTab += "<table class=\"table-bordered\"><tr><th></th>";
        for (let i = 0; i < xTabData.columnAttIDs.length - 1; i++) {
            if (evenCol) {
                headerClass = "xTabHeaderA";
            } else {
                headerClass = "xTabHeaderB";
            }
            evenCol = !evenCol;
            rTab += "<th class='"+ headerClass + "' >" + HTMLEncodeText(xTabData.columnAttNames[i]) + "</th>";
        }
        rTab += "</tr>";
        for (let ri = 0; ri < xTabData.rows.length - 1; ri++) {
            let row = xTabData.rows[ri];
            if (evenRow) {
                headerClass = "xTabHeaderA";
            } else {
                headerClass = "xTabHeaderB";
            }
            evenRow = !evenRow;
            rTab += "<tr><th class='" +headerClass +"' >" + HTMLEncodeText(row.attributeName) + "</th>";
            for (let i = 0; i < xTabData.columnAttIDs.length - 1; i++) {
                if (row.counts[i] == 0) {
                    rTab += "<td></td>"
                }
                else {
                    let withS = row.attributeId.toString() + "," + xTabData.columnAttIDs[i].toString();
                    let withSets = xTabData.setIdY.toString() + "," + xTabData.setIdX.toString();
                    let dimension = "";
                    let descript = HTMLEncodeText(xTabData.columnAttNames[i]).replace(rgx, "&nwarr;").replace(rgx2, "&nearr;")
                        + " [AND] " + HTMLEncodeText(row.attributeName.replace(rgx, "&nwarr;").replace(rgx2, "&nearr;"));
                    let classN = "";
                    if (isLinear || maxVal < 7) {//if we have 6 or less possible values, we don't bother with log scale!!
                        dimension = (4 * (row.counts[i] / maxVal) + 0.8).toString() + "em;";
                        if (row.counts[i] > fa5) {
                            classN = "xTabColour-6x";
                        }
                        else if (row.counts[i] > fa4) {
                            classN = "xTabColour-5x";
                        }
                        else if (row.counts[i] > fa3) {
                            classN = "xTabColour-4x";
                        }
                        else if (row.counts[i] > fa2) {
                            classN = "xTabColour-3x";
                        }
                        else if (row.counts[i] > fa1) {
                            classN = "xTabColour-2x";
                        }
                        else {
                            classN = "xTabColour-1x";
                        }
                    }
                    else {
                        //log scale!
                        dimension = (4 * (Math.log10(row.counts[i]) / fa6) + 0.8).toString() + "em;";
                        if (Math.log10(row.counts[i]) > fa5) {
                            classN = "xTabColour-6x";
                        }
                        else if (Math.log10(row.counts[i]) > fa4) {
                            classN = "xTabColour-5x";
                        }
                        else if (Math.log10(row.counts[i]) > fa3) {
                            classN = "xTabColour-4x";
                        }
                        else if (Math.log10(row.counts[i]) > fa2) {
                            classN = "xTabColour-3x";
                        }
                        else if (Math.log10(row.counts[i]) > fa1) {
                            classN = "xTabColour-2x";
                        }
                        else {
                            classN = "xTabColour-1x";
                        }
                    }
                    rTab += "<td style=\"text-align:center;vertical-align:middle\">"
                        + "<a href=\"javascript:GoToItemsJson('" + withS + "', '" + withSets + "', '', '', '" + descript + "')\">";
                    rTab += "<i class=\"fa fa-circle " + classN + "\" style=\"font-size:" + dimension + "\" tool-tip-toggle=\"tooltip-demo\" data-original-title=\"" + HTMLEncodeText(row.counts[i]) + " records\"></i>"
                        +"</a></td>";
                }
            }
            rTab += "</tr>";
        }
        rTab += "</table>";
        
        console.log(rTab);
        CrosstabsGrid.html(rTab);
        $('[tool-tip-toggle="tooltip-demo"]').tooltip({
            placement: 'top'
        });
        if (isLinear == false && maxVal > 6) {
            //log scale, we update our faX vals to make them work below...
            fa1 = Math.pow(10, fa1);
            fa2 = Math.pow(10, fa2);
            fa3 = Math.pow(10, fa3);
            fa4 = Math.pow(10, fa4);
            fa5 = Math.pow(10, fa5);
            fa6 = Math.pow(10, fa6);
        }
        rTab = "<div class='row mx-0 px-0 mt-1 mb-2'><div class='col-12 font-weight-bold'>Legend:</div>";
        if (fa1 <= maxVal) rTab += "<div class='col-auto mx-2'><i class='fa fa-circle xTabColour-1x mx-1'></i>" + "1 - " + (Math.trunc(fa1)).toString() + " records</div>";
        if (fa2 <= maxVal) rTab += "<div class='col-auto mx-2'><i class='fa fa-circle xTabColour-2x mx-1'></i>" + (Math.trunc(fa1) + 1).toString() + " - " + (Math.trunc(fa2)).toString() + " records</div>";
        if (fa3 <= maxVal) rTab += "<div class='col-auto mx-2'><i class='fa fa-circle xTabColour-3x mx-1'></i>" + (Math.trunc(fa2) + 1).toString() + " - " + (Math.trunc(fa3)).toString() + " records</div>";
        if (fa4 <= maxVal) rTab += "<div class='col-auto mx-2'><i class='fa fa-circle xTabColour-4x mx-1'></i>" + (Math.trunc(fa3) + 1).toString() + " - " + (Math.trunc(fa4)).toString() + " records</div>";
        if (fa5 <= maxVal) rTab += "<div class='col-auto mx-2'><i class='fa fa-circle xTabColour-5x mx-1'></i>" + (Math.trunc(fa4) + 1).toString() + " - " + (Math.trunc(fa5)).toString() + " records</div>";
        if (fa6 <= maxVal) rTab += "<div class='col-auto mx-2'><i class='fa fa-circle xTabColour-6x mx-1'></i>" + (Math.trunc(fa5) + 1).toString() + " records or more</div></div>";
        $("#BubbleLegend").html(rTab);
    }

</script>



<br />
<br />
<br />
<div class="main-panel main-panel-no-sidebar">

    <div class="page-inner px-2 py-1">
        <div class="card mb-2">
            <div class="card-body">
                <div class="card-body" style="max-width:99vw; overflow:auto;">
                    <table width="100%">
                        <tr>
                            <td id="ResultsTitle"></td>
                            <td style="text-align:right">
                                <div class="card-tools">
                                    <button class="btn btn-primary btn-sm btn-round" onclick="buildTable()">
                                        <span class="btn-label">
                                            <i class="fa fa-table"></i>
                                        </span>
                                        Table
                                    </button>
                                    <button class="btn btn-primary btn-sm btn-round" onclick="BubbleMap(true)">
                                        <span class="btn-label">
                                            <i class="fa fa-circle"></i>
                                        </span>
                                        Bubble map
                                    </button>
                                    <button class="btn btn-primary btn-sm btn-round" onclick="BubbleMap(false)">
                                        <span class="btn-label">
                                            <i class="fa fa-circle"></i>
                                        </span>
                                        Bubble (log)
                                    </button>
                                    <!--<a href="#" class="btn btn-info btn-border btn-round btn-sm mr-2">
                                        <span class="btn-label">
                                            <i class="fa fa-file-excel"></i>
                                        </span>
                                        Export
                                    </a>-->
                                    <!--<a href="#" class="btn btn-info btn-border btn-round btn-sm">
                                        <span class="btn-label">
                                            <i class="fa fa-copy"></i>
                                        </span>
                                        Copy
                                    </a>-->
                                </div>
                            </td>
                        </tr>
                    </table>
                    <div id="spinner" class="w-100" style="display:none;">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body row my-1 py-1">
                        <div class="d-block" id="CrosstabsGrid" style="max-height:55vh;overflow:auto;"></div>
                        <div class="col-12" id="BubbleLegend" ></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div id="spinnerItems" class="col-12 row m-0" style="display:none;">
                <div class="col-auto p-1">Loading...</div>
                <div class="col d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
            @await Html.PartialAsync("_ItemsList")
        </div>
    </div>
</div>

