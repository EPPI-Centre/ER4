@model BusinessLibrary.BusinessClasses.WebDbItemAttributeCrosstabList
@using BusinessLibrary.BusinessClasses
Crosstab!
<script type="text/javascript">
    function GoToItems(WithAttIds, WithSetId, WithoutAttIds, WithoutSetId) {
        
        postwith("../ItemList/GetListWithWithoutAtts",
            {
                WithAttIds: WithAttIds
                , WithSetId: WithSetId
                , WithoutAttIds: WithoutAttIds
                , WithoutSetId: WithoutSetId
                , included: @Model.Included
            });
    }
</script>

<input type="hidden" value="@Model.Included" name="included" id="includedCrit" />
<input type="hidden" value="@Model.SetIdY" name="setIdYAxis" id="setIdYAxisCrit" />
<input type="hidden" value="@Model.SetIdX" name="setIdXAxis" id="setIdXAxisCrit" />
<input type="hidden" value="@Model.FilterAttributeId" name="onlyThisAttribute" id="onlyThisAttributeCrit" />
<input type="hidden" value="@Model.WebDbId" name="webDbId" id="webDbIdCrit"/>


<table class="table table-striped">
    <tr>
        <th></th>
        @for (int i = 0; i < Model.ColumnAttIDs.Count; i++)
        {
            <th>
                @Model.ColumnAttNames[i]
            </th>
        }

    </tr>
    @foreach (WebDbItemAttributeCrosstabRow row in Model.Rows)
    {
        <tr>
            <td>@row.AttributeName</td>
            @for (int i = 0; i < Model.ColumnAttIDs.Count; i++)
            {
                @if (row.Counts[i] == 0)
                {
                    <td>
                        0
                    </td>
                }
                else if (row == Model.Rows[Model.Rows.Count - 1])
                {//last row, with column header, without all the row codes
                    string with = Model.ColumnAttIDs[i].ToString();
                    string without = "";
                    string withoutSets = "";
                    for (int ri = 0; ri < Model.Rows.Count - 1; ri++)//skip last row!
                    {
                        without += Model.Rows[ri].AttributeId.ToString() + ",";
                        withoutSets += @Model.SetIdY.ToString() + ",";
                    }
                    without = without.TrimEnd(',');
                    withoutSets = withoutSets.TrimEnd(',');
                    <td>
                        <a href="javascript:GoToItems('@with', '@Model.SetIdX.ToString()', '@without', '@withoutSets')">@row.Counts[i]</a>
                    </td>
                }
                else if (i == Model.ColumnAttIDs.Count - 1)
                {//last cell with row header, without all the column codes
                    string with = row.AttributeId.ToString();
                    string without = "";
                    string withoutSets = "";
                    for (int ci = 0; ci < row.Counts.Count - 1; ci++)//skip last column!
                    {
                        without += Model.ColumnAttIDs[ci].ToString() + ",";
                        withoutSets += @Model.SetIdX.ToString() + ",";
                    }
                    without = without.TrimEnd(',');
                    withoutSets = withoutSets.TrimEnd(',');
                    <td>
                        <a href="javascript:GoToItems('@with', '@Model.SetIdY.ToString()', '@without', '@withoutSets')">@row.Counts[i]</a>
                    </td>
                }
                else
                {//normal cell, with row and col codes
                    string with = row.AttributeId.ToString() + "," + Model.ColumnAttIDs[i].ToString();
                    string withSets = Model.SetIdY.ToString() + "," + Model.SetIdX.ToString();
                    <td>
                        <a href="javascript:GoToItems('@with', '@withSets', '', '')">@row.Counts[i]</a>
                    </td>
                }
            }
        </tr>
    }
</table>

