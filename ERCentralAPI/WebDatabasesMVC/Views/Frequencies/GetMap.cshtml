@model BusinessLibrary.BusinessClasses.WebDbItemAttributeCrosstabList
@using BusinessLibrary.BusinessClasses


<input type="hidden" value="@Model.Included" name="included" id="includedCrit" />
<input type="hidden" value="@Model.SetIdY" name="setIdYAxis" id="setIdYAxisCrit" />
<input type="hidden" value="@Model.SetIdX" name="setIdXAxis" id="setIdXAxisCrit" />
<input type="hidden" value="@Model.FilterAttributeId" name="onlyThisAttribute" id="onlyThisAttributeCrit" />
<input type="hidden" value="@Model.WebDbId" name="webDbId" id="webDbIdCrit" />

<input type="hidden" value="@Model.SetIdXName" name="SetIdXName" id="SetIdXNameCrit" />
<input type="hidden" value="@Model.SetIdYName" name="SetIdYName" id="SetIdYNameCrit" />
<input type="hidden" value="@Model.AttibuteIdX" name="AttibuteIdXAxis" id="AttibuteIdXCrit" />
<input type="hidden" value="@Model.AttibuteIdY" name="AttibuteIdYAxis" id="AttibuteIdYCrit" />
<input type="hidden" value="@Model.AttibuteIdXName" name="AttibuteIdXName" id="AttibuteIdXNameCrit" />
<input type="hidden" value="@Model.AttibuteIdYName" name="AttibuteIdYName" id="AttibuteIdYNameCrit" />
<input type="hidden" value="@Model.Graphic" name="Graphic" id="GraphicCrit" />




<script type="text/javascript">
    $(document).ready(function () {
        $('[tool-tip-toggle="tooltip-demo"]').tooltip({
            placement: 'top'
        });
    });
</script>


<script type="text/javascript">




    @*function GoToItems(WithAttIds, WithSetId, WithoutAttIds, WithoutSetId, Descript) {
        var pars = {
            WithAttIds: WithAttIds
            , WithSetId: WithSetId
            , WithoutAttIds: WithoutAttIds
            , WithoutSetId: WithoutSetId
            , included: @Model.Included
            , Description: Descript.replaceAll('&#39;', '\'')
        }
        postwith("../ItemList/GetListWithWithoutAtts", pars);

    }*@

    function GoToItemsJson(WithAttIds, WithSetId, WithoutAttIds, WithoutSetId, Descript) {
        $("#ItemCount").html("Loading...");
        $("#ItemsGrid").empty();
        $("#ItemsGrid").kendoGrid();
        var pars = {
            WithAttIds: WithAttIds
            , WithSetId: WithSetId
            , WithoutAttIds: WithoutAttIds
            , WithoutSetId: WithoutSetId
            , included: @Model.Included
            , Description: Descript.replaceAll('&#39;', '\'')
        }
        $.post("../ItemList/GetListWithWithoutAttsJSON"
            , pars
            , function (data, result) { BuildItems(data, result); }
        );

    }


    function ReloadCrosstab() {
        if (!@Model.SetIdX) {
            console.log("CurrentNodeGoToCrosstab no data");
            return;
        }
        $("#CrosstabsGrid").show();
        $("#CrosstabsChart").hide();
        var pars = {
            attIdx: @Model.AttibuteIdX
            , setIdx: @Model.SetIdX
            , attIdy: @Model.AttibuteIdY
            , setIdy: @Model.SetIdY
            , segmentsParent: @Model.AttibuteIdSegments
            , setIdSegments: @Model.SetIdSegments
            , included: true
            , graphic: "table"
        }
        postwith("../Frequencies/GetMap", pars);
    }

    function BubbleMap() {
        if (!@Model.SetIdX) {
            console.log("CurrentNodeGoToCrosstab no data");
            return;
        }
        $("#CrosstabsGrid").hide();
        $("#CrosstabsChart").show();
        var pars = {
            attIdx: @Model.AttibuteIdX
            , setIdx: @Model.SetIdX
            , attIdy: @Model.AttibuteIdY
            , setIdy: @Model.SetIdY
            , segmentsParent: @Model.AttibuteIdSegments
            , setIdSegments: @Model.SetIdSegments
            , included: true
            , graphic: "bubble"
        }
        postwith("../Frequencies/GetMap", pars);
    }

        function BubbleMapLog() {
        if (!@Model.SetIdX) {
            console.log("CurrentNodeGoToCrosstab no data");
            return;
        }
        $("#CrosstabsGrid").hide();
        $("#CrosstabsChart").show();
        var pars = {
            attIdx: @Model.AttibuteIdX
            , setIdx: @Model.SetIdX
            , attIdy: @Model.AttibuteIdY
            , setIdy: @Model.SetIdY
            , segmentsParent: @Model.AttibuteIdSegments
            , setIdSegments: @Model.SetIdSegments
            , included: true
            , graphic: "bubbleLog"
        }
            postwith("../Frequencies/GetMap", pars);
    }

</script>



<br />
<br />
<br />
<div class="main-panel main-panel-no-sidebar">

    <div class="page-inner">

        <div class="card">
            <div class="card-body">
                <div class="card-body" style="max-height:70vh; max-width:99vw; overflow:auto;">
                    <table width="100%">
                        <tr>
                            <td>
                                <h5 class="card-title mb-3">Evidence (gap) Map</h5>
                                @if ((@Model.AttibuteIdX == 0) && (Model.AttibuteIdY == 0))
                                {
                                    <h5>"<b>(Column) @Model.SetIdXName.ToString()</b>" vs "<b>(Row) @Model.SetIdYName.ToString()</b>", segments: "@Model.AttibuteIdSegmentsName"</h5>
                                }
                                @if ((@Model.AttibuteIdX != 0) && (Model.AttibuteIdY != 0))
                                {
                                    <h5>"<b>(Column) @Model.AttibuteIdXName.ToString()</b>" vs "<b>(Row) @Model.AttibuteIdYName.ToString()</b>", segments: "@Model.AttibuteIdSegmentsName"</h5>
                                }
                                @if ((@Model.AttibuteIdX == 0) && (Model.AttibuteIdY != 0))
                                {
                                    <h5>"<b>(Column) @Model.SetIdXName.ToString()</b>" vs "<b>(Row) @Model.AttibuteIdYName.ToString()</b>", segments: "@Model.AttibuteIdSegmentsName"</h5>
                                }
                                @if ((@Model.AttibuteIdX != 0) && (Model.AttibuteIdY == 0))
                                {
                                    <h5>"<b>(Column) @Model.AttibuteIdXName.ToString()</b>" vs "<b>(Row) @Model.SetIdYName.ToString()</b>", segments: "@Model.AttibuteIdSegmentsName"</h5>
                                }

                            </td>
                            <td style="text-align:right">
                                <div class="card-tools">
                                    <button class="btn btn-primary btn-sm btn-round" onclick="ReloadCrosstab()">
                                        <span class="btn-label">
                                            <i class="fa fa-table"></i>
                                        </span>
                                        Table
                                    </button>
                                    <button class="btn btn-primary btn-sm btn-round" onclick="BubbleMap()">
                                        <span class="btn-label">
                                            <i class="fa fa-circle"></i>
                                        </span>
                                        Bubble map
                                    </button>
                                    <button class="btn btn-primary btn-sm btn-round" onclick="BubbleMapLog()">
                                        <span class="btn-label">
                                            <i class="fa fa-circle"></i>
                                        </span>
                                        Bubble (log)
                                    </button>
                                    <!--<a href="#" class="btn btn-info btn-border btn-round btn-sm mr-2">
                                        <span class="btn-label">
                                            <i class="fa fa-file-excel"></i>
                                        </span>
                                        Export
                                    </a>-->
                                    <!--<a href="#" class="btn btn-info btn-border btn-round btn-sm">
                                        <span class="btn-label">
                                            <i class="fa fa-copy"></i>
                                        </span>
                                        Copy
                                    </a>-->
                                </div>
                            </td>
                        </tr>
                    </table>
                    <div class="card-body">
                        <!-------------------------------------------------------------------------------------------------------------------->
                        @if (@Model.Graphic == "table")
                        {
                            <div id="CrosstabsGrid">
                                <table class="content-full table table-striped">
                                    <tr>
                                        <th></th>
                                        @for (int i = 0; i < Model.ColumnAttIDs.Count; i++)
                                        {
                                            <th>
                                                @Model.ColumnAttNames[i]
                                            </th>
                                        }

                                    </tr>
                                    @{int segmentsN = Model.SegmentsAttIDs.Count; }
                                    @foreach (WebDbItemAttributeCrosstabRow row in Model.Rows)
                                    {
                                        <tr>
                                            <th>@row.AttributeName</th>
                                            @for (int i = 0; i < Model.ColumnAttIDs.Count; i++)
                                            {
                                                <td>

                                                    @for (int ii = 0; ii < segmentsN; ii++)
                                                    {
                                                        <span class="font-weight-bold">@Model.SegmentsAttNames[ii]: </span>
                                                        @if (row.Counts[(i * segmentsN) + ii] == 0)
                                                        {
                                                            <span>0</span><br />
                                                        }
                                                        else if (row == Model.Rows[Model.Rows.Count - 1])
                                                        {//last row, with column header, without all the row codes
                                                            string with = Model.ColumnAttIDs[i].ToString() + "," + Model.SegmentsAttIDs[ii].ToString();
                                                            string without = "";
                                                            string withoutSets = "";
                                                            string withSets = Model.SetIdY.ToString() + "," + Model.SetIdSegments.ToString();
                                                            //string descript = "Listing &#39;None of the above&#39; crosstab result for the code: " + Model.ColumnAttNames[i].Replace("'", "&#39;");
                                                            string descript = "Records without " + Model.ColumnAttNames[i].Replace("'", "&#39;");
                                                            for (int ri = 0; ri < Model.Rows.Count - 1; ri++)//skip last row!
                                                            {
                                                                without += Model.Rows[ri].AttributeId.ToString() + ",";
                                                                withoutSets += @Model.SetIdY.ToString() + ",";
                                                            }
                                                            without = without.TrimEnd(',');
                                                            withoutSets = withoutSets.TrimEnd(',');
                                                            <a href="javascript:GoToItemsJson('@with', '@withSets', '@without', '@withoutSets', '@descript')">@row.Counts[(i * segmentsN) + ii]</a><br />

                                                        }
                                                        else if (i >= Model.ColumnAttIDs.Count - 1 - Model.SegmentsAttIDs.Count)
                                                        {//last cell with row header, without all the column codes
                                                            string with = row.AttributeId.ToString() + "," + Model.SegmentsAttIDs[ii].ToString();
                                                            string without = "";
                                                            string withoutSets = "";
                                                            string withSets = Model.SetIdY.ToString() + "," + Model.SetIdSegments.ToString();
                                                            //string descript = "Listing &#39;None of these&#39; crosstab result for the code: " + row.AttributeName.Replace("'", "&#39;");
                                                            string descript = "Records without " + row.AttributeName.Replace("'", "&#39;");
                                                            for (int ci = 0; ci < Model.ColumnAttIDs.Count - 1; ci++)//skip last column!
                                                            {
                                                                without += Model.ColumnAttIDs[ci].ToString() + ",";
                                                                withoutSets += @Model.SetIdX.ToString() + ",";
                                                            }
                                                            without = without.TrimEnd(',');
                                                            withoutSets = withoutSets.TrimEnd(',');

                                                            <a href="javascript:GoToItemsJson('@with', '@withSets', '@without', '@withoutSets', '@descript')">@row.Counts[(i * segmentsN) + ii]</a>
                                                            <br />

                                                        }
                                                        else
                                                        {//normal cell, with row and col codes
                                                            string with = row.AttributeId.ToString() + "," + Model.ColumnAttIDs[i].ToString() + "," + Model.SegmentsAttIDs[ii].ToString();
                                                            string withSets = Model.SetIdY.ToString() + "," + Model.SetIdX.ToString() + "," + Model.SetIdSegments.ToString();
                                                            //string descript = "Listing crosstab result for the codes (x,y): " + Model.ColumnAttNames[i].Replace("'", "&#39;") + ", " + row.AttributeName.Replace("'", "&#39;");
                                                            string descript = Model.ColumnAttNames[i].Replace("'", "&#39;") + " [AND] " + row.AttributeName.Replace("'", "&#39;");


                                                            <a href="javascript:GoToItemsJson('@with', '@withSets', '', '', '@descript')">@row.Counts[(i * segmentsN) + ii]</a>
                                                            <br />

                                                        }
                                                    }
                                                </td>
                                            }
                                        </tr>
                                    }
                                </table>
                            </div>

                                        }
                                        else if (@Model.Graphic == "bubble")
                                        {

                                            int maxVal = 0;
                                            for (int i=0; i < Model.Rows.Count-1; i++)//ignore the last row
                                            {
                                                for (int j=0; j < Model.Rows[i].Counts.Count - Model.SegmentsAttIDs.Count; j++)//ignore the values for the last column
                                                {
                                                    if (Model.Rows[i].Counts[j] > maxVal) maxVal = Model.Rows[i].Counts[j];
                                                }
                                            }

                            <div id="CrosstabsGrid">
                                <table class="content-full table table-striped">
                                    <tr>
                                        <th></th>
                                        @for (int i = 0; i < Model.ColumnAttIDs.Count - 1; i++)
                                        {
                                            <th>
                                                @Model.ColumnAttNames[i]
                                            </th>
                                        }

                                    </tr>
                                    @{int segmentsN = Model.SegmentsAttIDs.Count; }
                                    @for (int ri = 0; ri < Model.Rows.Count - 1; ri++)
                                    {
                                        WebDbItemAttributeCrosstabRow row = Model.Rows[ri];
                                            <tr>
                                                <th>@row.AttributeName</th>
                                                @for (int i = 0; i < Model.ColumnAttIDs.Count - 1; i++)
                                                {
                                                    <td>

                                                        @for (int ii = 0; ii < segmentsN; ii++)
                                                        {
                                                            
                                                            string SegClassName = "mapC" + (ii+1).ToString();
                                                            string title = "";
                                                            if (row.Counts[(i * segmentsN) + ii] == 0)
                                                            {
                                                                title =  Model.SegmentsAttNames[ii] + ": no records";
                                                                <i class="fa fa-ban @SegClassName" style="font-size:0.8em" tool-tip-toggle="tooltip-demo" data-original-title="@title"></i>
                                                            }
                                                            else
                                                            {//normal cell, with row and col codes
                                                                title = Model.SegmentsAttNames[ii] + ": " + @row.Counts[(i * segmentsN) + ii].ToString() + " records";
                                                                string dimension = (4 * ((double)row.Counts[(i * segmentsN) + ii] / (double)maxVal) + 0.5).ToString() + "em;";
                                                                string with = row.AttributeId.ToString() + "," + Model.ColumnAttIDs[i].ToString() + "," + Model.SegmentsAttIDs[ii].ToString();
                                                                string withSets = Model.SetIdY.ToString() + "," + Model.SetIdX.ToString() + "," + Model.SetIdSegments.ToString();
                                                                //string descript = "Listing crosstab result for the codes (x,y): " + Model.ColumnAttNames[i].Replace("'", "&#39;") + ", " + row.AttributeName.Replace("'", "&#39;");
                                                                string descript = Model.ColumnAttNames[i].Replace("'", "&#39;") + " [AND] " + row.AttributeName.Replace("'", "&#39;");


                                                                <a href="javascript:GoToItemsJson('@with', '@withSets', '', '', '@descript')" >
                                                                    <i class="fa fa-circle @SegClassName" style="font-size:@dimension" tool-tip-toggle="tooltip-demo" data-original-title="@title"></i>
                                                                </a>
                                                            }
                                                        }
                                                    </td>
                                                }
                                            </tr>
                                        }
                                </table>
                                <div class="col-12">
                                    Legend: @for (int ii = 0; ii < segmentsN; ii++)
                                    {
                                        string SegClassName = "mapC" + (ii + 1).ToString();
                                        <span class="mx-1 @SegClassName"><i class="fa fa-circle mx-1"></i> @Model.SegmentsAttNames[ii]</span>
                                    }
                                </div>
                            </div>       
                        }
                        <!-------------------------------------------------------------------------------------------------------------------------->
                        @if ((@Model.Graphic == "bubbleLog"))
                        {
                            var rowNumber = 0;
                            var biggestValue = 0;
                            var value = 0;
                            <!--<script>console.log("numberColumns: " + @Model.ColumnAttIDs.Count);</script>
                                <script>console.log("numberRows: " + @Model.Rows.Count);</script>-->
                            for (int j = 0; j < Model.Rows.Count - 1; j++)
                            {

                                for (int i = 0; i < Model.ColumnAttIDs.Count - 1; i++)
                                {

                                    value = @Model.Rows[j].Counts[i];
                                    if (value > biggestValue)
                                    {
                                        biggestValue = value;
                                    }
                                    <!--<script>
                                            console.log("rowNumber: " + @rowNumber);
                                            console.log("column: " + @i);
                                            console.log("value: " + @value);
                                            console.log("biggest value: " + @biggestValue);
                                    </script>-->
                                    rowNumber = rowNumber + 1;


                                }
                            }

                            rowNumber = 0;


                            var fa6 = 9.0;
                            var fa5 = 7.0;
                            var fa4 = 5.0;
                            var fa3 = 3.0;
                            var fa2 = 1.0;


                            var fa6Start = fa6 / 10 * biggestValue;
                            var fa5Start = fa5 / 10 * biggestValue;
                            var fa4Start = fa4 / 10 * biggestValue;
                            var fa3Start = fa3 / 10 * biggestValue;
                            var fa2Start = fa2 / 10 * biggestValue;
                            var fa1Start = 1.0;

                            <div id="CrosstabsChart">
                                <table class="content-full table table-bordered">
                                    <tr>
                                        <th></th>
                                        @for (int i = 0; i < Model.ColumnAttIDs.Count - 1; i++)
                                        {
                                            <th>
                                                @Model.ColumnAttNames[i]
                                            </th>
                                        }

                                    </tr>


                                    @foreach (WebDbItemAttributeCrosstabRow row in Model.Rows)
                                    {
                                        @if (@rowNumber < Model.Rows.Count - 1)
                                        {
                                            <tr>
                                                <th>@row.AttributeName</th>

                                                @for (int i = 0; i < Model.ColumnAttIDs.Count - 1; i++)
                                                {
                                                    @if (row.Counts[i] == 0)
                                                    {
                                                        <td></td>
                                                    }
                                                    else
                                                    {//normal cell, with row and col codes
                                                        string with = row.AttributeId.ToString() + "," + Model.ColumnAttIDs[i].ToString();
                                                        string withSets = Model.SetIdY.ToString() + "," + Model.SetIdX.ToString();
                                                        //string descript = "Listing crosstab result for the codes (x,y): " + Model.ColumnAttNames[i].Replace("'", "&#39;") + ", " + row.AttributeName.Replace("'", "&#39;");
                                                        string descript = Model.ColumnAttNames[i].Replace("'", "&#39;") + " [AND] " + row.AttributeName.Replace("'", "&#39;");

                                                        <th style="text-align:center;vertical-align:middle">

                                                            @if (@Model.Graphic == "bubbleLog")
                                                            {
                                                                // do it logarithmically

                                                                <a href="javascript:GoToItemsJson('@with', '@withSets', '', '', '@descript')">
                                                                    @if (@row.Counts[i] > 10000.0)
                                                                    {
                                                                        <i class="fa fa-circle fa-6x" style="color:#007bff;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if (@row.Counts[i] > 1000.0)
                                                                    {
                                                                        <i class="fa fa-circle fa-5x" style="color:#28a745;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if (@row.Counts[i] > 100.0)
                                                                    {
                                                                        <i class="fa fa-circle fa-4x" style="color:#ffc107;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if (@row.Counts[i] > 10.0)
                                                                    {
                                                                        <i class="fa fa-circle fa-3x" style="color:#dc3545;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if (@row.Counts[i] > 1.0)
                                                                    {
                                                                        <i class="fa fa-circle fa-2x" style="color:#17a2b8;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="fa fa-circle fa-1x" style="color:#343a40;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }

                                                                </a>

                                                            }
                                                            else
                                                            {
                                                                // do it linearly

                                                                <a href="javascript:GoToItemsJson('@with', '@withSets', '', '', '@descript')">

                                                                    @if ((@row.Counts[i] * 10.0 / @biggestValue) > @fa6)
                                                                    {
                                                                        <!--<script>
                                                                            console.log("value: " + @row.Counts[i]);
                                                                            console.log("scale: " + (@row.Counts[i] * 10.0 / @biggestValue));
                                                                            console.log("fa-6x");
                                                                        </script>-->
                                                                        <i class="fa fa-circle fa-6x" style="color:#007bff;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if ((@row.Counts[i] * 10.0 / @biggestValue) > @fa5)
                                                                    {
                                                                        <i class="fa fa-circle fa-5x" style="color:#28a745;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if ((@row.Counts[i] * 10.0 / @biggestValue) > @fa4)
                                                                    {
                                                                        <i class="fa fa-circle fa-4x" style="color:#ffc107;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if ((@row.Counts[i] * 10.0 / @biggestValue) > @fa3)
                                                                    {
                                                                        <i class="fa fa-circle fa-3x" style="color:#dc3545;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else if ((@row.Counts[i] * 10.0 / @biggestValue) > @fa2)
                                                                    {
                                                                        <i class="fa fa-circle fa-2x" style="color:#17a2b8;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="fa fa-circle fa-1x" style="color:#343a40;" tool-tip-toggle="tooltip-demo" data-original-title="@row.Counts[i] records"></i>
                                                                    }
                                                                </a>
                                                            }

                                                        </th>
                                                    }
                                                }
                                            </tr>
                                            rowNumber = rowNumber + 1;

                                        }

                                    }

                                </table>

                                <table width="100%">
                                    <tr>
                                        <td>
                                            <h3><b>Legend</b></h3>
                                        </td>
                                    </tr>
                                    <tr>
                                        @if (@Model.Graphic == "bubbleLog")
                                        {
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#343a40;"></i>&nbsp;1 record
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#17a2b8;"></i>&nbsp;2 - 10 records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#dc3545;"></i>&nbsp;11 - 100 records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#ffc107;"></i>&nbsp;101 - 1,000 records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color: #28a745;"></i>&nbsp;1,001 - 10,000 records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#007bff;"></i>&nbsp;10,000(+) records
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#343a40;"></i>&nbsp;@Math.Truncate(fa1Start) - @Math.Truncate((fa2Start - 1)) records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#17a2b8;"></i>&nbsp;@Math.Truncate(fa2Start) - @Math.Truncate((fa3Start - 1)) records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#dc3545;"></i>&nbsp;@Math.Truncate(fa3Start) - @Math.Truncate((fa4Start - 1)) records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#ffc107;"></i>&nbsp;@Math.Truncate(fa4Start) - @Math.Truncate((fa5Start - 1)) records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color: #28a745;"></i>&nbsp;@Math.Truncate(fa5Start) - @Math.Truncate((fa6Start - 1)) records
                                            </td>
                                            <td>
                                                <i class="fa fa-circle fa-1x" style="color:#007bff;"></i>&nbsp;@Math.Truncate(fa6Start) (+) records
                                            </td>
                                        }
                                    </tr>
                                </table>

                            </div>
                        }
                        <!--------------------------------------------------------------------------------------------------------------------------------->
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            @await Html.PartialAsync("_ItemsList")
        </div>
    </div>
</div>

