Use Reviewer
GO

IF COL_LENGTH('dbo.TB_ROBOT_API_CALL_LOG', 'FORCE_CODING_IN_ROBOT_NAME') IS NULL
BEGIN

	BEGIN TRANSACTION
		SET QUOTED_IDENTIFIER ON
		SET ARITHABORT ON
		SET NUMERIC_ROUNDABORT OFF
		SET CONCAT_NULL_YIELDS_NULL ON
		SET ANSI_NULLS ON
		SET ANSI_PADDING ON
		SET ANSI_WARNINGS ON
	COMMIT
	BEGIN TRANSACTION

		ALTER TABLE TB_ROBOT_API_CALL_LOG
				ADD FORCE_CODING_IN_ROBOT_NAME Bit NOT NULL
		 CONSTRAINT D_TB_ROBOT_API_CALL_LOG_FORCE_CODING_IN_ROBOT_NAME --When Omitted a Default-Constraint Name is autogenerated.
			DEFAULT (1)--Optional Default-Constraint.
		WITH VALUES
	COMMIT
END

IF COL_LENGTH('dbo.TB_ROBOT_API_CALL_LOG', 'LOCK_CODING') IS NULL
BEGIN

	BEGIN TRANSACTION
		SET QUOTED_IDENTIFIER ON
		SET ARITHABORT ON
		SET NUMERIC_ROUNDABORT OFF
		SET CONCAT_NULL_YIELDS_NULL ON
		SET ANSI_NULLS ON
		SET ANSI_PADDING ON
		SET ANSI_WARNINGS ON
	COMMIT
	BEGIN TRANSACTION

		ALTER TABLE TB_ROBOT_API_CALL_LOG
				ADD LOCK_CODING Bit NOT NULL
		 CONSTRAINT D_TB_ROBOT_API_CALL_LOCK_CODING --When Omitted a Default-Constraint Name is autogenerated.
			DEFAULT (1)--Optional Default-Constraint.
		WITH VALUES
	COMMIT
END
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_CreditHistoryByPurchase]    Script Date: 25/04/2024 13:38:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE or ALTER PROCEDURE st_CreateRobotApiCallLog 
(
	@REVIEW_ID int,
	@CREDIT_PURCHASE_ID int,
	@ROBOT_NAME nvarchar(255),
	@CRITERIA varchar(max),
	@REVIEW_SET_ID int,
	@CURRENT_ITEM_ID bigint,
	@FORCE_CODING_IN_ROBOT_NAME bit,
	@LOCK_CODING bit,
	@result varchar(50) OUTPUT, 
	@JobId int OUTPUT,
	@RobotContactId int OUTPUT
)
AS
BEGIN
	set @result = 'Success'
	declare @rID int = (select ROBOT_ID from TB_CONTACT c 
							Inner join TB_ROBOT_ACCOUNT rc on c.CONTACT_ID = rc.CONTACT_ID and c.CONTACT_NAME = @ROBOT_NAME
							AND c.EMAIL like '%FAKE@ucl.ac.uk' AND c.EXPIRY_DATE is null);
	IF @rID is null OR @rID < 1
	BEGIN
		set @result = 'Robot not found';
		return;
	END
	set @RobotContactId = (select CONTACT_ID from TB_ROBOT_ACCOUNT where ROBOT_ID = @rID)
	declare @chk int = (Select count(*) from  tb_review_set where REVIEW_SET_ID = @REVIEW_SET_ID and REVIEW_ID = @REVIEW_ID)
	if @chk < 1
	BEGIN
		set @result = 'Coding tool not found';
		return;
	END
	set @chk = (select count(*) from TB_REVIEW_CONTACT where REVIEW_ID = @REVIEW_ID and CONTACT_ID = @RobotContactId)
	if @chk < 1
	BEGIN
		declare @CR int 
		insert into TB_REVIEW_CONTACT (REVIEW_ID, CONTACT_ID) values (@REVIEW_ID, @RobotContactId)
		SET @CR = SCOPE_IDENTITY()
		INSERT into TB_CONTACT_REVIEW_ROLE (REVIEW_CONTACT_ID, ROLE_NAME) values (@CR, 'Coding only')
	END

	insert into TB_ROBOT_API_CALL_LOG
		(CREDIT_PURCHASE_ID,REVIEW_ID,ROBOT_ID,REVIEW_SET_ID,CRITERIA,[STATUS], CURRENT_ITEM_ID 
		,SUCCESS,INPUT_TOKENS_COUNT,OUTPUT_TOKENS_COUNT,COST
		,FORCE_CODING_IN_ROBOT_NAME, LOCK_CODING)
		VALUES
		(@CREDIT_PURCHASE_ID, @REVIEW_ID, @rID, @REVIEW_SET_ID, @CRITERIA, 'Starting', @CURRENT_ITEM_ID
		, 1, 0, 0, 0
		, @FORCE_CODING_IN_ROBOT_NAME, @LOCK_CODING);
	SET @JobId = SCOPE_IDENTITY();
END
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_CreditHistoryByPurchase]    Script Date: 25/04/2024 13:38:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE or ALTER PROCEDURE st_CreateRobotApiCallError 
(
	@JobId int
	,@ERROR_MESSAGE varchar(200)
	,@STACK_TRACE varchar(max) = null
	,@CURRENT_ITEM_ID bigint
	,@IS_FAILURE bit
)
AS
BEGIN
	Insert into TB_ROBOT_API_CALL_ERROR_LOG (ROBOT_API_CALL_ID, [ERROR_MESSAGE], STACK_TRACE, ITEM_ID)
		values (@JobId, @ERROR_MESSAGE, @STACK_TRACE, @CURRENT_ITEM_ID)
	IF @IS_FAILURE = 1
	begin
		Update TB_ROBOT_API_CALL_LOG set SUCCESS = 0, STATUS = 'Failed' where ROBOT_API_CALL_ID = @JobId
	END
END
GO