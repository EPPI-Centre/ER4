USE [DataService]
GO

/****** Object:  Table [dbo].[TB_PUBMED_UPDATE_FILE]    Script Date: 13/06/2018 11:51:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[TB_PUBMED_UPDATE_FILE](
	[PUBMED_UPDATE_FILE_ID] [int] NOT NULL
) ON [PRIMARY]

GO

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.[Tmp_TB_PUBMED_UPDATE_FILE]
	(
	PUBMED_UPDATE_FILE_ID int NOT NULL IDENTITY (1, 1),
	PUBMED_FILE_NAME varchar(30) NOT NULL,
	PUBMED_IMPORT_DATE datetime NOT NULL,
	PUBMED_UPLOAD_DATE datetime NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.[Tmp_TB_PUBMED_UPDATE_FILE] SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.[Tmp_TB_PUBMED_UPDATE_FILE] ON
GO
IF EXISTS(SELECT * FROM dbo.[TB_PUBMED_UPDATE_FILE])
	 EXEC('INSERT INTO dbo.[Tmp_TB_PUBMED_UPDATE_FILE] (PUBMED_UPDATE_FILE_ID)
		SELECT PUBMED_UPDATE_FILE_ID FROM dbo.[TB_PUBMED_UPDATE_FILE] WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.[Tmp_TB_PUBMED_UPDATE_FILE] OFF
GO
DROP TABLE dbo.[TB_PUBMED_UPDATE_FILE]
GO
EXECUTE sp_rename N'dbo.[Tmp_TB_PUBMED_UPDATE_FILE]', N'TB_PUBMED_UPDATE_FILE', 'OBJECT' 
GO
COMMIT
GO
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.[TB_PUBMED_UPDATE_FILE] ADD CONSTRAINT
	[PK_TB_PUBMED_UPDATE_FILE] PRIMARY KEY CLUSTERED 
	(
	PUBMED_UPDATE_FILE_ID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_TB_PUBMED_UPDATE_FILE_NAME] ON dbo.[TB_PUBMED_UPDATE_FILE]
	(
	PUBMED_FILE_NAME
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.[TB_PUBMED_UPDATE_FILE] SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

USE [DataService]
GO

/****** Object:  StoredProcedure [dbo].[st_PubMedUpdateFileInsert]    Script Date: 13/06/2018 15:08:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[st_PubMedUpdateFileInsert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[st_PubMedUpdateFileInsert]
GO

/****** Object:  StoredProcedure [dbo].[st_PubMedUpdateFileInsert]    Script Date: 13/06/2018 15:08:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[st_PubMedUpdateFileInsert] 
	-- Add the parameters for the stored procedure here
	(
		@PUBMED_FILE_NAME varchar(30)
	,	@PUBMED_UPLOAD_DATE datetime

	)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	declare @check int
	set @check = (select PUBMED_UPDATE_FILE_ID from TB_PUBMED_UPDATE_FILE where PUBMED_FILE_NAME = @PUBMED_FILE_NAME)
	if (@check is not null and @check > 0)
	BEGIN
		--update current record: we don't want duplicate filenames in here, no matter what!
		UPDATE TB_PUBMED_UPDATE_FILE 
			set PUBMED_FILE_NAME = @PUBMED_FILE_NAME
				, PUBMED_UPLOAD_DATE = @PUBMED_UPLOAD_DATE
				, PUBMED_IMPORT_DATE = GETDATE()
			WHERE PUBMED_UPDATE_FILE_ID = @check
	END
	ELSE
	BEGIN
		--normal insert
		INSERT INTO [dbo].[TB_PUBMED_UPDATE_FILE]
           ([PUBMED_FILE_NAME]
           ,[PUBMED_IMPORT_DATE]
           ,[PUBMED_UPLOAD_DATE])
		 VALUES
           (@PUBMED_FILE_NAME
           ,GETDATE()
           ,@PUBMED_UPLOAD_DATE)

	END
END

GO


USE [DataService]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[st_PubMedUpdateFileGetAll]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[st_PubMedUpdateFileGetAll]
GO
/****** Object:  StoredProcedure [dbo].[st_PubMedUpdateFileGetAll]    Script Date: 13/06/2018 15:23:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[st_PubMedUpdateFileGetAll] 
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select * from TB_PUBMED_UPDATE_FILE
	order by PUBMED_IMPORT_DATE ASC
END
GO

---Patrick's changes: saving job logs and seeds for bulk update
USE [DataService]
GO

/****** Object:  Table [dbo].[TB_PUBMEDJOBLOG]    Script Date: 21/06/2018 09:42:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[TB_PUBMEDJOBLOG](
	[IsDeleting] [bit] NULL,
	[TotalErrorCount] [int] NULL,
	[Summary] [nvarchar](100) NULL,
	[Arguments] [nvarchar](100) NULL,
	[StartTime] [date] NULL,
	[EndTime] [date] NULL,
	[HasError] [bit] NULL,
	[PubMedUpdateFileImportJobLogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TB_PUBMEDJOBLOG] PRIMARY KEY CLUSTERED 
(
	[PubMedUpdateFileImportJobLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
USE [DataService]
GO

/****** Object:  Table [dbo].[TB_FILEPARSERRESULT]    Script Date: 21/06/2018 09:44:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[TB_FILEPARSERRESULT](
	[Success] [bit] NULL,
	[FileParserID] [int] IDENTITY(1,1) NOT NULL,
	[IsDeleting] [bit] NULL,
	[ErrorCount] [int] NULL,
	[FileName] [varchar](100) NULL,
	[UpdatedPMIDs] [varchar](150) NULL,
	[CitationsInFile] [int] NULL,
	[CitationsCommitted] [int] NULL,
	[StartTime] [date] NULL,
	[EndTime] [date] NULL,
	[HasErrors] [bit] NULL,
	[Messages] [varchar](150) NULL,
	[PubMedUpdateFileImportJobLogID] [int] NOT NULL,
 CONSTRAINT [PK_TB_FILEPARSERRESULT] PRIMARY KEY CLUSTERED 
(
	[FileParserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Success', N'Tmp_SUCCESS_1', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.FileParserID', N'Tmp_FILE_PARSER_ID_2', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.IsDeleting', N'Tmp_IS_DELETING_3', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.ErrorCount', N'Tmp_ERROR_COUNT_4', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.FileName', N'Tmp_FILE_NAME_5', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.UpdatedPMIDs', N'Tmp_UPDATED_PMIDS_6', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.CitationsInFile', N'Tmp_CITATIONS_IN_FILE_7', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.CitationsCommitted', N'Tmp_CITATIONS_COMMITTED_8', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.StartTime', N'Tmp_START_TIME_9', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.EndTime', N'Tmp_END_TIME_10', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.HasErrors', N'Tmp_HAS_ERRORS_11', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Messages', N'Tmp_MESSAGES_12', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.PubMedUpdateFileImportJobLogID', N'Tmp_PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID_13', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_SUCCESS_1', N'SUCCESS', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_FILE_PARSER_ID_2', N'FILE_PARSER_ID', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_IS_DELETING_3', N'IS_DELETING', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_ERROR_COUNT_4', N'ERROR_COUNT', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_FILE_NAME_5', N'FILE_NAME', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_UPDATED_PMIDS_6', N'UPDATED_PMIDS', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_CITATIONS_IN_FILE_7', N'CITATIONS_IN_FILE', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_CITATIONS_COMMITTED_8', N'CITATIONS_COMMITTED', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_START_TIME_9', N'START_TIME', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_END_TIME_10', N'END_TIME', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_HAS_ERRORS_11', N'HAS_ERRORS', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_MESSAGES_12', N'MESSAGES', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_FILEPARSERRESULT.Tmp_PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID_13', N'PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID', 'COLUMN' 
GO
ALTER TABLE dbo.TB_FILEPARSERRESULT SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.IsDeleting', N'Tmp_IS_DELETING_27', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.TotalErrorCount', N'Tmp_TOTAL_ERROR_COUNT_28', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Summary', N'Tmp_SUMMARY_29', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Arguments', N'Tmp_ARGUMENTS_30', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.StartTime', N'Tmp_START_TIME_31', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.EndTime', N'Tmp_END_TIME_32', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.HasError', N'Tmp_HAS_ERRORS_33', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.PubMedUpdateFileImportJobLogID', N'Tmp_PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID_34', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_IS_DELETING_27', N'IS_DELETING', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_TOTAL_ERROR_COUNT_28', N'TOTAL_ERROR_COUNT', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_SUMMARY_29', N'SUMMARY', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_ARGUMENTS_30', N'ARGUMENTS', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_START_TIME_31', N'START_TIME', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_END_TIME_32', N'END_TIME', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_HAS_ERRORS_33', N'HAS_ERRORS', 'COLUMN' 
GO
EXECUTE sp_rename N'dbo.TB_PUBMEDJOBLOG.Tmp_PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID_34', N'PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID', 'COLUMN' 
GO
ALTER TABLE dbo.TB_PUBMEDJOBLOG SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

USE [DataService]
GO

/****** Object:  StoredProcedure [dbo].[st_PubMedJOBLOG]    Script Date: 21/06/2018 09:59:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[st_PubMedJobLogInsert]
	-- Add the parameters for the stored procedure here
	(
		@jobID int OUTPUT
	,	@IsDeleting bit = NULL
	,	@TotalErrorCount INT
	,	@Summary VARCHAR(100)
	,	@Arguments VARCHAR(100)
	,	@StartTime date = NULL
	,	@EndTime date = NULL
	,	@HasError bit = NULL
	)
	

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	Insert into [dbo].[TB_PUBMEDJOBLOG] (IS_DELETING, TOTAL_ERROR_COUNT, SUMMARY, ARGUMENTS, START_TIME, END_TIME,
	HAS_ERRORS)
	VALUES (@IsDeleting, @TotalErrorCount, @Summary, @Arguments, @StartTime, @EndTime,
		@HasError)

	SELECT @jobID  = COUNT(*) FROM [dbo].[TB_PUBMEDJOBLOG] 

	SET NOCOUNT OFF
END


GO


USE [DataService]
GO

/****** Object:  StoredProcedure [dbo].[st_FileParserResult]    Script Date: 21/06/2018 09:59:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[st_FileParserResultInsert]
	-- Add the parameters for the stored procedure here
	(

	@Success bit  NULL,
    @IsDeleting bit  NULL,
    @ErrorCount int  NULL,
    @FileName varchar(100)  NULL,
    @UpdatedPMIDs varchar(150)  NULL,
    @CitationsInFile int  NULL,
    @CitationsCommitted int  NULL,
    @StartTime date  NULL,
    @EndTime date  NULL,
    @HasErrors bit  NULL,
    @Messages varchar(150)  NULL,
	@PubMedUpdateFileImportJobLogID int
	
	)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	Insert into [dbo].[TB_FILEPARSERRESULT] (Success,
		IS_DELETING ,
		ERROR_COUNT,
		[FILE_NAME],
		UPDATED_PMIDS ,
		CITATIONS_IN_FILE ,
		CITATIONS_COMMITTED ,
		START_TIME ,
		END_TIME ,
		HAS_ERRORS ,
		[Messages],
		PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID)

	VALUES (@Success,
			@IsDeleting ,
			@ErrorCount,
			@FileName,
			@UpdatedPMIDs ,
			@CitationsInFile ,
			@CitationsCommitted ,
			@StartTime ,
			@EndTime ,
			@HasErrors ,
			@Messages,
			@PubMedUpdateFileImportJobLogID)

	SET NOCOUNT OFF
END


GO


USE [DataService]
GO

/****** Object:  StoredProcedure [dbo].[st_ReferencesImportPrepare]    Script Date: 21/06/2018 10:01:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:              Sergio
-- Create date: 23-06-09
-- Description: Prepare Tables for Bulk Item import
-- =============================================
CREATE PROCEDURE [dbo].[st_ReferencesImportPrepare]
        @Items_Number int,
        @Authors_Number int,
		@Externals_Number int,
        @Item_Seed bigint OUTPUT,
        @Author_Seed bigint OUTPUT,
		@External_Seed bigint OUTPUT
AS
BEGIN
SET NOCOUNT ON;
-- This procedure Reservs some Identinty values that will be inserted
-- from C# via a Dataset bulkcopy
-- Note the Table Lock Hints used to prevent insertions to happen while dealing with a particular table
Declare @temp bigint
BEGIN TRAN A
        set @Item_Seed = (SELECT top 1 IDENT_CURRENT('TB_REFERENCE') FROM TB_REFERENCE WITH (HOLDLOCK, TABLOCKX))
        set @Item_Seed = ISNULL(@Item_Seed, 0);
		set @temp = @Item_Seed + @Items_Number
        DBCC CHECKIDENT('TB_REFERENCE', RESEED, @temp)
COMMIT TRAN A

BEGIN TRAN B
        set @Author_Seed = (SELECT top 1 IDENT_CURRENT('TB_REFERENCE_AUTHOR') FROM TB_REFERENCE_AUTHOR WITH (HOLDLOCK, TABLOCKX))
        set @Author_Seed = ISNULL(@Author_Seed, 0);
		set @temp = @Author_Seed + @Authors_Number
        DBCC CHECKIDENT('TB_REFERENCE_AUTHOR', RESEED, @temp)
COMMIT TRAN B

BEGIN TRAN C
        set @External_Seed = (SELECT top 1 IDENT_CURRENT('TB_EXTERNALID') FROM TB_EXTERNALID WITH (HOLDLOCK, TABLOCKX))
        set @External_Seed = ISNULL(@External_Seed, 0);
		set @temp = @External_Seed + @Authors_Number
        DBCC CHECKIDENT('TB_EXTERNALID', RESEED, @temp)
COMMIT TRAN C

END

GO

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_TB_PUBMEDJOBLOG
	(
	PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID int NOT NULL IDENTITY (1, 1),
	IS_DELETING bit NULL,
	TOTAL_ERROR_COUNT int NULL,
	SUMMARY nvarchar(100) NULL,
	ARGUMENTS nvarchar(100) NULL,
	START_TIME date NULL,
	END_TIME date NULL,
	HAS_ERRORS bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_TB_PUBMEDJOBLOG SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_TB_PUBMEDJOBLOG ON
GO
IF EXISTS(SELECT * FROM dbo.TB_PUBMEDJOBLOG)
	 EXEC('INSERT INTO dbo.Tmp_TB_PUBMEDJOBLOG (PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID, IS_DELETING, TOTAL_ERROR_COUNT, SUMMARY, ARGUMENTS, START_TIME, END_TIME, HAS_ERRORS)
		SELECT PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID, IS_DELETING, TOTAL_ERROR_COUNT, SUMMARY, ARGUMENTS, START_TIME, END_TIME, HAS_ERRORS FROM dbo.TB_PUBMEDJOBLOG WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_TB_PUBMEDJOBLOG OFF
GO
DROP TABLE dbo.TB_PUBMEDJOBLOG
GO
EXECUTE sp_rename N'dbo.Tmp_TB_PUBMEDJOBLOG', N'TB_PUBMEDJOBLOG', 'OBJECT' 
GO
ALTER TABLE dbo.TB_PUBMEDJOBLOG ADD CONSTRAINT
	PK_TB_PUBMEDJOBLOG PRIMARY KEY CLUSTERED 
	(
	PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
GO


--Sergio: indexing the external IDs table
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.TB_EXTERNALID
	DROP CONSTRAINT FK_TB_EXTERNALID_TB_REFERENCE
GO
ALTER TABLE dbo.TB_REFERENCE SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_TB_EXTERNALID
	(
	EXTERNALID_ID bigint NOT NULL IDENTITY (1, 1),
	REFERENCE_ID bigint NOT NULL,
	TYPE nchar(15) NOT NULL,
	VALUE nvarchar(450) NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_TB_EXTERNALID SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_TB_EXTERNALID ON
GO
IF EXISTS(SELECT * FROM dbo.TB_EXTERNALID)
	 EXEC('INSERT INTO dbo.Tmp_TB_EXTERNALID (EXTERNALID_ID, REFERENCE_ID, TYPE, VALUE)
		SELECT EXTERNALID_ID, REFERENCE_ID, TYPE, CONVERT(nvarchar(450), VALUE) FROM dbo.TB_EXTERNALID WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_TB_EXTERNALID OFF
GO
DROP TABLE dbo.TB_EXTERNALID
GO
EXECUTE sp_rename N'dbo.Tmp_TB_EXTERNALID', N'TB_EXTERNALID', 'OBJECT' 
GO
ALTER TABLE dbo.TB_EXTERNALID ADD CONSTRAINT
	PK_TB_EXTERNALID PRIMARY KEY CLUSTERED 
	(
	EXTERNALID_ID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX IX_TB_EXTERNALID_ON_VALUE_TYPE ON dbo.TB_EXTERNALID
	(
	VALUE
	) INCLUDE (TYPE, REFERENCE_ID) 
 WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.TB_EXTERNALID ADD CONSTRAINT
	FK_TB_EXTERNALID_TB_REFERENCE FOREIGN KEY
	(
	REFERENCE_ID
	) REFERENCES dbo.TB_REFERENCE
	(
	REFERENCE_ID
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO
CREATE NONCLUSTERED INDEX [IX_TB_EXTERNALID_ON_VALUE_TYPE] ON [dbo].[TB_EXTERNALID]
(
	[VALUE] ASC
)
INCLUDE ( 	[TYPE],
	[REFERENCE_ID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
GO


--Sergio: DATE fields to DateTime fields...
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_TB_FILEPARSERRESULT
	(
	SUCCESS bit NULL,
	FILE_PARSER_ID int NOT NULL IDENTITY (1, 1),
	IS_DELETING bit NULL,
	ERROR_COUNT int NULL,
	FILE_NAME varchar(100) NULL,
	UPDATED_PMIDS varchar(150) NULL,
	CITATIONS_IN_FILE int NULL,
	CITATIONS_COMMITTED int NULL,
	START_TIME datetime NULL,
	END_TIME datetime NULL,
	HAS_ERRORS bit NULL,
	MESSAGES varchar(150) NULL,
	PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_TB_FILEPARSERRESULT SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_TB_FILEPARSERRESULT ON
GO
IF EXISTS(SELECT * FROM dbo.TB_FILEPARSERRESULT)
	 EXEC('INSERT INTO dbo.Tmp_TB_FILEPARSERRESULT (SUCCESS, FILE_PARSER_ID, IS_DELETING, ERROR_COUNT, FILE_NAME, UPDATED_PMIDS, CITATIONS_IN_FILE, CITATIONS_COMMITTED, START_TIME, END_TIME, HAS_ERRORS, MESSAGES, PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID)
		SELECT SUCCESS, FILE_PARSER_ID, IS_DELETING, ERROR_COUNT, FILE_NAME, UPDATED_PMIDS, CITATIONS_IN_FILE, CITATIONS_COMMITTED, CONVERT(datetime, START_TIME), CONVERT(datetime, END_TIME), HAS_ERRORS, MESSAGES, PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID FROM dbo.TB_FILEPARSERRESULT WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_TB_FILEPARSERRESULT OFF
GO
DROP TABLE dbo.TB_FILEPARSERRESULT
GO
EXECUTE sp_rename N'dbo.Tmp_TB_FILEPARSERRESULT', N'TB_FILEPARSERRESULT', 'OBJECT' 
GO
ALTER TABLE dbo.TB_FILEPARSERRESULT ADD CONSTRAINT
	PK_TB_FILEPARSERRESULT PRIMARY KEY CLUSTERED 
	(
	FILE_PARSER_ID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
GO

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_TB_PUBMEDJOBLOG
	(
	PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID int NOT NULL IDENTITY (1, 1),
	IS_DELETING bit NULL,
	TOTAL_ERROR_COUNT int NULL,
	SUMMARY nvarchar(100) NULL,
	ARGUMENTS nvarchar(100) NULL,
	START_TIME datetime NULL,
	END_TIME datetime NULL,
	HAS_ERRORS bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_TB_PUBMEDJOBLOG SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_TB_PUBMEDJOBLOG ON
GO
IF EXISTS(SELECT * FROM dbo.TB_PUBMEDJOBLOG)
	 EXEC('INSERT INTO dbo.Tmp_TB_PUBMEDJOBLOG (PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID, IS_DELETING, TOTAL_ERROR_COUNT, SUMMARY, ARGUMENTS, START_TIME, END_TIME, HAS_ERRORS)
		SELECT PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID, IS_DELETING, TOTAL_ERROR_COUNT, SUMMARY, ARGUMENTS, CONVERT(datetime, START_TIME), CONVERT(datetime, END_TIME), HAS_ERRORS FROM dbo.TB_PUBMEDJOBLOG WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_TB_PUBMEDJOBLOG OFF
GO
DROP TABLE dbo.TB_PUBMEDJOBLOG
GO
EXECUTE sp_rename N'dbo.Tmp_TB_PUBMEDJOBLOG', N'TB_PUBMEDJOBLOG', 'OBJECT' 
GO
ALTER TABLE dbo.TB_PUBMEDJOBLOG ADD CONSTRAINT
	PK_TB_PUBMEDJOBLOG PRIMARY KEY CLUSTERED 
	(
	PUBMED_UPDATE_FILE_IMPORT_JOB_LOG_ID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
GO