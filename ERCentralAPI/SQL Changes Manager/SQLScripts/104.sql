USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ItemTimepointUpdate]    Script Date: 17/09/2019 15:51:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[st_ItemTimepointUpdate]
(
	@ITEM_TIMEPOINT_ID BIGINT
,	@TIMEPOINT_VALUE FLOAT
,	@TIMEPOINT_METRIC VARCHAR(50)
,   @REVIEW_ID INT
)

As

SET NOCOUNT ON


declare @check int = 0

declare @itemID bigint = (select ITEM_ID from 
TB_ITEM_TIMEPOINT where ITEM_TIMEPOINT_ID = @ITEM_TIMEPOINT_ID) 

set @check = (select count(*) from 
TB_ITEM_REVIEW where ITEM_ID = @itemID AND REVIEW_ID = @REVIEW_ID)

if(@check != 1) return


	UPDATE TB_ITEM_TIMEPOINT
		SET TIMEPOINT_VALUE = @TIMEPOINT_VALUE,
			TIMEPOINT_METRIC = @TIMEPOINT_METRIC
		WHERE ITEM_TIMEPOINT_ID = @ITEM_TIMEPOINT_ID

SET NOCOUNT OFF
GO


USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ItemDocumentUpdate]    
Script Date: 17/09/2019 15:57:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[st_ItemDocumentUpdate]
(
	@ITEM_DOCUMENT_ID BIGINT,
	@DOCUMENT_TITLE NVARCHAR(255),
	@DOCUMENT_FREE_NOTES NVARCHAR(MAX) = '',
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

declare @check int = 0

declare @itemID bigint = (select ITEM_ID from 
TB_ITEM_DOCUMENT where ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID) 

set @check = (select count(*) from 
TB_ITEM_REVIEW where ITEM_ID = @itemID AND REVIEW_ID = @REVIEW_ID)

if(@check != 1) return

	UPDATE TB_ITEM_DOCUMENT
	SET DOCUMENT_TITLE = @DOCUMENT_TITLE,
	DOCUMENT_FREE_NOTES = @DOCUMENT_FREE_NOTES
	WHERE ITEM_DOCUMENT_ID = @ITEM_DOCUMENT_ID

SET NOCOUNT OFF
GO



USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributePDFUpdate]    Script Date: 17/09/2019 16:00:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[st_ItemAttributePDFUpdate]
	-- Add the parameters for the stored procedure here
	@ITEM_ATTRIBUTE_PDF_ID bigint
	,@SHAPE_TEXT varchar(max)
	,@INTERVALS varchar(max)
	,@TEXTS nvarchar(max)
	,@REVIEW_ID INT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


declare @check int = 0

declare @itemID bigint = (select IA.ITEM_ID from 
TB_ITEM_ATTRIBUTE IA INNER JOIN 
TB_ITEM_ATTRIBUTE_PDF IAP ON IA.ITEM_ATTRIBUTE_ID = IAP.ITEM_ATTRIBUTE_ID
where ITEM_ATTRIBUTE_PDF_ID = @ITEM_ATTRIBUTE_PDF_ID) 

set @check = (select count(*) from 
TB_ITEM_REVIEW where ITEM_ID = @itemID AND REVIEW_ID = @REVIEW_ID)

if(@check != 1) return

-- Insert statements for procedure here
UPDATE TB_ITEM_ATTRIBUTE_PDF
SET SHAPE_TEXT = @SHAPE_TEXT
    ,SELECTION_INTERVALS = @INTERVALS
    ,SELECTION_TEXTS = @TEXTS
WHERE ITEM_ATTRIBUTE_PDF_ID = @ITEM_ATTRIBUTE_PDF_ID


END
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ItemArmUpdate]    Script Date: 17/09/2019 16:10:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[st_ItemArmUpdate]
(
	@ITEM_ARM_ID BIGINT
,	@ORDERING INT
,	@ARM_NAME NVARCHAR(500)
,	 @REVIEW_ID INT
)

As

SET NOCOUNT ON

declare @check int = 0

declare @itemID bigint = (select ITEM_ID from 
TB_ITEM_ARM where ITEM_ARM_ID = @ITEM_ARM_ID) 

set @check = (select count(*) from 
TB_ITEM_REVIEW where ITEM_ID = @itemID AND REVIEW_ID = @REVIEW_ID)

if(@check != 1) return

UPDATE TB_ITEM_ARM
	SET ORDERING = @ORDERING,
		ARM_NAME = @ARM_NAME
	WHERE ITEM_ARM_ID = @ITEM_ARM_ID

SET NOCOUNT OFF

GO


USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetLimitedUpdate]    Script Date: 17/09/2019 16:14:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[st_AttributeSetLimitedUpdate]
(
	@ATTRIBUTE_ID BIGINT,
	@ATTRIBUTE_SET_ID BIGINT,
	@ATTRIBUTE_TYPE_ID INT,
	@ATTRIBUTE_NAME NVARCHAR(255),
	@ATTRIBUTE_DESCRIPTION NVARCHAR(MAX),
	@ATTRIBUTE_ORDER INT,
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

declare @check int = 0

set @check = (select count (tas.ATTRIBUTE_ID) from TB_ATTRIBUTE_SET tas
				inner join TB_REVIEW_SET rs on tas.SET_ID = rs.SET_ID 
					and tas.ATTRIBUTE_ID = @ATTRIBUTE_ID
					and rs.REVIEW_ID = @REVIEW_ID
			)

if(@check != 1) return


	UPDATE TB_ATTRIBUTE
		SET ATTRIBUTE_NAME = @ATTRIBUTE_NAME
		WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID
		
	UPDATE TB_ATTRIBUTE_SET
		SET ATTRIBUTE_SET_DESC = @ATTRIBUTE_DESCRIPTION,
		 ATTRIBUTE_TYPE_ID = @ATTRIBUTE_TYPE_ID,
		 ATTRIBUTE_ORDER = @ATTRIBUTE_ORDER
		WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

SET NOCOUNT OFF

GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetUpdate]    Script Date: 17/09/2019 16:18:38 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[st_AttributeSetUpdate]
(
	@ATTRIBUTE_SET_ID BIGINT,
	@SET_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@PARENT_ATTRIBUTE_ID BIGINT,
	@ATTRIBUTE_TYPE_ID INT,
	@ATTRIBUTE_SET_DESC NVARCHAR(MAX),
	@ATTRIBUTE_ORDER INT,
	@ATTRIBUTE_NAME NVARCHAR(255),
	@ATTRIBUTE_DESC NVARCHAR(2000),
	@CONTACT_ID INT -- not used yet - maybe for authorisation,
	,@REVIEW_ID INT
)

As

SET NOCOUNT ON

declare @check int = 0

set @check = (select count (tas.ATTRIBUTE_ID) from TB_ATTRIBUTE_SET tas
				inner join TB_REVIEW_SET rs on tas.SET_ID = rs.SET_ID 
					and tas.ATTRIBUTE_ID = @ATTRIBUTE_ID
					and rs.REVIEW_ID = @REVIEW_ID
					and tas.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
			)

if(@check != 1) return


	UPDATE TB_ATTRIBUTE
		SET ATTRIBUTE_NAME = @ATTRIBUTE_NAME, ATTRIBUTE_DESC = @ATTRIBUTE_DESC
		WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID

	UPDATE TB_ATTRIBUTE_SET
		SET SET_ID = @SET_ID, PARENT_ATTRIBUTE_ID = @PARENT_ATTRIBUTE_ID, ATTRIBUTE_TYPE_ID = @ATTRIBUTE_TYPE_ID,
			ATTRIBUTE_SET_DESC = @ATTRIBUTE_SET_DESC, ATTRIBUTE_ORDER = @ATTRIBUTE_ORDER
		WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID


SET NOCOUNT OFF

GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetDelete]    Script Date: 24/09/2019 17:38:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER procedure [dbo].[st_AttributeSetDelete]
(
	@ATTRIBUTE_SET_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@PARENT_ATTRIBUTE_ID BIGINT,
	@ATTRIBUTE_ORDER INT,
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

DECLARE @SET_ID INT

SELECT @SET_ID = tas.SET_ID FROM TB_ATTRIBUTE_SET tas
	inner join TB_REVIEW_SET rs on tas.SET_ID = rs.SET_ID and rs.REVIEW_ID = @REVIEW_ID --join on review, avoid cross review poisoning!
	WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

IF(@SET_ID is null) return --avoid cross review poisoning

DELETE FROM TB_ITEM_ATTRIBUTE_TEXT
FROM TB_ITEM_ATTRIBUTE_TEXT
INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE_TEXT.ITEM_ATTRIBUTE_ID
INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
		AND TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
		AND TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
		AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID

DELETE FROM TB_ITEM_ATTRIBUTE_PDF
FROM TB_ITEM_ATTRIBUTE_PDF
INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE_PDF.ITEM_ATTRIBUTE_ID
INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
		AND TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
		AND TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
		AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID

DELETE FROM TB_ITEM_ATTRIBUTE
from TB_ITEM_ATTRIBUTE
INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.ITEM_SET_ID = TB_ITEM_ATTRIBUTE.ITEM_SET_ID
	INNER JOIN TB_ATTRIBUTE_SET ON TB_ATTRIBUTE_SET.ATTRIBUTE_ID = TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID
		AND TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
		AND TB_ATTRIBUTE_SET.SET_ID = TB_ITEM_SET.SET_ID
	INNER JOIN TB_ITEM_REVIEW ON TB_ITEM_REVIEW.ITEM_ID = TB_ITEM_ATTRIBUTE.ITEM_ID
		AND TB_ITEM_REVIEW.REVIEW_ID = @REVIEW_ID
		
DELETE FROM TB_ITEM_SET
WHERE NOT ITEM_SET_ID IN 
(
	SELECT DISTINCT ITEM_SET_ID  
    FROM TB_ITEM_ATTRIBUTE ia
    inner join tb_item_review ir on ia.ITEM_ID = ir.ITEM_ID 
    and ir.REVIEW_ID = @REVIEW_ID
    union
    select tio.item_set_id
    from TB_ITEM_OUTCOME tio
    inner join TB_ITEM_SET tis on tio.ITEM_SET_ID = tis.ITEM_SET_ID
    inner join TB_ITEM_REVIEW ir on tis.ITEM_ID = ir.ITEM_ID and ir.REVIEW_ID = @REVIEW_ID
) and SET_ID = @SET_ID

	SELECT TB_ATTRIBUTE_SET.ATTRIBUTE_ID FROM TB_ATTRIBUTE_SET
		INNER JOIN TB_ITEM_SET ON TB_ITEM_SET.SET_ID = TB_ATTRIBUTE_SET.SET_ID
		INNER JOIN TB_ITEM_ATTRIBUTE ON TB_ITEM_ATTRIBUTE.ITEM_SET_ID = TB_ITEM_SET.ITEM_SET_ID
			AND TB_ITEM_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
		WHERE TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

	IF (@@ROWCOUNT = 0)
	BEGIN

		DELETE FROM TB_ATTRIBUTE_SET WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

		UPDATE TB_ATTRIBUTE_SET
				SET ATTRIBUTE_ORDER = ATTRIBUTE_ORDER -1
				WHERE PARENT_ATTRIBUTE_ID = @PARENT_ATTRIBUTE_ID
				AND ATTRIBUTE_ORDER > @ATTRIBUTE_ORDER
				AND SET_ID = @SET_ID

		SELECT ATTRIBUTE_ID FROM TB_ATTRIBUTE_SET WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID

		IF (@@ROWCOUNT = 0)
		BEGIN
			DELETE FROM TB_ATTRIBUTE WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID
		END

	END
	

SET NOCOUNT OFF

GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ItemAttributeDelete]    Script Date: 24/09/2019 17:56:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[st_ItemAttributeDelete]
(
	@ITEM_ATTRIBUTE_ID BIGINT,
	@ITEM_SET_ID BIGINT
)

As
SET NOCOUNT ON
declare @check0 int
select @check0 = count(tis.ITEM_SET_ID) from TB_ITEM_ATTRIBUTE tia 
		inner join TB_ITEM_SET tis on tia.ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
				and tia.ITEM_SET_ID = tis.ITEM_SET_ID and tis.ITEM_SET_ID = @ITEM_SET_ID

if (@check0 < 1) return --avoid deleting if request was manipulated (@ITEM_SET_ID doesn't match @ITEM_ATTRIBUTE_ID)...

DELETE FROM TB_ITEM_ATTRIBUTE_PDF WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID
DELETE FROM TB_ITEM_ATTRIBUTE WHERE ITEM_ATTRIBUTE_ID = @ITEM_ATTRIBUTE_ID

DECLARE @CHECK BIGINT

set @CHECK = (SELECT COUNT(lines) from 
	(
		select ITEM_SET_ID as lines FROM TB_ITEM_ATTRIBUTE WHERE ITEM_SET_ID = @ITEM_SET_ID
		union 
		Select ITEM_SET_ID as lines from TB_ITEM_OUTCOME where ITEM_SET_ID = @ITEM_SET_ID
		) a
	)

IF (@CHECK = 0)
BEGIN
	DELETE FROM TB_ITEM_SET WHERE ITEM_SET_ID = @ITEM_SET_ID
END

SET NOCOUNT OFF
GO