USE [Reviewer]
GO

IF COL_LENGTH('dbo.TB_ATTRIBUTE', 'Ext_URL') IS NULL
BEGIN
BEGIN TRANSACTION

ALTER TABLE dbo.TB_ATTRIBUTE ADD
	Ext_URL nvarchar(2048) NULL,
	Ext_Type nvarchar(100) NULL
ALTER TABLE dbo.TB_ATTRIBUTE SET (LOCK_ESCALATION = TABLE)
COMMIT
end
go

IF COL_LENGTH('dbo.TB_SET', 'USER_CAN_EDIT_URLS') IS NULL
BEGIN
BEGIN TRANSACTION
ALTER TABLE dbo.TB_SET ADD
	USER_CAN_EDIT_URLS bit NULL
ALTER TABLE dbo.TB_SET SET (LOCK_ESCALATION = TABLE)
commit
end
go

IF NOT COL_LENGTH('dbo.TB_SET', 'USER_CAN_EDIT_URLS') IS NULL
BEGIN
	update tb_set
		set USER_CAN_EDIT_URLS = 'False'
END

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSet]    Script Date: 23/04/2020 12:23:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create or ALTER PROCEDURE [dbo].[st_ReviewSet]
	-- Add the parameters for the stored procedure here
	(
	@REVIEW_SET_ID INT
	)

As

SET NOCOUNT ON

	SELECT REVIEW_SET_ID, REVIEW_ID, RS.SET_ID, ALLOW_CODING_EDITS, S.SET_TYPE_ID, SET_NAME,
		SET_TYPE, CODING_IS_FINAL, SET_ORDER, MAX_DEPTH, S.SET_DESCRIPTION, S.ORIGINAL_SET_ID, USER_CAN_EDIT_URLS
	FROM TB_REVIEW_SET RS
	INNER JOIN TB_SET S ON S.SET_ID = RS.SET_ID
	INNER JOIN TB_SET_TYPE ON TB_SET_TYPE.SET_TYPE_ID = S.SET_TYPE_ID

	WHERE RS.REVIEW_SET_ID = @REVIEW_SET_ID
	ORDER BY RS.SET_ORDER, RS.SET_ID


SET NOCOUNT OFF
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSets]    Script Date: 23/04/2020 12:25:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create or ALTER procedure [dbo].[st_ReviewSets]
(
	@REVIEW_ID INT
)

As

SET NOCOUNT ON

	SELECT REVIEW_SET_ID, REVIEW_ID, RS.SET_ID, ALLOW_CODING_EDITS, S.SET_TYPE_ID, SET_NAME, SET_TYPE,
		CODING_IS_FINAL, SET_ORDER, MAX_DEPTH, S.SET_DESCRIPTION, S.ORIGINAL_SET_ID, S.USER_CAN_EDIT_URLS
	FROM TB_REVIEW_SET RS
	INNER JOIN TB_SET S ON S.SET_ID = RS.SET_ID
	INNER JOIN TB_SET_TYPE ON TB_SET_TYPE.SET_TYPE_ID = S.SET_TYPE_ID

	WHERE RS.REVIEW_ID = @REVIEW_ID
	ORDER BY RS.SET_ORDER, RS.SET_ID


SET NOCOUNT OFF
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetInsert]    Script Date: 23/04/2020 12:29:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create or ALTER procedure [dbo].[st_ReviewSetInsert]
(
	@REVIEW_ID INT,
	@SET_TYPE_ID INT = 3,
	@ALLOW_CODING_EDITS BIT = false,
	@SET_NAME NVARCHAR(255),
	@CODING_IS_FINAL BIT = true,
	@SET_ORDER INT = 0,
	@SET_DESCRIPTION nvarchar(2000) = '',
	@ORIGINAL_SET_ID int = null,
	@NEW_REVIEW_SET_ID INT OUTPUT,
	@NEW_SET_ID INT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_SET(SET_TYPE_ID, SET_NAME, SET_DESCRIPTION, ORIGINAL_SET_ID, USER_CAN_EDIT_URLS)
		VALUES(@SET_TYPE_ID, @SET_NAME, @SET_DESCRIPTION, @ORIGINAL_SET_ID, 'False')

	SET @NEW_SET_ID = @@IDENTITY

	INSERT INTO TB_REVIEW_SET(REVIEW_ID, SET_ID, ALLOW_CODING_EDITS, CODING_IS_FINAL, SET_ORDER)
		VALUES(@REVIEW_ID, @NEW_SET_ID, @ALLOW_CODING_EDITS, @CODING_IS_FINAL, @SET_ORDER)

	SET @NEW_REVIEW_SET_ID = @@IDENTITY


SET NOCOUNT OFF
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_ReviewSetUpdate]    Script Date: 23/04/2020 12:31:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create or ALTER procedure [dbo].[st_ReviewSetUpdate]
(
	@REVIEW_SET_ID INT,
	@SET_ID INT,
	@ALLOW_CODING_EDITS BIT,
	@CODING_IS_FINAL BIT,
	@SET_NAME NVARCHAR(255),
	@SET_ORDER INT,
	@SET_DESCRIPTION nvarchar(2000),
	@ITEM_SET_ID BIGINT = NULL,
	@IS_COMPLETED BIT = NULL,
	@IS_LOCKED BIT = NULL,
	@REVIEW_ID INT,
	@USER_CAN_EDIT_URLS BIT = 'False'
)

As

SET NOCOUNT ON


declare @check int = 0
set @check = (select count(REVIEW_SET_ID) from 
TB_REVIEW_SET where REVIEW_SET_ID = @REVIEW_SET_ID and REVIEW_ID = @REVIEW_ID)
if(@check != 1) return

UPDATE TB_SET SET SET_NAME = @SET_NAME, SET_DESCRIPTION = @SET_DESCRIPTION, USER_CAN_EDIT_URLS = @USER_CAN_EDIT_URLS
	WHERE SET_ID = @SET_ID
UPDATE TB_REVIEW_SET SET ALLOW_CODING_EDITS = @ALLOW_CODING_EDITS,
	CODING_IS_FINAL = @CODING_IS_FINAL,
	SET_ORDER = @SET_ORDER
WHERE REVIEW_SET_ID = @REVIEW_SET_ID
	
IF (@ITEM_SET_ID > 0)
BEGIN
	UPDATE TB_ITEM_SET
	SET IS_COMPLETED = @IS_COMPLETED, IS_LOCKED = @IS_LOCKED
	WHERE ITEM_SET_ID = @ITEM_SET_ID
END

SET NOCOUNT OFF
go

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSet]    Script Date: 23/04/2020 13:34:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create or ALTER procedure [dbo].[st_AttributeSet]
(
	@SET_ID INT,
	@PARENT_ATTRIBUTE_ID BIGINT = 0
)

As

SELECT TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID, TB_ATTRIBUTE_SET.SET_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_ID, TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID,
	TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_SET_DESC, TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER,
	ATTRIBUTE_TYPE, ATTRIBUTE_NAME, ATTRIBUTE_SET_DESC, CONTACT_ID, TB_ATTRIBUTE.ATTRIBUTE_DESC, Ext_URL, Ext_Type

FROM TB_ATTRIBUTE_SET
INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ATTRIBUTE_SET.SET_ID
INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID
INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID

WHERE TB_ATTRIBUTE_SET.SET_ID = @SET_ID
	AND TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID = @PARENT_ATTRIBUTE_ID

ORDER BY PARENT_ATTRIBUTE_ID, ATTRIBUTE_ORDER
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AllAttributesInSet]    Script Date: 23/04/2020 13:55:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create or ALTER procedure [dbo].[st_AllAttributesInSet]
(
	@SET_ID INT
)

As

SELECT TB_ATTRIBUTE_SET.ATTRIBUTE_SET_ID, TB_ATTRIBUTE_SET.SET_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_ID, TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID,
	TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID, TB_ATTRIBUTE_SET.ATTRIBUTE_SET_DESC, TB_ATTRIBUTE_SET.ATTRIBUTE_ORDER,
	ATTRIBUTE_TYPE, ATTRIBUTE_NAME, ATTRIBUTE_SET_DESC, CONTACT_ID, TB_ATTRIBUTE.ATTRIBUTE_DESC, Ext_URL, Ext_Type

FROM TB_ATTRIBUTE_SET
INNER JOIN TB_SET ON TB_SET.SET_ID = TB_ATTRIBUTE_SET.SET_ID 
INNER JOIN TB_ATTRIBUTE ON TB_ATTRIBUTE.ATTRIBUTE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_ID and TB_ATTRIBUTE_SET.PARENT_ATTRIBUTE_ID is not null
INNER JOIN TB_ATTRIBUTE_TYPE ON TB_ATTRIBUTE_TYPE.ATTRIBUTE_TYPE_ID = TB_ATTRIBUTE_SET.ATTRIBUTE_TYPE_ID

WHERE TB_ATTRIBUTE_SET.SET_ID = @SET_ID
	AND dbo.fn_IsAttributeInTree(TB_ATTRIBUTE.attribute_id) = 1

ORDER BY PARENT_ATTRIBUTE_ID, ATTRIBUTE_ORDER
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetUpdate]    Script Date: 23/04/2020 13:34:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create or ALTER procedure [dbo].[st_AttributeSetUpdate]
(
	@ATTRIBUTE_SET_ID BIGINT,
	@SET_ID INT,
	@ATTRIBUTE_ID BIGINT,
	@PARENT_ATTRIBUTE_ID BIGINT,
	@ATTRIBUTE_TYPE_ID INT,
	@ATTRIBUTE_SET_DESC NVARCHAR(MAX),
	@ATTRIBUTE_ORDER INT,
	@ATTRIBUTE_NAME NVARCHAR(255),
	@ATTRIBUTE_DESC NVARCHAR(2000),
	@CONTACT_ID INT -- not used yet - maybe for authorisation,
	,@REVIEW_ID INT
	,@Ext_URL nvarchar(2048) = ''
	,@Ext_Type nvarchar(100) = ''
)

As

SET NOCOUNT ON

declare @check int = 0

set @check = (select count (tas.ATTRIBUTE_ID) from TB_ATTRIBUTE_SET tas
				inner join TB_REVIEW_SET rs on tas.SET_ID = rs.SET_ID 
					and tas.ATTRIBUTE_ID = @ATTRIBUTE_ID
					and rs.REVIEW_ID = @REVIEW_ID
					and tas.ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID
			)

if(@check != 1) return


	UPDATE TB_ATTRIBUTE
		SET ATTRIBUTE_NAME = @ATTRIBUTE_NAME, ATTRIBUTE_DESC = @ATTRIBUTE_DESC,
			Ext_Type = @Ext_Type, Ext_URL = @Ext_URL
		WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID

	UPDATE TB_ATTRIBUTE_SET
		SET SET_ID = @SET_ID, PARENT_ATTRIBUTE_ID = @PARENT_ATTRIBUTE_ID, ATTRIBUTE_TYPE_ID = @ATTRIBUTE_TYPE_ID,
			ATTRIBUTE_SET_DESC = @ATTRIBUTE_SET_DESC, ATTRIBUTE_ORDER = @ATTRIBUTE_ORDER
		WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID


SET NOCOUNT OFF

go

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetLimitedUpdate]    Script Date: 23/04/2020 14:13:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[st_AttributeSetLimitedUpdate]
(
	@ATTRIBUTE_ID BIGINT,
	@ATTRIBUTE_SET_ID BIGINT,
	@ATTRIBUTE_TYPE_ID INT,
	@ATTRIBUTE_NAME NVARCHAR(255),
	@ATTRIBUTE_DESCRIPTION NVARCHAR(MAX),
	@ATTRIBUTE_ORDER INT,
	@REVIEW_ID INT
	,@Ext_URL nvarchar(2048) = ''
	,@Ext_Type nvarchar(100) = ''
)

As

SET NOCOUNT ON

declare @check int = 0

set @check = (select count (tas.ATTRIBUTE_ID) from TB_ATTRIBUTE_SET tas
				inner join TB_REVIEW_SET rs on tas.SET_ID = rs.SET_ID 
					and tas.ATTRIBUTE_ID = @ATTRIBUTE_ID
					and rs.REVIEW_ID = @REVIEW_ID
			)

if(@check != 1) return


	UPDATE TB_ATTRIBUTE
		SET ATTRIBUTE_NAME = @ATTRIBUTE_NAME, Ext_Type = @Ext_Type, Ext_URL = @Ext_URL
		WHERE ATTRIBUTE_ID = @ATTRIBUTE_ID
		
	UPDATE TB_ATTRIBUTE_SET
		SET ATTRIBUTE_SET_DESC = @ATTRIBUTE_DESCRIPTION,
		 ATTRIBUTE_TYPE_ID = @ATTRIBUTE_TYPE_ID,
		 ATTRIBUTE_ORDER = @ATTRIBUTE_ORDER
		WHERE ATTRIBUTE_SET_ID = @ATTRIBUTE_SET_ID

SET NOCOUNT OFF
GO

USE [Reviewer]
GO
/****** Object:  StoredProcedure [dbo].[st_AttributeSetInsert]    Script Date: 23/04/2020 14:34:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create or ALTER procedure [dbo].[st_AttributeSetInsert]
(
	@SET_ID INT,
	@PARENT_ATTRIBUTE_ID BIGINT = 0,
	@ATTRIBUTE_TYPE_ID INT = 1,
	@ATTRIBUTE_SET_DESC NVARCHAR(MAX) = null,
	@ATTRIBUTE_ORDER INT = 1,
	@ATTRIBUTE_NAME NVARCHAR(255),
	@ATTRIBUTE_DESC NVARCHAR(2000) = null,
	@CONTACT_ID INT,
	@ORIGINAL_ATTRIBUTE_ID BIGINT = null,
	@Ext_URL nvarchar(2048) = '',
	@Ext_Type nvarchar(100) = '',

	@NEW_ATTRIBUTE_SET_ID BIGINT OUTPUT,
	@NEW_ATTRIBUTE_ID BIGINT OUTPUT
)

As

SET NOCOUNT ON

	INSERT INTO TB_ATTRIBUTE(CONTACT_ID, ATTRIBUTE_NAME, ATTRIBUTE_DESC, ORIGINAL_ATTRIBUTE_ID, Ext_URL, Ext_Type)
		VALUES(@CONTACT_ID, @ATTRIBUTE_NAME, @ATTRIBUTE_DESC, @ORIGINAL_ATTRIBUTE_ID, @Ext_URL, @Ext_Type)

	SET @NEW_ATTRIBUTE_ID = @@IDENTITY

	INSERT INTO TB_ATTRIBUTE_SET(ATTRIBUTE_ID, SET_ID, PARENT_ATTRIBUTE_ID, ATTRIBUTE_TYPE_ID, ATTRIBUTE_SET_DESC, ATTRIBUTE_ORDER)
		VALUES(@NEW_ATTRIBUTE_ID, @SET_ID, @PARENT_ATTRIBUTE_ID, @ATTRIBUTE_TYPE_ID, @ATTRIBUTE_SET_DESC, @ATTRIBUTE_ORDER)

	SET @NEW_ATTRIBUTE_SET_ID = @@IDENTITY


SET NOCOUNT OFF
GO
